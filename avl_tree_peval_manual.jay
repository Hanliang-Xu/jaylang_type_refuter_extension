let t =
  let ycomb_b_9 =
    fun f_b_7 ->
    (fun x_b_6 freeze_b_8 -> f_b_7 (x_b_6 x_b_6) freeze_b_8)
    (fun x_b_6 freeze_b_8 -> f_b_7 (x_b_6 x_b_6) freeze_b_8)
    in
  ycomb_b_9 (fun self_b_5 ~null ->
             {checker = fun expr_b_138 ->
                        (fun tt ->
                          let match_fail_b_94 = false in
                          match expr_b_138 with
                          | `Node v_val_b_99 ->
                            match v_val_b_99 with
                            | {~actual_rec = _} ->
                            match v_val_b_99.~decl_lbls
                            with
                            | {item = item, left = left, right = right_} ->
                            match v_val_b_99.~actual_rec
                            with
                            | {item = item, left = left, right = right_} ->
                            let lbl_check_b_111 =
                                match item with
                                | int -> true
                                end
                              in
                            if lbl_check_b_111
                            then
                              let lbl_check_b_110 =
                                tt.checker left
                                in
                              if lbl_check_b_110
                              then
                                tt.checker right
                              else
                                lbl_check_b_110
                            else
                              lbl_check_b_111
                            
                            | any -> false
                            end
                            | any -> false
                            end
                            | any -> false
                            end
                          
                          | `Leaf v_val_b_95 -> # could be better as v_val_b_95 ~ int
                              match v_val_b_95 with
                              | int -> true
                              | any -> false
                          | any -> match_fail_b_94
                          end) (self_b_5 0)
            , generator = 
              fun ~null ->
              (fun tt ->
                    if input > 0 then
                    `Node ({~actual_rec = 
                              let right_b_15 = tt.generator 0
                              in
                              let left_b_14 = tt.generator 0
                              in
                              let item_b_13 = input
                              in
                              {item = item_b_13, left = left_b_14, right = right_b_15}
                            , ~decl_lbls = 
                            {item = {}, left = {}, right = {}}}
                          , wrapper =
                            fun expr_b_28 ->
                              {~actual_rec = expr_b_28.~actual_rec
                              , ~decl_lbls = {item = {}, left = {}, right = {}}
                          })
                    else `Leaf (input)
               ) (self_b_5 0)
          , wrapper = fun expr_b_139 -> expr_b_139
          }) 
  0
  in
let empty = `Leaf 0 in
let max a b = if a > b then a else b in
let rec height x =
let fail_b_140 = false in
match x with
| {~untouched = _} -> assert fail_b_140| `Leaf l -> 0| `Node node ->
                                                     max (height (match
                                                                  node.~decl_lbls
                                                                  with
                                                                  | {left = _} ->
                                                                  (node.~actual_rec).left
                                                                  | any ->
                                                                  assert 
                                                                  false end)) (
                                                     height (match
                                                             node.~decl_lbls
                                                             with
                                                             | {right = _} ->
                                                             (node.~actual_rec).right
                                                             | any ->
                                                             assert false end)) + 
                                                     1
end in
let is_leaf x =
let fail_b_141 = false in
match x with
| {~untouched = _} -> assert fail_b_141| `Leaf l -> true| any -> false end in
let item_exn x =
let fail_b_142 = false in
match x with
| {~untouched = _} -> assert fail_b_142| `Node node ->
                                       match node.~decl_lbls with
                                       | {item = _} ->
                                       (node.~actual_rec).item| any ->
                                                              assert false
                                       end
end in
let left_exn x =
let fail_b_143 = false in
match x with
| {~untouched = _} -> assert fail_b_143| `Node node ->
                                       match node.~decl_lbls with
                                       | {left = _} ->
                                       (node.~actual_rec).left| any ->
                                                              assert false
                                       end
end in
let right_exn x =
let fail_b_144 = false in
match x with
| {~untouched = _} -> assert fail_b_144| `Node node ->
                                       match node.~decl_lbls with
                                       | {right = _} ->
                                       (node.~actual_rec).right| any ->
                                                               assert false
                                       end
end in
let balance_factor x =
let fail_b_145 = false in
match x with
| {~untouched = _} -> assert fail_b_145| `Leaf leaf -> 0| `Node node ->
                                                        height (match
                                                                node.~decl_lbls
                                                                with
                                                                | {left = _} ->
                                                                (node.~actual_rec).left
                                                                | any ->
                                                                assert false
                                                                end) - 
                                                        height (match
                                                                node.~decl_lbls
                                                                with
                                                                | {right = _} ->
                                                                (node.~actual_rec).right
                                                                | any ->
                                                                assert false
                                                                end)
end in
let abs a = if a > 0 then a else 0 - a in
let is_balanced x =
let rec check_balanced x =
let fail_b_146 = false in
match x with
| {~untouched = _} -> assert fail_b_146| `Leaf l ->
                                       {~actual_rec = {b = true, h = 0}, ~decl_lbls = 
                                        {b = {}, h = {}}}| `Node node ->
                                                         let left_res =
                                                           check_balanced (
                                                           match
                                                           node.~decl_lbls
                                                           with
                                                           | {left = _} ->
                                                           (node.~actual_rec).left
                                                           | any ->
                                                           assert false end)
                                                           in
                                                         if
                                                         match
                                                         left_res.~decl_lbls
                                                         with
                                                         | {b = _} ->
                                                         (left_res.~actual_rec).b
                                                         | any ->
                                                         assert false end
                                                         then
                                                         let right_res =
                                                           check_balanced (
                                                           match
                                                           node.~decl_lbls
                                                           with
                                                           | {right = _} ->
                                                           (node.~actual_rec).right
                                                           | any ->
                                                           assert false end)
                                                           in
                                                         if
                                                         match
                                                         right_res.~decl_lbls
                                                         with
                                                         | {b = _} ->
                                                         (right_res.~actual_rec).b
                                                         | any ->
                                                         assert false end
                                                         then
                                                         {~actual_rec = 
                                                          {b = abs ((
                                                                    match
                                                                    left_res.~decl_lbls
                                                                    with
                                                                    | 
                                                                    {h = _} ->
                                                                    (
                                                                    left_res.~actual_rec).h
                                                                    | any ->
                                                                    assert 
                                                                    false end) - (
                                                                    match
                                                                    right_res.~decl_lbls
                                                                    with
                                                                    | 
                                                                    {h = _} ->
                                                                    (
                                                                    right_res.~actual_rec).h
                                                                    | any ->
                                                                    assert 
                                                                    false end)) < 
                                                               2, h = 
                                                           max (match
                                                                left_res.~decl_lbls
                                                                with
                                                                | {h = _} ->
                                                                (left_res.~actual_rec).h
                                                                | any ->
                                                                assert false
                                                                end) (
                                                           match
                                                           right_res.~decl_lbls
                                                           with
                                                           | {h = _} ->
                                                           (right_res.~actual_rec).h
                                                           | any ->
                                                           assert false end) + 
                                                           1}, ~decl_lbls = 
                                                          {b = {}, h = {}}}
                                                         else {~actual_rec = 
                                                               {b = false, h = 
                                                                0}, ~decl_lbls = 
                                                               {b = {}, h = 
                                                                {}}}
                                                          else {~actual_rec = 
                                                                {b = 
                                                                 false, h = 
                                                                 0}, ~decl_lbls = 
                                                                {b = 
                                                                 {}, h = 
                                                                 {}}}
                                                          end
 in
match (check_balanced x).~decl_lbls with
| {b = _} -> ((check_balanced x).~actual_rec).b| any -> assert false end in
let is_bst x =
let rec to_list x acc =
let fail_b_147 = false in
match x with
| {~untouched = _} -> assert fail_b_147| `Node node ->
                                       to_list (match node.~decl_lbls with
                                                | {left = _} ->
                                                (node.~actual_rec).left
                                                | any -> assert false end) (
                                       (match node.~decl_lbls with
                                        | {item = _} ->
                                        (node.~actual_rec).item| any ->
                                                               assert false
                                        end) :: to_list (match
                                                         node.~decl_lbls with
                                                         | {right = _} ->
                                                         (node.~actual_rec).right
                                                         | any ->
                                                         assert false end) 
                                                acc)| `Leaf l -> acc
end in
let rec is_increasing_strictly ls =
let fail_b_148 = false in
match ls with
| {~untouched = _} -> assert fail_b_148| [] -> true| hd :: tl ->
                                                   let fail_b_149 = false in
                                                   match tl with
                                                   | {~untouched = _} ->
                                                   assert fail_b_149| [] ->
                                                                    true
                                                   | next :: tll ->
                                                   if hd < next then
                                                   is_increasing_strictly tl
                                                   else false end
end in is_increasing_strictly (to_list x []) in
let avl_tree =
  {checker = fun expr_b_151 ->
             let t_check_b_152 = t.checker expr_b_151 in
             if t_check_b_152 then
             let pred_check_b_153 = false in
             if (fun tree -> is_balanced tree and is_bst tree) expr_b_151
             then true else pred_check_b_153 else t_check_b_152, generator = 
   fun ~null ->
   let candidate_b_150 = t.generator 0 in
   if (fun tree -> is_balanced tree and is_bst tree) candidate_b_150 then
   candidate_b_150 else assume false, wrapper = t.wrapper}
  in
let create_node item left right =
`Node {~actual_rec = {item = item, left = left, right = right}, ~decl_lbls = 
       {item = {}, left = {}, right = {}}} in
let rotate_left x =
let fail_b_154 = false in
match x with
| {~untouched = _} -> assert fail_b_154| `Node node ->
                                       let fail_b_155 = false in
                                       match
                                       match node.~decl_lbls with
                                       | {right = _} ->
                                       (node.~actual_rec).right| any ->
                                                               assert false
                                       end with
                                       | {~untouched = _} ->
                                       assert fail_b_155| `Node right_node ->
                                                        create_node (
                                                        match
                                                        right_node.~decl_lbls
                                                        with
                                                        | {item = _} ->
                                                        (right_node.~actual_rec).item
                                                        | any -> assert false
                                                        end) (create_node (
                                                              match
                                                              node.~decl_lbls
                                                              with
                                                              | {item = _} ->
                                                              (node.~actual_rec).item
                                                              | any ->
                                                              assert false
                                                              end) (match
                                                                    node.~decl_lbls
                                                                    with
                                                                    | 
                                                                    {left = _} ->
                                                                    (
                                                                    node.~actual_rec).left
                                                                    | any ->
                                                                    assert 
                                                                    false end) (
                                                              match
                                                              right_node.~decl_lbls
                                                              with
                                                              | {left = _} ->
                                                              (right_node.~actual_rec).left
                                                              | any ->
                                                              assert false
                                                              end)) (
                                                        match
                                                        right_node.~decl_lbls
                                                        with
                                                        | {right = _} ->
                                                        (right_node.~actual_rec).right
                                                        | any -> assert false
                                                        end)
                                       end
end in
let rotate_right x =
let fail_b_156 = false in
match x with
| {~untouched = _} -> assert fail_b_156| `Node node ->
                                       let fail_b_157 = false in
                                       match
                                       match node.~decl_lbls with
                                       | {left = _} ->
                                       (node.~actual_rec).left| any ->
                                                              assert false
                                       end with
                                       | {~untouched = _} ->
                                       assert fail_b_157| `Node left_node ->
                                                        create_node (
                                                        match
                                                        left_node.~decl_lbls
                                                        with
                                                        | {item = _} ->
                                                        (left_node.~actual_rec).item
                                                        | any -> assert false
                                                        end) (match
                                                              left_node.~decl_lbls
                                                              with
                                                              | {left = _} ->
                                                              (left_node.~actual_rec).left
                                                              | any ->
                                                              assert false
                                                              end) (create_node (
                                                                    match
                                                                    node.~decl_lbls
                                                                    with
                                                                    | 
                                                                    {item = _} ->
                                                                    (
                                                                    node.~actual_rec).item
                                                                    | any ->
                                                                    assert 
                                                                    false end) (
                                                                    match
                                                                    left_node.~decl_lbls
                                                                    with
                                                                    | 
                                                                    {right = _} ->
                                                                    (
                                                                    left_node.~actual_rec).right
                                                                    | any ->
                                                                    assert 
                                                                    false end) (
                                                                    match
                                                                    node.~decl_lbls
                                                                    with
                                                                    | 
                                                                    {right = _} ->
                                                                    (
                                                                    node.~actual_rec).right
                                                                    | any ->
                                                                    assert 
                                                                    false end))
                                       end
end in
let rotate_left_right x =
let fail_b_158 = false in
match x with
| {~untouched = _} -> assert fail_b_158| `Node node ->
                                       rotate_right (create_node (match
                                                                  node.~decl_lbls
                                                                  with
                                                                  | {right = _} ->
                                                                  (node.~actual_rec).right
                                                                  | any ->
                                                                  assert 
                                                                  false end) (
                                                     rotate_left (match
                                                                  node.~decl_lbls
                                                                  with
                                                                  | {left = _} ->
                                                                  (node.~actual_rec).left
                                                                  | any ->
                                                                  assert 
                                                                  false end)) (
                                                     match node.~decl_lbls
                                                     with
                                                     | {right = _} ->
                                                     (node.~actual_rec).right
                                                     | any -> assert false
                                                     end))
end in
let rotate_right_left x =
let fail_b_159 = false in
match x with
| {~untouched = _} -> assert fail_b_159| `Node node ->
                                       rotate_left (create_node (match
                                                                 node.~decl_lbls
                                                                 with
                                                                 | {item = _} ->
                                                                 (node.~actual_rec).item
                                                                 | any ->
                                                                 assert false
                                                                 end) (
                                                    match node.~decl_lbls
                                                    with
                                                    | {left = _} ->
                                                    (node.~actual_rec).left
                                                    | any -> assert false end) (
                                                    rotate_right (match
                                                                  node.~decl_lbls
                                                                  with
                                                                  | {right = _} ->
                                                                  (node.~actual_rec).right
                                                                  | any ->
                                                                  assert 
                                                                  false end)))
end in
let rec insert tree i =
let rebalance i node =
let bf = balance_factor node in
if bf > 1 then
if i < item_exn (left_exn node) then rotate_left node
else rotate_left_right node
else if bf < 0 - 1 then
     if i > item_exn (right_exn node) then rotate_left node
     else rotate_right_left node else node
 in
let fail_b_163 = false in
match tree with
| {~untouched = _} -> assert fail_b_163| `Leaf l -> create_node i empty empty
| `Node node ->
let fail_b_164 = false in
match node with
| {~actual_rec = actual_rec_b_177_} ->
match node.~decl_lbls with
| {item = item, left = left, right = right_} ->
let right = actual_rec_b_177.right in
let left = actual_rec_b_177.left in
let item = actual_rec_b_177.item in
let new_node =
  if i < item then create_node item (insert left i) right
  else if i > item then create_node item left (insert right i) else tree
  in
rebalance i new_node end| {~untouched = _} -> assert fail_b_164 end end in
let check_res_b_174 =
  let tree_b_176 = avl_tree.generator 0 in
  let i_b_175 =
    {checker = let fail_b_161 = false in
               fun expr_b_160 ->
               match expr_b_160 with | int -> true| any -> fail_b_161 end, generator = 
     fun ~null -> input, wrapper = fun expr_b_162 -> expr_b_162}.generator 
    0
    in
  avl_tree.checker (insert tree_b_176 i_b_175)
  in
if check_res_b_174 then
let rec insert eta_b_4 =
(let wrap_t_b_0 = avl_tree.wrapper in
 fun tree_b_1 ->
 if avl_tree.checker tree_b_1 then
 let tree = wrap_t_b_0 tree_b_1 in
 let wrap_t_b_2 =
   {checker = let fail_b_166 = false in
              fun expr_b_165 ->
              match expr_b_165 with | int -> true| any -> fail_b_166 end, generator = 
    fun ~null -> input, wrapper = fun expr_b_167 -> expr_b_167}.wrapper
   in
 fun i_b_3 ->
 if
 {checker = let fail_b_169 = false in
            fun expr_b_168 ->
            match expr_b_168 with | int -> true| any -> fail_b_169 end, generator = 
  fun ~null -> input, wrapper = fun expr_b_170 -> expr_b_170}.checker 
 i_b_3 then
 let i = wrap_t_b_2 i_b_3 in
 avl_tree.wrapper (let rebalance i node =
                   let bf = balance_factor node in
                   if bf > 1 then
                   if i < item_exn (left_exn node) then rotate_left node
                   else rotate_left_right node
                   else if bf < 0 - 1 then
                        if i > item_exn (right_exn node) then
                        rotate_left node else rotate_right_left node
                        else node
                    in
                   let fail_b_171 = false in
                   match tree with
                   | {~untouched = _} -> assert fail_b_171| `Leaf l ->
                                                          create_node i empty 
                                                          empty| `Node node ->
                                                               let fail_b_172 =
                                                                 false
                                                                 in
                                                               match 
                                                               node with
                                                               | {~actual_rec = actual_rec_b_173_} ->
                                                               match
                                                               node.~decl_lbls
                                                               with
                                                               | {item = item, left = left, right = right_} ->
                                                               let right =
                                                                 actual_rec_b_173.right
                                                                 in
                                                               let left =
                                                                 actual_rec_b_173.left
                                                                 in
                                                               let item =
                                                                 actual_rec_b_173.item
                                                                 in
                                                               let new_node =
                                                                 if i < item
                                                                 then
                                                                 create_node 
                                                                 item (
                                                                 insert left 
                                                                 i) right
                                                                 else 
                                                                 if i > item
                                                                 then
                                                                 create_node 
                                                                 item 
                                                                 left (
                                                                 insert right 
                                                                 i) else 
                                                                 tree
                                                                 in
                                                               rebalance i 
                                                               new_node end
                                                               | {~untouched = _} ->
                                                               assert 
                                                               fail_b_172 end
                   end)
  else assert false else assert false) eta_b_4 in
insert else Error: check_res_b_174