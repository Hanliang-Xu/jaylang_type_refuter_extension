#lang racket

(provide (all-defined-out))

(struct Test (name test-cases) #:transparent)
(struct TestCase (k source) #:transparent)
(struct Result (test measurements) #:transparent)

(define suite
  `(#;,@`( ;; Baseline (k = 0)
        #;,(Test 'ack `((ddpa . ,(TestCase 0 'ack)) (p4f . ,(TestCase 0 'ack))))
        #;,(Test 'blur `((ddpa . ,(TestCase 0 'blur)) (p4f . ,(TestCase 0 'blur))))
        ,(Test 'church `((ddpa . ,(TestCase 0 'church)) (p4f . ,(TestCase 0 'church))))
        ,(Test 'cpstak `((ddpa . ,(TestCase 0 'cpstak)) (p4f . ,(TestCase 0 'cpstak))))
        ,(Test 'deriv `((ddpa . ,(TestCase 0 'deriv)) (p4f . ,(TestCase 0 'deriv))))
        #;,(Test 'eta `((ddpa . ,(TestCase 0 'eta)) (p4f . ,(TestCase 0 'eta))))
        #;,(Test 'facehugger `((ddpa . ,(TestCase 0 'facehugger)) (p4f . ,(TestCase 0 'facehugger))))
        #;,(Test 'flatten `((ddpa . ,(TestCase 0 'flatten)) (p4f . ,(TestCase 0 'flatten))))
        ,(Test 'kcfa-2 `((ddpa . ,(TestCase 0 'kcfa-2)) (p4f . ,(TestCase 0 'kcfa-2))))
        ,(Test 'kcfa-3 `((ddpa . ,(TestCase 0 'kcfa-3)) (p4f . ,(TestCase 0 'kcfa-3))))
        #;,(Test 'loop2 `((ddpa . ,(TestCase 0 'loop2-1)) (p4f . ,(TestCase 0 'loop2-1))))
        #;,(Test 'map `((ddpa . ,(TestCase 0 'map)) (p4f . ,(TestCase 0 'map))))
        #;,(Test 'mj09 `((ddpa . ,(TestCase 0 'mj09)) (p4f . ,(TestCase 0 'mj09))))
        ,(Test 'primtest `((ddpa . ,(TestCase 0 'primtest)) (p4f . ,(TestCase 0 'primtest))))
        ,(Test 'regex `((ddpa . ,(TestCase 0 'regex)) (p4f . ,(TestCase 0 'regex))))
        ,(Test 'rsa `((ddpa . ,(TestCase 0 'rsa)) (p4f . ,(TestCase 0 'rsa))))
        ,(Test 'sat-1 `((ddpa . ,(TestCase 0 'sat-1)) (p4f . ,(TestCase 0 'sat-1))))
        ,(Test 'sat-2 `((ddpa . ,(TestCase 0 'sat-2)) (p4f . ,(TestCase 0 'sat-2))))
        ,(Test 'sat-3 `((ddpa . ,(TestCase 0 'sat-3)) (p4f . ,(TestCase 0 'sat-3))))
        #;,(Test 'state `((ddpa . ,(TestCase 0 'state))))
        ,(Test 'tak `((ddpa . ,(TestCase 0 'tak)) (p4f . ,(TestCase 0 'tak)))))
    #;,@`( ;; Higher k
        #;,(Test 'ack `((ddpa . ,(TestCase 1 'ack)) (p4f . ,(TestCase 1 'ack))))
        #;,(Test 'blur `((ddpa . ,(TestCase 1 'blur)) (p4f . ,(TestCase 1 'blur))))
        ,(Test 'church `((ddpa . ,(TestCase 1 'church)) (p4f . ,(TestCase 1 'church))))
        ,(Test 'cpstak `((ddpa . ,(TestCase 1 'cpstak)) (p4f . ,(TestCase 1 'cpstak))))
        ,(Test 'deriv `((ddpa . ,(TestCase 1 'deriv)) (p4f . ,(TestCase 1 'deriv))))
        #;,(Test 'eta `((ddpa . ,(TestCase 1 'eta)) (p4f . ,(TestCase 1 'eta))))
        #;,(Test 'facehugger `((ddpa . ,(TestCase 1 'facehugger)) (p4f . ,(TestCase 1 'facehugger))))
        #;,(Test 'flatten `((ddpa . ,(TestCase 1 'flatten)) (p4f . ,(TestCase 1 'flatten))))
        ,(Test 'kcfa-2 `((ddpa . ,(TestCase 5 'kcfa-2)) (p4f . ,(TestCase 1 'kcfa-2))))
        ,(Test 'kcfa-3 `((ddpa . ,(TestCase 7 'kcfa-3)) (p4f . ,(TestCase 1 'kcfa-3))))
        #;,(Test 'loop2 `((ddpa . ,(TestCase 1 'loop2-1)) (p4f . ,(TestCase 1 'loop2-1))))
        #;,(Test 'map `((ddpa . ,(TestCase 1 'map)) (p4f . ,(TestCase 1 'map))))
        #;,(Test 'mj09 `((ddpa . ,(TestCase 1 'mj09)) (p4f . ,(TestCase 1 'mj09))))
        ,(Test 'primtest `((ddpa . ,(TestCase 1 'primtest)) (p4f . ,(TestCase 1 'primtest))))
        ,(Test 'regex `((ddpa . ,(TestCase 1 'regex)) (p4f . ,(TestCase 1 'regex))))
        ,(Test 'rsa `((ddpa . ,(TestCase 1 'rsa)) (p4f . ,(TestCase 1 'rsa))))
        ,(Test 'sat-1 `((ddpa . ,(TestCase 4 'sat-1)) (p4f . ,(TestCase 1 'sat-1))))
        ,(Test 'sat-2 `((ddpa . ,(TestCase 4 'sat-2)) (p4f . ,(TestCase 1 'sat-2))))
        ,(Test 'sat-3 `((ddpa . ,(TestCase 4 'sat-3)) (p4f . ,(TestCase 1 'sat-3))))
        #;,(Test 'state `((ddpa . ,(TestCase 1 'state))))
        ,(Test 'tak `((ddpa . ,(TestCase 1 'tak)) (p4f . ,(TestCase 1 'tak)))))))