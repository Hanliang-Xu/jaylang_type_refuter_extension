
  flatten_fun___18 = fun count___0 -> (
  
    flatten_fun___17 = fun d -> (
    
      var___3 = count___0;
      var___4 = count___0;
      appl___5 = var___3 var___4;
      count = appl___5;
      input___6 = input;
      x = input___6;
      var___7 = x;
      int___8 = 0;
      binop___9 = var___7 == int___8;
      if___16 = binop___9 ? (int___10 = 0) : (
                                                int___11 = 1;
                                                var___12 = count;
                                                var___13 = d;
                                                appl___14 = var___12 var___13;
                                                binop___15 = int___11 + appl___14
                                               )
      )
    );
  count___0___2 = flatten_fun___18;
  var___19 = count___0___2;
  var___20 = count___0___2;
  appl___21 = var___19 var___20;
  count___1 = appl___21;
  var___22 = count___1;
  int___23 = 0;
  appl___24 = var___22 int___23;
  cb = appl___24;
  int___25 = 0;
  var___26 = cb;
  binop___27 = int___25 < var___26;
  if___31 = binop___27 ? (int___28 = 1; target = int___28; int___29 = 1) : 
                           (int___30 = 0);
  ___result = if___31

