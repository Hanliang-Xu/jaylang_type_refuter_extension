# EXPECT-WELL-FORMED
# EXPECT-INPUT-SEQUENCES-REACH target [ 1, 2 ]
# EXPECT-REQUIRED-INPUT-SEQUENCE-GENERATION-STEPS 67000

let assert_false = false
in let loop_end = 0

## 
# int work(int w) { 
#    int i,j=0;
#    for(i=0;i<w;i++) j++;
#    return 0; 
# }
##
in let work w =
  let rec work_loop j i =
    if i == w
    then loop_end
    else (
      work_loop (j+1) (i+1)
    )
  in let ignored = work_loop 0 0
  in 0

##
#void f(int m, int n) {
#    int i, a, sum=0;
#    for (i=0;i<6;i++) {
#        a = n%2;
#        if (a) sum += a+1;
#        n/=2;
#    }
#}
#    while (1) {
#        if (sum==0 && m==43) failure();
#    }
#}
##

in let f m n =
  let rec f_loop n sum i =
  # if i == 6
  if i == 1
  then sum
  else (
      let a = n % 2
      in let sum_next = 
              sum + (if a == 0 then 0 else (a + 1))
      in let n_next = n / 2
      in f_loop n_next sum_next (i+1)
  )
  in let loop_result = f_loop n 0 0
  in let rec f_while c =
    if (loop_result == 0) and (m == 1)
    then let target = assert_false in target
    else (
      if c
      then f_while c
      else 0
    )
  in f_while true

##
#void g(int m, int n) {
#    int i;
#    for (i=0;i<1000;i++)  {
#        work(1);
#        if (m == i) f(m, n);
#    }
#}
##

in let g m n =
  let rec g_loop i =
    #if i == 3
    if i == 1000
    then loop_end
    else (
      let ignored =
        if m == i
        then f m n
        else 0
      in g_loop (i+1)
    )
  in g_loop 0

in let m = input
in let n = input
#in let ignored = work 3
in let ignored = work 1
# in if 30 <= m
in if 0 <= m
    then g m n
    else 0