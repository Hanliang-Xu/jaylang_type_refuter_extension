# EXPECT-WELL-FORMED
# EXPECT-INPUT-SEQUENCES-REACH target [ 4, 98, 0, 0, 0, 0, 0, 0, 0 ]
## Input sequence: [4, 98, 0, 0, 0, 0, 0, 0, 0]
## Generated in 13538 steps.


## the original C code check how many args start with 'b', check in `*argv[i]`

let argc = input
in let arg_0 = input
in let arg_1 = input
in let arg_2 = input
in let arg_3 = input
in let arg_4 = input
in let arg_5 = input
in let arg_6 = input
in let arg_7 = input
## There is another encoding to treat the fixed length array as nestes pairs
## but I guess this relies more on condition on i in Z3
in let arg_index_at i =
  if i == 0 then arg_0
  else if i == 1 then arg_1
  else if i == 2 then arg_2
  else if i == 3 then arg_3
  else if i == 4 then arg_4
  else if i == 5 then arg_5
  else if i == 6 then arg_6
  else arg_7
in let b_0 = 0
in let b_1 = 0
in let b_2 = 0
in let b_3 = 0
in let b_index_at i =
  if i == 0 then b_0
    else if i == 1 then b_1
    else if i == 2 then b_2
    else b_3

in let rec loop b_0 b_1 b_2 b_3 n i = 
  if i == argc
  then 0
  else (
    let arg = arg_index_at i
    in 
      if arg == 98
      then
        if n < 4
        then
          let b_0_n = if i == 0 then 1 else b_0
          in let b_1_n = if i == 1 then 1 else b_1
          in let b_2_n = if i == 2 then 1 else b_2
          in let b_3_n = if i == 3 then 1 else b_3
          in loop b_0_n b_1_n b_2_n b_3_n (n+1) (i+1)
        else
          ## assert failure
          let target = 42 in target
      else 
        let ignored = input in
          loop b_0 b_1 b_2 b_3 n (i+1)
  )
in loop b_0 b_1 b_2 b_3 0 0