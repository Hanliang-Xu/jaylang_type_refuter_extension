let x = input in 
let y = input in
let z = input in
let debug_trace = false in
let id elm =
  let dum1 = debug_trace in elm
in
let rec my_map f l =
  let dum2 = debug_trace in
  let rec lp lst =
    match lst with
    | x :: xs -> 
      let next_mapped = lp xs in
      let elem = (id f) x in
      elem :: next_mapped
    | [] -> lst
    end
  in
  lp l
in

let none = [] in
let lst1 = [3, 4, 5] in
let lst2 = [x, y, z] in
#let lst2 = [7, 8, 9] in

let ans1 = my_map (id (fun a -> a + 1)) lst1 in
let ans2 = my_map (id (fun b -> b + 1)) lst2 in

let hd l = 
  match l with
  | x :: xs -> x
  | [] -> (0 0)
  end
in
let tl l = 
  match l with
  | x :: xs -> xs
  | [] -> (0 0)
  end
in


if hd ans2 == 8 
    and hd (tl ans2) == 9
    and hd (tl (tl ans2)) == 10
then
  let target = 1 in 1
else
  0