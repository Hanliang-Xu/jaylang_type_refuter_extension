# Std.List - start

let hd l = 
  match l with
  | x :: xs -> x
  | [] -> (0 0)
  end
in
let tl l = 
  match l with
  | x :: xs -> xs
  | [] -> (0 0)
  end
in

# Std.List - end

let x0 = input in
let x1 = input in
let x2 = input in

let none = [] in

let a = [1, 2] in

let b = [3, 4, 5] in

# through the original is [a, [b]]

let d = [a, b] in

let rec append l1 l2 =
  match l1 with
  | x :: xs -> 
    let next2 = append xs l2 in
    x :: next2
  | [] -> l2
  end
in

# flatten: 'a list list -> 'a list
let rec flatten r = 
  match r with
  | x :: xs -> 
    # let rfed = flatten xs in
    # append x []
    x
  | [] -> []
  end in

let result = flatten d in
# if result.elem == x0
#    and result.next.elem == x1
#    and result.next.next.next.elem == x2
#    and x0 == 1
#    and x1 == 2
#    and x2 == 4
if hd result == x0

then
  let target = 1 in 1
else
  0
