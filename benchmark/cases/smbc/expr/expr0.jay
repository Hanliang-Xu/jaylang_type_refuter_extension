let rec fetch lst n = 
  match lst with
  | x :: xs -> if n == 0 then x else fetch xs (n-1)
  | [] -> 0
  end
in

let rec eval env e =
  match e with
  | `N n -> n
  | `V n -> fetch env n
  | `Plus e -> 
    let e1 = e.e1 in
    let e2 = e.e2 in
    (eval env e1) + (eval env e2)
  | `Minus e -> 
    let e1 = e.e1 in
    let e2 = e.e2 in
    (eval env e1) - (eval env e2)
  | `Mult e -> 
    let e1 = e.e1 in
    let e2 = e.e2 in
    (eval env e1) * (eval env e2)
  | `Eq e ->
    let e1 = e.e1 in
    let e2 = e.e2 in
    let v1 = eval env e1 in
    let v2 = eval env e2 in
    if v1 == v2 then 1 else 0
  end
in

let equal n1 n2 = n1 == n2 in

let rec eq_e e1 e2 = 
  match e1 with
  | `N n1 ->
    match e2 with
    | `N n2 -> equal n1 n2
    | _ -> false
    end

  | `V n1 ->
    match e2 with
    | `V n2 -> equal n1 n2
    | _ -> false
    end

  | `Plus e3 ->
    match e2 with
    | `Plus e4 -> (eq_e e3.e1 e4.e1) and (eq_e e3.e2 e4.e2)
    | _ -> false
    end
  
  | `Minus e3 ->
    match e2 with
    | `Minus e4 -> (eq_e e3.e1 e4.e1) and (eq_e e3.e2 e4.e2)
    | _ -> false
    end

  | `Mult e3 ->
    match e2 with
    | `Mult e4 -> (eq_e e3.e1 e4.e1) and (eq_e e3.e2 e4.e2)
    | _ -> false
    end

  | `Eq e3 ->
    match e2 with
    | `Eq e4 -> (eq_e e3.e1 e4.e1) and (eq_e e3.e2 e4.e2)
    | _ -> false
    end

  end
in

let step1 e = 
  match e with
  | `Plus pe ->
    let y = pe.e1 in
    let b = pe.e2 in
    let z = 
      let x2 = 
        if eq_e y b then 1 else 1
      in
      x2
    in
      match y with
      | `N x6 -> 
        if x6 == 0 then b else z
      | _ -> 0
      end
  | _ -> e
  end
in

let rec simp1 e =
  match e with
  | `Plus e -> 
    let e3 = simp1 e.e1 in
    let e4 = simp1 e.e2 in
    step1 (`Plus {e1 = e3, e2 = e4})
  | _ -> step1 e
  end
in

let x = input in
let y = input in
let l0 = [0, 1, 2, 3, 4] in
let n3 = `N 3 in
let n4 = `N 4 in
let n5 = `N 5 in
let e3 = `Minus {e1 = n5, e2 = n4} in
let n6 = `N 6 in
let v2 = `V 2 in
let e4 = `Mult {e1 = e3, e2 = v2} in
# let b5 = `Eq {e1 = n4, e2 = n5} in
let e5 = `Plus {e1 = e4, e2 = n3} in
#let e5 = `Plus {e1 = e4, e2 = b5} in

let rec gen_e d =
  let seed = input in
  let v = input in
  if seed == 0 then
    `N v
  else 
    let e3 = gen_e 0 in
    let e4 = gen_e 0 in
    `Plus {e1 = e3, e2 = e4}
in
let r1 = gen_e 0 in

if eval [] r1 == 3
  # eq_e e5 e5
  # (fetch l0 1) == x 
  # and (eval l0 e3) == y 
then
  let target = 1 in 1
else
  42