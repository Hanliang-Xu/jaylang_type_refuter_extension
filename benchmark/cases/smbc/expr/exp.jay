let rec fetch lst n = 
  match lst with
  | x :: xs -> if n == 0 then x else fetch xs (n-1)
  | [] -> 0
  end
in

let rec eval env e =
  match e with
  | `N n -> n
  | `V n -> fetch env n
  | `Plus e -> 
    let e1 = e.e1 in
    let e2 = e.e2 in
    (eval env e1) + (eval env e2)
  | `Minus e -> 
    let e1 = e.e1 in
    let e2 = e.e2 in
    (eval env e1) - (eval env e2)
  | `Mult e -> 
    let e1 = e.e1 in
    let e2 = e.e2 in
    (eval env e1) * (eval env e2)
  | `Eq e ->
    let e1 = e.e1 in
    let e2 = e.e2 in
    let v1 = eval env e1 in
    let v2 = eval env e2 in
    if v1 == v2 then 1 else 0
  end
in

let rec gen_e _d =
  let seed = input in
  if seed == 0 then
    let v = input in
    `N v
  else 
    let e3 = gen_e 0 in
    let e4 = gen_e 0 in
    `Plus {e1 = e3, e2 = e4}
in
let r1 = gen_e 0 in

if eval [] r1 == 3 then
  let target = 1 in 1
else
  42