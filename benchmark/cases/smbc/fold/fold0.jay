# EXPECT-WELL-FORMED
# EXPECT-INPUT-SEQUENCES-REACH target [0, 1, 0, 0, 0] [1, 1, 1, 0, 0] [0, 1, 0, 0, 1] [1, 1, 1, 0, 1] ! 

let v1 = input == 0 in
let v2 = input == 0 in
let v3 = input == 0 in
let v4 = input == 0 in

let f op1 op2 =
  if op1 then
    if op2 then v1 else v2
  else
    if op2 then v3 else v4
  in

let rec fold acc lst = 
  match lst with
  | x :: xs -> fold (f acc x) xs
  | [] ->      acc
  end
in

let none = [] in
let l0 = [false, false, true, false] in
let l1 = [false, true, false, false] in
let l2 = [false, false, false, false, true, false] in
let l3 = [false, false, false, true, false, false] in

let acc_init = input == 0 in

let r0 = fold acc_init l0 in
let r1 = fold acc_init l1 in
let r2 = fold acc_init l2 in
let r3 = fold acc_init l3 in

if (r0 and (not r1)) or (r1 and (not r0)) 
    and (r2 and (not r3)) or (r3 and (not r2)) 
then
  let target = 1 in 1
else
  0