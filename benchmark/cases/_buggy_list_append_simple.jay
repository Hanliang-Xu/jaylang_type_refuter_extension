# Std.List - start

let rec append l1 l2 =
  match l1 with
  | x :: xs -> x :: (append xs l2)
  | [] -> l2
  end
in

let rec rev lst =
  match lst with
  | x :: xs -> append (rev xs) [x]
  | [] -> []
  end
in

let hd l = 
  match l with
  | x :: xs -> x
  | [] -> (0 0)
  end
in

let tl l = 
  match l with
  | x :: xs -> xs
  | [] -> (0 0)
  end
in

# Std.List - end

let x1 = input in
let x2 = input in
let x3 = input in

let s0 = [101] in
let s1 = [102] in
let s01 = append s0 s1 in
let t = s01 in

if hd t == x1
  # and hd (tl t) == x2
then
  let target = 1 in 1
else
  0