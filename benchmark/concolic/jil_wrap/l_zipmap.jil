i_first = {};
flatten_fun_j_59 = fun zip_j_1 -> (
    flatten_fun_j_58 = fun x -> (
        flatten_fun_j_57 = fun y -> (
            var_j_19 = zip_j_1;
            var_j_20 = zip_j_1;
            appl_j_21 = var_j_19 var_j_20;
            zip = appl_j_21;
            var_j_22 = x;
            int_j_23 = 0;
            m_bl_i_290 = var_j_22 ~ int;
            m_br_i_291 = int_j_23 ~ int;
            m_b_i_292 = m_bl_i_290 and m_br_i_291;
            binop_j_24 = m_b_i_292 ? (
                    c_binop_i_293 = var_j_22 == int_j_23
                ) : (
                    ab_i_294 = abort
                );
            var_j_25 = y;
            int_j_26 = 0;
            m_bl_i_295 = var_j_25 ~ int;
            m_br_i_296 = int_j_26 ~ int;
            m_b_i_297 = m_bl_i_295 and m_br_i_296;
            binop_j_27 = m_b_i_297 ? (
                    c_binop_i_298 = var_j_25 == int_j_26
                ) : (
                    ab_i_299 = abort
                );
            m_bl_i_300 = binop_j_24 ~ bool;
            m_br_i_301 = binop_j_27 ~ bool;
            m_b_i_302 = m_bl_i_300 and m_br_i_301;
            binop_j_28 = m_b_i_302 ? (
                    c_binop_i_303 = binop_j_24 and binop_j_27
                ) : (
                    ab_i_304 = abort
                );
            m_i_305 = binop_j_28 ~ bool;
            if_j_56 = m_i_305 ? (
                    c_cond_i_354 = binop_j_28 ? (
                            var_j_29 = x
                        ) : (
                            var_j_30 = x;
                            int_j_31 = 0;
                            m_bl_i_306 = var_j_30 ~ int;
                            m_br_i_307 = int_j_31 ~ int;
                            m_b_i_308 = m_bl_i_306 and m_br_i_307;
                            binop_j_32 = m_b_i_308 ? (
                                    c_binop_i_309 = var_j_30 == int_j_31
                                ) : (
                                    ab_i_310 = abort
                                );
                            m_i_311 = binop_j_32 ~ bool;
                            notop_j_33 = m_i_311 ? (
                                    c_not_i_312 = not binop_j_32
                                ) : (
                                    ab_i_313 = abort
                                );
                            var_j_34 = y;
                            int_j_35 = 0;
                            m_bl_i_314 = var_j_34 ~ int;
                            m_br_i_315 = int_j_35 ~ int;
                            m_b_i_316 = m_bl_i_314 and m_br_i_315;
                            binop_j_36 = m_b_i_316 ? (
                                    c_binop_i_317 = var_j_34 == int_j_35
                                ) : (
                                    ab_i_318 = abort
                                );
                            m_i_319 = binop_j_36 ~ bool;
                            notop_j_37 = m_i_319 ? (
                                    c_not_i_320 = not binop_j_36
                                ) : (
                                    ab_i_321 = abort
                                );
                            m_bl_i_322 = notop_j_33 ~ bool;
                            m_br_i_323 = notop_j_37 ~ bool;
                            m_b_i_324 = m_bl_i_322 and m_br_i_323;
                            binop_j_38 = m_b_i_324 ? (
                                    c_binop_i_325 = notop_j_33 and notop_j_37
                                ) : (
                                    ab_i_326 = abort
                                );
                            m_i_327 = binop_j_38 ~ bool;
                            if_j_55 = m_i_327 ? (
                                    c_cond_i_352 = binop_j_38 ? (
                                            int_j_39 = 1;
                                            var_j_40 = zip;
                                            var_j_41 = x;
                                            int_j_42 = 1;
                                            m_bl_i_328 = var_j_41 ~ int;
                                            m_br_i_329 = int_j_42 ~ int;
                                            m_b_i_330 = m_bl_i_328 and m_br_i_329;
                                            binop_j_43 = m_b_i_330 ? (
                                                    c_binop_i_331 = var_j_41 - int_j_42
                                                ) : (
                                                    ab_i_332 = abort
                                                );
                                            m_i_333 = var_j_40 ~ fun;
                                            appl_j_44 = m_i_333 ? (
                                                    c_appl_i_334 = var_j_40 binop_j_43
                                                ) : (
                                                    ab_i_335 = abort
                                                );
                                            var_j_45 = y;
                                            int_j_46 = 1;
                                            m_bl_i_336 = var_j_45 ~ int;
                                            m_br_i_337 = int_j_46 ~ int;
                                            m_b_i_338 = m_bl_i_336 and m_br_i_337;
                                            binop_j_47 = m_b_i_338 ? (
                                                    c_binop_i_339 = var_j_45 - int_j_46
                                                ) : (
                                                    ab_i_340 = abort
                                                );
                                            m_i_341 = appl_j_44 ~ fun;
                                            appl_j_48 = m_i_341 ? (
                                                    c_appl_i_342 = appl_j_44 binop_j_47
                                                ) : (
                                                    ab_i_343 = abort
                                                );
                                            m_bl_i_344 = int_j_39 ~ int;
                                            m_br_i_345 = appl_j_48 ~ int;
                                            m_b_i_346 = m_bl_i_344 and m_br_i_345;
                                            binop_j_49 = m_b_i_346 ? (
                                                    c_binop_i_347 = int_j_39 + appl_j_48
                                                ) : (
                                                    ab_i_348 = abort
                                                )
                                        ) : (
                                            bool_j_50 = false;
                                            assert_pred_j_51 = bool_j_50;
                                            m_i_349 = assert_pred_j_51 ~ bool;
                                            assert_res_j_52 = m_i_349 ? (
                                                    c_cond_i_350 = assert_pred_j_51 ? (
                                                            assert_res_true_j_53 = 
                                                                {}
                                                        ) : (
                                                            ab_j_54 = abort
                                                        )
                                                ) : (
                                                    ab_i_351 = abort
                                                )
                                        )
                                ) : (
                                    ab_i_353 = abort
                                )
                        )
                ) : (
                    ab_i_355 = abort
                ))));
appl_j_62 = flatten_fun_j_59 flatten_fun_j_59;
flatten_fun_j_79 = fun map_j_0 -> (
    flatten_fun_j_78 = fun x_j_2 -> (
        var_j_63 = map_j_0;
        var_j_64 = map_j_0;
        appl_j_65 = var_j_63 var_j_64;
        map = appl_j_65;
        var_j_66 = x_j_2;
        int_j_67 = 0;
        m_bl_i_356 = var_j_66 ~ int;
        m_br_i_357 = int_j_67 ~ int;
        m_b_i_358 = m_bl_i_356 and m_br_i_357;
        binop_j_68 = m_b_i_358 ? (
                c_binop_i_359 = var_j_66 == int_j_67
            ) : (
                ab_i_360 = abort
            );
        m_i_361 = binop_j_68 ~ bool;
        if_j_77 = m_i_361 ? (
                c_cond_i_375 = binop_j_68 ? (
                        var_j_69 = x_j_2
                    ) : (
                        int_j_70 = 1;
                        var_j_71 = map;
                        var_j_72 = x_j_2;
                        int_j_73 = 1;
                        m_bl_i_362 = var_j_72 ~ int;
                        m_br_i_363 = int_j_73 ~ int;
                        m_b_i_364 = m_bl_i_362 and m_br_i_363;
                        binop_j_74 = m_b_i_364 ? (
                                c_binop_i_365 = var_j_72 - int_j_73
                            ) : (
                                ab_i_366 = abort
                            );
                        m_i_367 = var_j_71 ~ fun;
                        appl_j_75 = m_i_367 ? (
                                c_appl_i_368 = var_j_71 binop_j_74
                            ) : (
                                ab_i_369 = abort
                            );
                        m_bl_i_370 = int_j_70 ~ int;
                        m_br_i_371 = appl_j_75 ~ int;
                        m_b_i_372 = m_bl_i_370 and m_br_i_371;
                        binop_j_76 = m_b_i_372 ? (
                                c_binop_i_373 = int_j_70 + appl_j_75
                            ) : (
                                ab_i_374 = abort
                            )
                    )
            ) : (
                ab_i_376 = abort
            )));
appl_j_82 = flatten_fun_j_79 flatten_fun_j_79;
main_j_189 = fun n_j_14 -> (
    flatten_fun_j_186 = fun n_b_0 -> (
        bool_j_83 = false;
        fail_b_6 = bool_j_83;
        flatten_fun_j_92 = fun expr_b_5 -> (
            var_j_84 = expr_b_5;
            m_match_bool_j_86 = var_j_84 ~ any;
            m_match_bool_j_89 = var_j_84 ~ int;
            m_match_cond_j_90 = m_match_bool_j_89 ? (
                    bool_j_91 = true
                ) : (
                    m_match_cond_j_87 = m_match_bool_j_86 ? (
                            var_j_88 = fail_b_6
                        ) : (
                            void_j_85 = {}
                        )
                ));
        flatten_fun_j_94 = fun bj_null_j_7 -> (
            input_j_93 = input);
        flatten_fun_j_96 = fun expr_b_7 -> (
            var_j_95 = expr_b_7);
        record_j_97 = {checker = flatten_fun_j_92, generator = flatten_fun_j_94, wrapper = flatten_fun_j_96};
        proj_j_98 = record_j_97.checker;
        var_j_99 = n_b_0;
        appl_j_100 = proj_j_98 var_j_99;
        arg_check_b_1 = appl_j_100;
        var_j_101 = arg_check_b_1;
        if_j_185 = var_j_101 ? (
                flatten_fun_j_168 = fun n_j_13 -> (
                    flatten_fun_j_134 = fun expr_b_15 -> (
                        bool_j_102 = false;
                        fail_b_13 = bool_j_102;
                        flatten_fun_j_111 = fun expr_b_12 -> (
                            var_j_103 = expr_b_12;
                            m_match_bool_j_105 = var_j_103 ~ any;
                            m_match_bool_j_108 = var_j_103 ~ int;
                            m_match_cond_j_109 = m_match_bool_j_108 ? (
                                    bool_j_110 = true
                                ) : (
                                    m_match_cond_j_106 = m_match_bool_j_105 ? (
                                            var_j_107 = fail_b_13
                                        ) : (
                                            void_j_104 = {}
                                        )
                                ));
                        flatten_fun_j_113 = fun bj_null_j_8 -> (
                            input_j_112 = input);
                        flatten_fun_j_115 = fun expr_b_14 -> (
                            var_j_114 = expr_b_14);
                        record_j_116 = {checker = flatten_fun_j_111, generator = flatten_fun_j_113, wrapper = flatten_fun_j_115};
                        proj_j_117 = record_j_116.checker;
                        var_j_118 = expr_b_15;
                        appl_j_119 = proj_j_117 var_j_118;
                        t_check_b_16 = appl_j_119;
                        var_j_120 = t_check_b_16;
                        if_j_133 = var_j_120 ? (
                                bool_j_121 = false;
                                pred_check_b_17 = bool_j_121;
                                flatten_fun_j_126 = fun i_j_9 -> (
                                    var_j_122 = i_j_9;
                                    var_j_123 = n_j_13;
                                    m_bl_i_377 = var_j_122 ~ int;
                                    m_br_i_378 = var_j_123 ~ int;
                                    m_b_i_379 = m_bl_i_377 and m_br_i_378;
                                    binop_j_124 = m_b_i_379 ? (
                                            c_binop_i_380 = var_j_122 == var_j_123
                                        ) : (
                                            ab_i_381 = abort
                                        );
                                    m_i_382 = binop_j_124 ~ bool;
                                    notop_j_125 = m_i_382 ? (
                                            c_not_i_383 = not binop_j_124
                                        ) : (
                                            ab_i_384 = abort
                                        ));
                                var_j_127 = expr_b_15;
                                appl_j_128 = flatten_fun_j_126 var_j_127;
                                if_j_131 = appl_j_128 ? (
                                        bool_j_129 = true
                                    ) : (
                                        var_j_130 = pred_check_b_17
                                    )
                            ) : (
                                var_j_132 = t_check_b_16
                            ));
                    flatten_fun_j_164 = fun bj_null_j_12 -> (
                        bool_j_135 = false;
                        fail_b_9 = bool_j_135;
                        flatten_fun_j_144 = fun expr_b_8 -> (
                            var_j_136 = expr_b_8;
                            m_match_bool_j_138 = var_j_136 ~ any;
                            m_match_bool_j_141 = var_j_136 ~ int;
                            m_match_cond_j_142 = m_match_bool_j_141 ? (
                                    bool_j_143 = true
                                ) : (
                                    m_match_cond_j_139 = m_match_bool_j_138 ? (
                                            var_j_140 = fail_b_9
                                        ) : (
                                            void_j_137 = {}
                                        )
                                ));
                        flatten_fun_j_146 = fun bj_null_j_10 -> (
                            input_j_145 = input);
                        flatten_fun_j_148 = fun expr_b_10 -> (
                            var_j_147 = expr_b_10);
                        record_j_149 = {checker = flatten_fun_j_144, generator = flatten_fun_j_146, wrapper = flatten_fun_j_148};
                        proj_j_150 = record_j_149.generator;
                        int_j_151 = 0;
                        appl_j_152 = proj_j_150 int_j_151;
                        candidate_b_11 = appl_j_152;
                        flatten_fun_j_157 = fun i_j_11 -> (
                            var_j_153 = i_j_11;
                            var_j_154 = n_j_13;
                            m_bl_i_385 = var_j_153 ~ int;
                            m_br_i_386 = var_j_154 ~ int;
                            m_b_i_387 = m_bl_i_385 and m_br_i_386;
                            binop_j_155 = m_b_i_387 ? (
                                    c_binop_i_388 = var_j_153 == var_j_154
                                ) : (
                                    ab_i_389 = abort
                                );
                            m_i_390 = binop_j_155 ~ bool;
                            notop_j_156 = m_i_390 ? (
                                    c_not_i_391 = not binop_j_155
                                ) : (
                                    ab_i_392 = abort
                                ));
                        var_j_158 = candidate_b_11;
                        appl_j_159 = flatten_fun_j_157 var_j_158;
                        if_j_163 = appl_j_159 ? (
                                var_j_160 = candidate_b_11
                            ) : (
                                bool_j_161 = false;
                                assume_j_162 = assume bool_j_161
                            ));
                    flatten_fun_j_166 = fun expr_b_18 -> (
                        var_j_165 = expr_b_18);
                    record_j_167 = {checker = flatten_fun_j_134, generator = flatten_fun_j_164, wrapper = flatten_fun_j_166});
                var_j_169 = n_b_0;
                appl_j_170 = flatten_fun_j_168 var_j_169;
                proj_j_171 = appl_j_170.wrapper;
                var_j_172 = appl_j_82;
                var_j_173 = appl_j_62;
                var_j_174 = n_j_14;
                m_i_393 = var_j_173 ~ fun;
                appl_j_175 = m_i_393 ? (
                        c_appl_i_394 = var_j_173 var_j_174
                    ) : (
                        ab_i_395 = abort
                    );
                var_j_176 = n_j_14;
                m_i_396 = appl_j_175 ~ fun;
                appl_j_177 = m_i_396 ? (
                        c_appl_i_397 = appl_j_175 var_j_176
                    ) : (
                        ab_i_398 = abort
                    );
                m_i_399 = var_j_172 ~ fun;
                appl_j_178 = m_i_399 ? (
                        c_appl_i_400 = var_j_172 appl_j_177
                    ) : (
                        ab_i_401 = abort
                    );
                m_i_402 = proj_j_171 ~ fun;
                appl_j_179 = m_i_402 ? (
                        c_appl_i_403 = proj_j_171 appl_j_178
                    ) : (
                        ab_i_404 = abort
                    )
            ) : (
                bool_j_180 = false;
                assert_pred_j_181 = bool_j_180;
                assert_res_j_182 = assert_pred_j_181 ? (
                        assert_res_true_j_183 = {}
                    ) : (
                        ab_j_184 = abort
                    )
            ));
    var_j_187 = n_j_14;
    appl_j_188 = flatten_fun_j_186 var_j_187);
main = main_j_189;
bool_j_190 = false;
fail_b_3 = bool_j_190;
flatten_fun_j_199 = fun expr_b_2 -> (
    var_j_191 = expr_b_2;
    m_match_bool_j_193 = var_j_191 ~ any;
    m_match_bool_j_196 = var_j_191 ~ int;
    m_match_cond_j_197 = m_match_bool_j_196 ? (
            bool_j_198 = true
        ) : (
            m_match_cond_j_194 = m_match_bool_j_193 ? (
                    var_j_195 = fail_b_3
                ) : (
                    void_j_192 = {}
                )
        ));
flatten_fun_j_201 = fun bj_null -> (
    input_j_200 = input);
flatten_fun_j_203 = fun expr_b_4 -> (
    var_j_202 = expr_b_4);
record_j_204 = {checker = flatten_fun_j_199, generator = flatten_fun_j_201, wrapper = flatten_fun_j_203};
proj_j_205 = record_j_204.generator;
int_j_206 = 0;
appl_j_207 = proj_j_205 int_j_206;
n_b_30 = appl_j_207;
flatten_fun_j_275 = fun n -> (
    flatten_fun_j_240 = fun expr_b_26 -> (
        bool_j_208 = false;
        fail_b_24 = bool_j_208;
        flatten_fun_j_217 = fun expr_b_23 -> (
            var_j_209 = expr_b_23;
            m_match_bool_j_211 = var_j_209 ~ any;
            m_match_bool_j_214 = var_j_209 ~ int;
            m_match_cond_j_215 = m_match_bool_j_214 ? (
                    bool_j_216 = true
                ) : (
                    m_match_cond_j_212 = m_match_bool_j_211 ? (
                            var_j_213 = fail_b_24
                        ) : (
                            void_j_210 = {}
                        )
                ));
        flatten_fun_j_219 = fun bj_null_j_3 -> (
            input_j_218 = input);
        flatten_fun_j_221 = fun expr_b_25 -> (
            var_j_220 = expr_b_25);
        record_j_222 = {checker = flatten_fun_j_217, generator = flatten_fun_j_219, wrapper = flatten_fun_j_221};
        proj_j_223 = record_j_222.checker;
        var_j_224 = expr_b_26;
        appl_j_225 = proj_j_223 var_j_224;
        t_check_b_27 = appl_j_225;
        var_j_226 = t_check_b_27;
        if_j_239 = var_j_226 ? (
                bool_j_227 = false;
                pred_check_b_28 = bool_j_227;
                flatten_fun_j_232 = fun i -> (
                    var_j_228 = i;
                    var_j_229 = n;
                    m_bl_i_405 = var_j_228 ~ int;
                    m_br_i_406 = var_j_229 ~ int;
                    m_b_i_407 = m_bl_i_405 and m_br_i_406;
                    binop_j_230 = m_b_i_407 ? (
                            c_binop_i_408 = var_j_228 == var_j_229
                        ) : (
                            ab_i_409 = abort
                        );
                    m_i_410 = binop_j_230 ~ bool;
                    notop_j_231 = m_i_410 ? (
                            c_not_i_411 = not binop_j_230
                        ) : (
                            ab_i_412 = abort
                        ));
                var_j_233 = expr_b_26;
                appl_j_234 = flatten_fun_j_232 var_j_233;
                if_j_237 = appl_j_234 ? (
                        bool_j_235 = true
                    ) : (
                        var_j_236 = pred_check_b_28
                    )
            ) : (
                var_j_238 = t_check_b_27
            ));
    flatten_fun_j_270 = fun bj_null_j_6 -> (
        bool_j_241 = false;
        fail_b_20 = bool_j_241;
        flatten_fun_j_250 = fun expr_b_19 -> (
            var_j_242 = expr_b_19;
            m_match_bool_j_244 = var_j_242 ~ any;
            m_match_bool_j_247 = var_j_242 ~ int;
            m_match_cond_j_248 = m_match_bool_j_247 ? (
                    bool_j_249 = true
                ) : (
                    m_match_cond_j_245 = m_match_bool_j_244 ? (
                            var_j_246 = fail_b_20
                        ) : (
                            void_j_243 = {}
                        )
                ));
        flatten_fun_j_252 = fun bj_null_j_4 -> (
            input_j_251 = input);
        flatten_fun_j_254 = fun expr_b_21 -> (
            var_j_253 = expr_b_21);
        record_j_255 = {checker = flatten_fun_j_250, generator = flatten_fun_j_252, wrapper = flatten_fun_j_254};
        proj_j_256 = record_j_255.generator;
        int_j_257 = 0;
        appl_j_258 = proj_j_256 int_j_257;
        candidate_b_22 = appl_j_258;
        flatten_fun_j_263 = fun i_j_5 -> (
            var_j_259 = i_j_5;
            var_j_260 = n;
            m_bl_i_413 = var_j_259 ~ int;
            m_br_i_414 = var_j_260 ~ int;
            m_b_i_415 = m_bl_i_413 and m_br_i_414;
            binop_j_261 = m_b_i_415 ? (
                    c_binop_i_416 = var_j_259 == var_j_260
                ) : (
                    ab_i_417 = abort
                );
            m_i_418 = binop_j_261 ~ bool;
            notop_j_262 = m_i_418 ? (
                    c_not_i_419 = not binop_j_261
                ) : (
                    ab_i_420 = abort
                ));
        var_j_264 = candidate_b_22;
        appl_j_265 = flatten_fun_j_263 var_j_264;
        if_j_269 = appl_j_265 ? (
                var_j_266 = candidate_b_22
            ) : (
                bool_j_267 = false;
                assume_j_268 = assume bool_j_267
            ));
    flatten_fun_j_272 = fun expr_b_29 -> (
        var_j_271 = expr_b_29);
    record_j_273 = {checker = flatten_fun_j_240, generator = flatten_fun_j_270, wrapper = flatten_fun_j_272};
    proj_j_274 = record_j_273.checker);
appl_j_277 = flatten_fun_j_275 n_b_30;
appl_j_280 = main n_b_30;
appl_j_281 = appl_j_277 appl_j_280;
check_res_b_31 = appl_j_281;
if_j_289 = check_res_b_31 ? (
        var_j_283 = main
    ) : (
        error_var_j_284 = check_res_b_31;
        assert_pred_j_285 = error_var_j_284;
        assert_res_j_286 = assert_pred_j_285 ? (
                assert_res_true_j_287 = {}
            ) : (
                ab_j_288 = abort
            )
    );
i_result = if_j_289