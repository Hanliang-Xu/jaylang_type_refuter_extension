# This is well-typed. See ill-typed "buggy" programs
# We refine like the racket contract: output list is sorted and if input is nonempty, then so is output

let is_nonempty lst =
  match lst with
  | [] -> false
  | _ -> true
  end
in

let rec ne_sorted lst =
  match lst with
  | [] -> true
  | a :: tl ->
    match tl with
    | [] -> true
    | b :: tll -> a <= b and ne_sorted tl
    end
  end
in

let rec foldl f b l =
  match l with
  | [] -> b
  | x :: xs -> foldl f (f x b) xs
  end
in

let rec insert x l =
  match l with
  | [] -> [ x ]
  | h :: t ->
    if x <= h
    then x :: l
    else h :: (insert x t)
  end
in

let ret_type xs =
  {. List int | fun l ->
    ne_sorted l
    and
      if is_nonempty xs
      then is_nonempty l
      else not (is_nonempty l)
  }
in

letd sort (xs : List int) : ret_type xs =
  foldl insert [] xs
in

sort