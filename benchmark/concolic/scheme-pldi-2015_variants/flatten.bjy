
# flatten the input down to just a list of ints and bools
# see comment in flatten function for why it's ill-typed

let any_type = Mu tt. ( ``A 'a || ``L List tt ) in

let rec append a b =
  match a with
  | [] -> b
  | hd :: tl -> hd :: append tl b
  end
in

let rec flatten (x : any_type) : List 'a =
  match x with
  | `L ls ->
    match ls with
    | [] -> []
    | hd :: tl -> append (flatten hd) tl # should have `(flatten (`L tl))` not `tl` in the correct call 
    end
  | `A a -> [ a ]
  end
  in

flatten
