i_first = {};
isNeg_j_15 = fun n_j_11 -> (
    var_j_12 = n_j_11;
    int_j_13 = 0;
    m_bl_i_294 = var_j_12 ~ int;
    m_br_i_295 = int_j_13 ~ int;
    m_b_i_296 = m_bl_i_294 and m_br_i_295;
    binop_j_14 = m_b_i_296 ? (
            c_binop_i_297 = var_j_12 <= int_j_13
        ) : (
            ab_i_298 = abort
        ));
isNeg = isNeg_j_15;
isPos_j_19 = fun n -> (
    int_j_16 = 0;
    var_j_17 = n;
    m_bl_i_299 = int_j_16 ~ int;
    m_br_i_300 = var_j_17 ~ int;
    m_b_i_301 = m_bl_i_299 and m_br_i_300;
    binop_j_18 = m_b_i_301 ? (
            c_binop_i_302 = int_j_16 < var_j_17
        ) : (
            ab_i_303 = abort
        ));
isPos = isPos_j_19;
negation_j_161 = fun x -> (
    flatten_fun_j_158 = fun x_b_0 -> (
        int_j_20 = 0;
        input_j_21 = input;
        m_bl_i_304 = int_j_20 ~ int;
        m_br_i_305 = input_j_21 ~ int;
        m_b_i_306 = m_bl_i_304 and m_br_i_305;
        binop_j_22 = m_b_i_306 ? (
                c_binop_i_307 = int_j_20 < input_j_21
            ) : (
                ab_i_308 = abort
            );
        if_j_85 = binop_j_22 ? (
                flatten_fun_j_51 = fun expr_b_20 -> (
                    bool_j_23 = false;
                    fail_b_18 = bool_j_23;
                    flatten_fun_j_32 = fun expr_b_17 -> (
                        var_j_24 = expr_b_17;
                        m_match_bool_j_26 = var_j_24 ~ any;
                        m_match_bool_j_29 = var_j_24 ~ int;
                        m_match_cond_j_30 = m_match_bool_j_29 ? (
                                bool_j_31 = true
                            ) : (
                                m_match_cond_j_27 = m_match_bool_j_26 ? (
                                        var_j_28 = fail_b_18
                                    ) : (
                                        void_j_25 = {}
                                    )
                            ));
                    flatten_fun_j_34 = fun bj_null_j_5 -> (
                        input_j_33 = input);
                    flatten_fun_j_36 = fun expr_b_19 -> (
                        var_j_35 = expr_b_19);
                    record_j_37 = {checker = flatten_fun_j_32, generator = flatten_fun_j_34, wrapper = flatten_fun_j_36};
                    proj_j_38 = record_j_37.checker;
                    var_j_39 = expr_b_20;
                    appl_j_40 = proj_j_38 var_j_39;
                    t_check_b_21 = appl_j_40;
                    var_j_41 = t_check_b_21;
                    if_j_50 = var_j_41 ? (
                            bool_j_42 = false;
                            pred_check_b_22 = bool_j_42;
                            var_j_43 = isNeg;
                            var_j_44 = expr_b_20;
                            appl_j_45 = var_j_43 var_j_44;
                            if_j_48 = appl_j_45 ? (
                                    bool_j_46 = true
                                ) : (
                                    var_j_47 = pred_check_b_22
                                )
                        ) : (
                            var_j_49 = t_check_b_21
                        ));
                flatten_fun_j_77 = fun bj_null_j_7 -> (
                    bool_j_52 = false;
                    fail_b_14 = bool_j_52;
                    flatten_fun_j_61 = fun expr_b_13 -> (
                        var_j_53 = expr_b_13;
                        m_match_bool_j_55 = var_j_53 ~ any;
                        m_match_bool_j_58 = var_j_53 ~ int;
                        m_match_cond_j_59 = m_match_bool_j_58 ? (
                                bool_j_60 = true
                            ) : (
                                m_match_cond_j_56 = m_match_bool_j_55 ? (
                                        var_j_57 = fail_b_14
                                    ) : (
                                        void_j_54 = {}
                                    )
                            ));
                    flatten_fun_j_63 = fun bj_null_j_6 -> (
                        input_j_62 = input);
                    flatten_fun_j_65 = fun expr_b_15 -> (
                        var_j_64 = expr_b_15);
                    record_j_66 = {checker = flatten_fun_j_61, generator = flatten_fun_j_63, wrapper = flatten_fun_j_65};
                    proj_j_67 = record_j_66.generator;
                    int_j_68 = 0;
                    appl_j_69 = proj_j_67 int_j_68;
                    candidate_b_16 = appl_j_69;
                    var_j_70 = isNeg;
                    var_j_71 = candidate_b_16;
                    appl_j_72 = var_j_70 var_j_71;
                    if_j_76 = appl_j_72 ? (
                            var_j_73 = candidate_b_16
                        ) : (
                            bool_j_74 = false;
                            assume_j_75 = assume bool_j_74
                        ));
                flatten_fun_j_79 = fun expr_b_23 -> (
                    var_j_78 = expr_b_23);
                record_j_80 = {checker = flatten_fun_j_51, generator = flatten_fun_j_77, wrapper = flatten_fun_j_79};
                proj_j_81 = record_j_80.checker;
                var_j_82 = x_b_0;
                m_i_309 = proj_j_81 ~ fun;
                appl_j_83 = m_i_309 ? (
                        c_appl_i_310 = proj_j_81 var_j_82
                    ) : (
                        ab_i_311 = abort
                    )
            ) : (
                bool_j_84 = true
            );
        arg_check_b_1 = if_j_85;
        var_j_86 = arg_check_b_1;
        if_j_157 = var_j_86 ? (
                flatten_fun_j_115 = fun expr_b_31 -> (
                    bool_j_87 = false;
                    fail_b_29 = bool_j_87;
                    flatten_fun_j_96 = fun expr_b_28 -> (
                        var_j_88 = expr_b_28;
                        m_match_bool_j_90 = var_j_88 ~ any;
                        m_match_bool_j_93 = var_j_88 ~ int;
                        m_match_cond_j_94 = m_match_bool_j_93 ? (
                                bool_j_95 = true
                            ) : (
                                m_match_cond_j_91 = m_match_bool_j_90 ? (
                                        var_j_92 = fail_b_29
                                    ) : (
                                        void_j_89 = {}
                                    )
                            ));
                    flatten_fun_j_98 = fun bj_null_j_8 -> (
                        input_j_97 = input);
                    flatten_fun_j_100 = fun expr_b_30 -> (
                        var_j_99 = expr_b_30);
                    record_j_101 = {checker = flatten_fun_j_96, generator = flatten_fun_j_98, wrapper = flatten_fun_j_100};
                    proj_j_102 = record_j_101.checker;
                    var_j_103 = expr_b_31;
                    appl_j_104 = proj_j_102 var_j_103;
                    t_check_b_32 = appl_j_104;
                    var_j_105 = t_check_b_32;
                    if_j_114 = var_j_105 ? (
                            bool_j_106 = false;
                            pred_check_b_33 = bool_j_106;
                            var_j_107 = isPos;
                            var_j_108 = expr_b_31;
                            appl_j_109 = var_j_107 var_j_108;
                            if_j_112 = appl_j_109 ? (
                                    bool_j_110 = true
                                ) : (
                                    var_j_111 = pred_check_b_33
                                )
                        ) : (
                            var_j_113 = t_check_b_32
                        ));
                flatten_fun_j_141 = fun bj_null_j_10 -> (
                    bool_j_116 = false;
                    fail_b_25 = bool_j_116;
                    flatten_fun_j_125 = fun expr_b_24 -> (
                        var_j_117 = expr_b_24;
                        m_match_bool_j_119 = var_j_117 ~ any;
                        m_match_bool_j_122 = var_j_117 ~ int;
                        m_match_cond_j_123 = m_match_bool_j_122 ? (
                                bool_j_124 = true
                            ) : (
                                m_match_cond_j_120 = m_match_bool_j_119 ? (
                                        var_j_121 = fail_b_25
                                    ) : (
                                        void_j_118 = {}
                                    )
                            ));
                    flatten_fun_j_127 = fun bj_null_j_9 -> (
                        input_j_126 = input);
                    flatten_fun_j_129 = fun expr_b_26 -> (
                        var_j_128 = expr_b_26);
                    record_j_130 = {checker = flatten_fun_j_125, generator = flatten_fun_j_127, wrapper = flatten_fun_j_129};
                    proj_j_131 = record_j_130.generator;
                    int_j_132 = 0;
                    appl_j_133 = proj_j_131 int_j_132;
                    candidate_b_27 = appl_j_133;
                    var_j_134 = isPos;
                    var_j_135 = candidate_b_27;
                    appl_j_136 = var_j_134 var_j_135;
                    if_j_140 = appl_j_136 ? (
                            var_j_137 = candidate_b_27
                        ) : (
                            bool_j_138 = false;
                            assume_j_139 = assume bool_j_138
                        ));
                flatten_fun_j_143 = fun expr_b_34 -> (
                    var_j_142 = expr_b_34);
                record_j_144 = {checker = flatten_fun_j_115, generator = flatten_fun_j_141, wrapper = flatten_fun_j_143};
                proj_j_145 = record_j_144.wrapper;
                int_j_146 = 0;
                int_j_147 = 1;
                m_bl_i_312 = int_j_146 ~ int;
                m_br_i_313 = int_j_147 ~ int;
                m_b_i_314 = m_bl_i_312 and m_br_i_313;
                binop_j_148 = m_b_i_314 ? (
                        c_binop_i_315 = int_j_146 - int_j_147
                    ) : (
                        ab_i_316 = abort
                    );
                var_j_149 = x;
                m_bl_i_317 = binop_j_148 ~ int;
                m_br_i_318 = var_j_149 ~ int;
                m_b_i_319 = m_bl_i_317 and m_br_i_318;
                binop_j_150 = m_b_i_319 ? (
                        c_binop_i_320 = binop_j_148 * var_j_149
                    ) : (
                        ab_i_321 = abort
                    );
                m_i_322 = proj_j_145 ~ fun;
                appl_j_151 = m_i_322 ? (
                        c_appl_i_323 = proj_j_145 binop_j_150
                    ) : (
                        ab_i_324 = abort
                    )
            ) : (
                var_j_152 = arg_check_b_1;
                assert_pred_j_153 = var_j_152;
                assert_res_j_154 = assert_pred_j_153 ? (
                        assert_res_true_j_155 = {}
                    ) : (
                        ab_j_156 = abort
                    )
            ));
    var_j_159 = x;
    appl_j_160 = flatten_fun_j_158 var_j_159);
negation = negation_j_161;
flatten_fun_j_190 = fun expr_b_9 -> (
    bool_j_162 = false;
    fail_b_7 = bool_j_162;
    flatten_fun_j_171 = fun expr_b_6 -> (
        var_j_163 = expr_b_6;
        m_match_bool_j_165 = var_j_163 ~ any;
        m_match_bool_j_168 = var_j_163 ~ int;
        m_match_cond_j_169 = m_match_bool_j_168 ? (
                bool_j_170 = true
            ) : (
                m_match_cond_j_166 = m_match_bool_j_165 ? (
                        var_j_167 = fail_b_7
                    ) : (
                        void_j_164 = {}
                    )
            ));
    flatten_fun_j_173 = fun bj_null -> (
        input_j_172 = input);
    flatten_fun_j_175 = fun expr_b_8 -> (
        var_j_174 = expr_b_8);
    record_j_176 = {checker = flatten_fun_j_171, generator = flatten_fun_j_173, wrapper = flatten_fun_j_175};
    proj_j_177 = record_j_176.checker;
    var_j_178 = expr_b_9;
    appl_j_179 = proj_j_177 var_j_178;
    t_check_b_10 = appl_j_179;
    var_j_180 = t_check_b_10;
    if_j_189 = var_j_180 ? (
            bool_j_181 = false;
            pred_check_b_11 = bool_j_181;
            var_j_182 = isNeg;
            var_j_183 = expr_b_9;
            appl_j_184 = var_j_182 var_j_183;
            if_j_187 = appl_j_184 ? (
                    bool_j_185 = true
                ) : (
                    var_j_186 = pred_check_b_11
                )
        ) : (
            var_j_188 = t_check_b_10
        ));
flatten_fun_j_216 = fun bj_null_j_1 -> (
    bool_j_191 = false;
    fail_b_3 = bool_j_191;
    flatten_fun_j_200 = fun expr_b_2 -> (
        var_j_192 = expr_b_2;
        m_match_bool_j_194 = var_j_192 ~ any;
        m_match_bool_j_197 = var_j_192 ~ int;
        m_match_cond_j_198 = m_match_bool_j_197 ? (
                bool_j_199 = true
            ) : (
                m_match_cond_j_195 = m_match_bool_j_194 ? (
                        var_j_196 = fail_b_3
                    ) : (
                        void_j_193 = {}
                    )
            ));
    flatten_fun_j_202 = fun bj_null_j_0 -> (
        input_j_201 = input);
    flatten_fun_j_204 = fun expr_b_4 -> (
        var_j_203 = expr_b_4);
    record_j_205 = {checker = flatten_fun_j_200, generator = flatten_fun_j_202, wrapper = flatten_fun_j_204};
    proj_j_206 = record_j_205.generator;
    int_j_207 = 0;
    appl_j_208 = proj_j_206 int_j_207;
    candidate_b_5 = appl_j_208;
    var_j_209 = isNeg;
    var_j_210 = candidate_b_5;
    appl_j_211 = var_j_209 var_j_210;
    if_j_215 = appl_j_211 ? (
            var_j_212 = candidate_b_5
        ) : (
            bool_j_213 = false;
            assume_j_214 = assume bool_j_213
        ));
flatten_fun_j_218 = fun expr_b_12 -> (
    var_j_217 = expr_b_12);
record_j_219 = {checker = flatten_fun_j_190, generator = flatten_fun_j_216, wrapper = flatten_fun_j_218};
proj_j_220 = record_j_219.generator;
int_j_221 = 0;
appl_j_222 = proj_j_220 int_j_221;
x_b_46 = appl_j_222;
flatten_fun_j_251 = fun expr_b_42 -> (
    bool_j_223 = false;
    fail_b_40 = bool_j_223;
    flatten_fun_j_232 = fun expr_b_39 -> (
        var_j_224 = expr_b_39;
        m_match_bool_j_226 = var_j_224 ~ any;
        m_match_bool_j_229 = var_j_224 ~ int;
        m_match_cond_j_230 = m_match_bool_j_229 ? (
                bool_j_231 = true
            ) : (
                m_match_cond_j_227 = m_match_bool_j_226 ? (
                        var_j_228 = fail_b_40
                    ) : (
                        void_j_225 = {}
                    )
            ));
    flatten_fun_j_234 = fun bj_null_j_2 -> (
        input_j_233 = input);
    flatten_fun_j_236 = fun expr_b_41 -> (
        var_j_235 = expr_b_41);
    record_j_237 = {checker = flatten_fun_j_232, generator = flatten_fun_j_234, wrapper = flatten_fun_j_236};
    proj_j_238 = record_j_237.checker;
    var_j_239 = expr_b_42;
    appl_j_240 = proj_j_238 var_j_239;
    t_check_b_43 = appl_j_240;
    var_j_241 = t_check_b_43;
    if_j_250 = var_j_241 ? (
            bool_j_242 = false;
            pred_check_b_44 = bool_j_242;
            var_j_243 = isPos;
            var_j_244 = expr_b_42;
            appl_j_245 = var_j_243 var_j_244;
            if_j_248 = appl_j_245 ? (
                    bool_j_246 = true
                ) : (
                    var_j_247 = pred_check_b_44
                )
        ) : (
            var_j_249 = t_check_b_43
        ));
flatten_fun_j_277 = fun bj_null_j_4 -> (
    bool_j_252 = false;
    fail_b_36 = bool_j_252;
    flatten_fun_j_261 = fun expr_b_35 -> (
        var_j_253 = expr_b_35;
        m_match_bool_j_255 = var_j_253 ~ any;
        m_match_bool_j_258 = var_j_253 ~ int;
        m_match_cond_j_259 = m_match_bool_j_258 ? (
                bool_j_260 = true
            ) : (
                m_match_cond_j_256 = m_match_bool_j_255 ? (
                        var_j_257 = fail_b_36
                    ) : (
                        void_j_254 = {}
                    )
            ));
    flatten_fun_j_263 = fun bj_null_j_3 -> (
        input_j_262 = input);
    flatten_fun_j_265 = fun expr_b_37 -> (
        var_j_264 = expr_b_37);
    record_j_266 = {checker = flatten_fun_j_261, generator = flatten_fun_j_263, wrapper = flatten_fun_j_265};
    proj_j_267 = record_j_266.generator;
    int_j_268 = 0;
    appl_j_269 = proj_j_267 int_j_268;
    candidate_b_38 = appl_j_269;
    var_j_270 = isPos;
    var_j_271 = candidate_b_38;
    appl_j_272 = var_j_270 var_j_271;
    if_j_276 = appl_j_272 ? (
            var_j_273 = candidate_b_38
        ) : (
            bool_j_274 = false;
            assume_j_275 = assume bool_j_274
        ));
flatten_fun_j_279 = fun expr_b_45 -> (
    var_j_278 = expr_b_45);
record_j_280 = {checker = flatten_fun_j_251, generator = flatten_fun_j_277, wrapper = flatten_fun_j_279};
proj_j_281 = record_j_280.checker;
appl_j_284 = negation x_b_46;
appl_j_285 = proj_j_281 appl_j_284;
check_res_b_47 = appl_j_285;
if_j_293 = check_res_b_47 ? (
        var_j_287 = negation
    ) : (
        error_var_j_288 = check_res_b_47;
        assert_pred_j_289 = error_var_j_288;
        assert_res_j_290 = assert_pred_j_289 ? (
                assert_res_true_j_291 = {}
            ) : (
                ab_j_292 = abort
            )
    );
i_result = if_j_293