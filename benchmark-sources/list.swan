# LIST LIBRARY
#
# Reference: http://docs.racket-lang.org/reference/pairs.html
#
# Optimized for readability, not performance.

############################
# CONSTRUCTORS/DESTRUCTORS #
############################

let cons (consHead, consTail) = consHead :: consTail in

let consCurried consCurriedHead consCurriedTail = consCurriedHead :: consCurriedTail in

let head (headHead :: _) = headHead in

let tail (_ :: tailTail) = tailTail in

let range (rangeStart, rangeEnd) =
  if rangeStart == rangeEnd then
    []
  else
    rangeStart :: range ((rangeStart + 1), rangeEnd)
  end
in

#############
# ACCESSORS #
#############

let listRef ((listRefHead :: listRefTail), listRefN) =
  if listRefN == 0 then
    listRefHead
  else
    listRef (listRefTail, (listRefN - 1))
  end
in

let listTail ((_ :: listTailTail), listTailN) =
  if listTailN == 0 then
    listTailTail
  else
    listTail (listTailTail, (listTailN - 1))
  end
in

let last lastList =
  listRef (lastList, ((length lastList) - 1))
in

let index (indexValue, indexList) =
  match findf ((fun (_, indexElement) -> indexValue == indexElement), withIndex indexList) with
  | false -> false
  | (indexIndex, _) -> indexIndex
  end
in

let take (takeList, takePosition) =
  map ((fun takeIndex -> listRef (takeList, takeIndex)), range (0, (takePosition - 1)))
in

let drop = listTail in

let takef (takefList, takefFunction) =
  match takefList with
  | [] -> []
  | takefListHead :: takefListTail ->
    if takefFunction takefListHead then
      takefListHead :: takef (takefListTail, takefFunction)
    else
      []
    end
  end
in

let dropf (dropfList, dropfFunction) =
  match dropfList with
  | [] -> []
  | dropfListHead :: dropfListTail ->
    if dropfFunction dropfListHead then
      dropf (dropfListTail, dropfFunction)
    else
      dropfList
    end
  end
in

let takeRight (takeRightList, takeRightPosition) =
  reverse (take ((reverse takeRightList), takeRightPosition))
in

let dropRight (dropRightList, dropRightPosition) =
  reverse (drop ((reverse dropRightList), dropRightPosition))
in

let takefRight (takefRightList, takefRightFunction) =
  reverse (takef ((reverse takefRightList), takefRightFunction))
in

let dropfRight (dropfRightList, dropfRightFunction) =
  reverse (dropf ((reverse dropfRightList), dropfRightFunction))
in

let duplicates duplicatesList =
  removeDuplicates (
    map ((fun (_, duplicatesMapElement, _) -> duplicatesMapElement),
      filter ((let duplicatesInclude = include in
        fun (duplicatesElementBefore, duplicatesFilterElement, _) ->
          duplicatesInclude (duplicatesFilterElement, duplicatesElementBefore)
        ), contexts duplicatesList)))
in

let checkDuplicates checkDuplicatesList =
  match duplicates checkDuplicatesList with
  | [] -> false
  | checkDuplicatesHead :: _ -> checkDuplicatesHead
  end
in

let removeDuplicates removeDuplicatesList =
  map ((fun (_, removeDuplicatesMapElement, _) -> removeDuplicatesMapElement),
      filterNot ((let removeDuplicatesInclude = include in
        fun (removeDuplicatesElementBefore, removeDuplicatesFilterElement, _) ->
          removeDuplicatesInclude (removeDuplicatesFilterElement, removeDuplicatesElementBefore)
        ), contexts removeDuplicatesList))
in

let findf (findfFunction, findfList) =
  match memf (findfFunction, findfList) with
  | false -> false
  | findfFoundElement :: _ -> findfFoundElement
  end
in

let argmin (argminFunction, argminList) =
  head (decorateSortUndecorate (argminList, argminFunction, lessThan))
in

let argmax (argmaxFunction, argmaxList) =
  head (decorateSortUndecorate (argmaxList, argmaxFunction, greaterThan))
in

######################
# INSERTING/REMOVING #
######################

let append (appendList, appendElement) =
  appendList (appendList, [appendElement])
in

let insertAt (insertAtList, insertAtPosition, insertAtElement) =
  let (insertAtBefore, insertAtAfter) = splitAt (insertAtList, insertAtPosition) in
  listAppend ((append (insertAtBefore, insertAtElement)), insertAtAfter)
in

let addBetween (addBetweenList, addBetweenValue) =
  match addBetweenList with
  | [] -> addBetweenList
  | [_] -> addBetweenList
  | addBetweenListHead :: addBetweenListTail ->
    addBetweenListHead :: addBetweenValue :: addBetween (addBetweenListTail, addBetweenValue)
  end
in

let interspersions (interspersionsList, interspersionsElement) =
  map (
    (fun interspersionsIndex ->
      insertAt (interspersionsList, interspersionsIndex, interspersionsElement)),
    range (0, (length interspersionsList) + 1))
in

let remf (remfPredicate, remfList) =
  match splitf (remfList, remfPredicate) with
  | (remfListBefore, _ :: remfListAfter) ->
    listAppend (remfListBefore, remfListAfter)
  | _ -> remfList
  end
in

let remfStar (remfStarPredicate, remfStarList) =
  let remfStarListPartial = remf (remfStarPredicate, remfStarList) in
  if listEqual (remfStarList, remfStarListPartial) then
    remfStarList
  else
    remfStar (remfStarPredicate, remfStarListPartial)
  end
in

##############
# PREDICATES #
##############

let memf (memfFunction, memfList) =
  match memfList with
  | [] -> false
  | memfListHead :: memfListTail ->
    if memfFunction memfListHead then
      memfList
    else
      memf (memfFunction, memfListTail)
    end
  end
in

let member (memberValue, memberList) =
  memf (equalCurried memberValue, memberList)
in

let include (includeValue, includeList) =
  match member (includeValue, includeList) with
  | false -> false
  | _ :: _ -> true
  end
in

let listEqual (listEqualLeft, listEqualRight) =
  ((length listEqualLeft) == (length listEqualRight)) and
  listPrefix (listEqualLeft, listEqualRight)
in

let listPrefix (listPrefixPrefixCandidate, listPrefixList) =
  andMap equalFunction (zip (listPrefixPrefixCandidate, listPrefixList))
in

###########
# FOLDING #
###########

let foldl (foldlFunction, foldlInitialValue, foldlList) =
  match foldlList with
  | [] -> foldlInitialValue
  | foldlListHead :: foldlListTail ->
    foldl (foldlFunction, (foldlFunction (foldlListHead, foldlInitialValue)), foldlListTail)
  end
in

let foldr (foldrFunction, foldrInitialValue, foldrList) =
  foldl (foldrFunction, foldrInitialValue, (reverse foldrList))
in

let map (mapFunction, mapList) =
  foldl (let mapAppend = append in
         (fun (mapElement, mapAccumulator) -> mapAppend (mapAccumulator, mapFunction mapElement)),
         [], mapList)
in

let andMap (andMapFunction, andMapList) =
  foldl ((fun (andMapElement, andMapAccumulator) -> andMapAccumulator and (andMapFunction andMapElement)),
         true, andMapList)
in

let orMap (orMapFunction, orMapList) =
  foldl ((fun (orMapElement, orMapAccumulator) -> orMapAccumulator or (orMapFunction orMapElement)),
         false, orMapList)
in

let forEach (forEachFunction, forEachList) =
  foldl ((fun (forEachElement, _) -> forEachFunction forEachElement),
         {}, forEachList);
  {}
in

###############
# COMBINATING #
###############

let listAppend (listAppendListLeft, listAppendListRigth) =
  foldr (cons, listAppendListRigth, listAppendListLeft)
in

let zip (zipLeft, zipRight) =
  match (zipLeft, zipRight) with
  | (zipLeftHead :: zipLeftTail, zipRightHead :: zipRightTail) ->
    (zipLeftHead, zipRightHead) :: zip (zipLeftTail, zipRightTail)
  | _ -> []
  end
in

let withIndex withIndexList =
  zip (range (0, length withIndexList), withIndexList)
in

let cartesianProduct (cartesianProductLeft, cartesianProductRight) =
  foldl (listAppend, [],
    map ((
      let cartesianProductMap = map in
      fun cartesianProductLeftElement ->
        cartesianProductMap ((
          fun cartesianProductRightElement ->
            (cartesianProductLeftElement, cartesianProductRightElement)
        ), cartesianProductRight)),
      cartesianProductLeft))
in

################
# PARTITIONING #
################

let filter (filterPredicate, filterList) =
  foldl (let filterAppend = append in (
      fun (filterElement, filterAccumulatedElements) ->
        if filterPredicate filterElement then
          filterAppend (filterAccumulatedElements, filterElement)
        else
          filterAccumulatedElements
        end
    ), [], filterList)
in

let filterNot (filterNotPredicate, filterNotList) =
  filter ((fun filterNotElement -> not (filterNotPredicate filterNotElement)), filterNotList)
in

let remove (removeValue, removeList) =
  match removeList with
  | [] -> []
  | removeListHead :: removeListTail ->
    if removeListHead == removeValue then
      removeListTail
    else
      remove (removeValue, removeListTail)
    end
  end
in

let removeStar (removeStarValues, removeStarList) =
  filterNot ((fun removeStarElement -> include (removeStarElement, removeStarValues)), removeStarList)
in

let partition (partitionPredicate, partitionList) =
  (filter (partitionPredicate, partitionList), filterNot (partitionPredicate, partitionList))
in

let takeCommonPrefix (takeCommonPrefixLeft, takeCommonPrefixRight) =
  takef equalFunction (zip (takeCommonPrefixLeft, takeCommonPrefixRight))
in

let splitAt (splitAtList, splitAtPosition) =
  (take (splitAtList, splitAtPosition), drop (splitAtList, splitAtPosition))
in

let splitf (splitfList, splitfFunction) =
  (takef (splitfList, splitfFunction), dropf (splitfList, splitfFunction))
in

let splitAtRight (splitAtRightList, splitAtRightPosition) =
  reverse (map reverse (reverse splitAtRightList))
in

let context (contextList, contextValue) =
  contextf (contextList, equalCurried contextValue)
in

let contextAt (contextAtList, contextAtPosition) =
  let (contextAtListBefore, contextAtElement :: contextAtListAfter) =
    splitAt (contextAtList, contextAtPosition)
  in
  (contextAtListBefore, contextAtElement, contextAtListAfter)
in

let contexts contextsList =
  map ((fun contextsIndex -> contextAt (contextsList, contextsIndex)),
       range (0, length contextsList))
in

let contextf (contextfList, contextfFunction) =
  let (contextfListBefore, contextfElement :: contextfListAfter) =
    splitf (contextfList, contextfFunction)
  in
  (contextfListBefore, contextfElement, contextfListAfter)
in

##############
# REORDERING #
##############

let reverse reverseList = foldl (cons, [], reverseList) in

# QuickSort
let sort (sortList, sortLessThan) =
  match sortList with
  | [] -> []
  | sortPivot :: sortListRest ->
    let (sortLessThanPivot, sortMoreThanPivot) =
      partition ((fun sortElement -> sortLessThan (sortElement, sortPivot)), sortListRest)
    in
    foldl (listAppend, [],
      [sort (sortLessThanPivot, sortLessThan), [sortPivot], sort (sortMoreThanPivot, sortLessThan)])
  end
in

let decorateSortUndecorate (
  decorateSortUndecorateList, decorateSortUndecorateDecorator, decorateSortUndecorateComparator) =
  map (head,
    sort (zip (decorateSortUndecorateList, map (decorateSortUndecorateDecorator, decorateSortUndecorateList)),
          (fun ((_, decorateSortUndecorateDecoratedLeft), (_, decorateSortUndecorateDecoratedRight)) ->
             decorateSortUndecorateComparator (
               decorateSortUndecorateDecoratedLeft, decorateSortUndecorateDecoratedRight))))
in

#################
# COMBINATORICS #
#################

let combinations combinationsList =
  foldl (
    (let combinationsMap = map in
     let combinationsInterspersions = interspersions in
     let combinationsListAppend = listAppend in
     fun (combinationsElement, combinationsCombinations) ->
       foldl (combinationsListAppend, [],
         combinationsCombinations :: (
           combinationsMap (
             (let combinationsMapInterspersions = combinationsInterspersions in
              fun combinationsCombination ->
                combinationsMapInterspersions (combinationsCombination, combinationsElement)),
              combinationsCombinations))))
    [[]], combinationsList)
in

let permutations permutationsList =
  let permutationsListLength = length permutationsList in
  filter (
    (let permutationsLenght = length in
     fun permutationsCombination ->
       (permutationsLenght permutationsCombination) == permutationsListLength),
    combinations permutationsList)
in

##############
# STATISTICS #
##############

let length lengthList =
  foldl ((fun (_, lengthPartial) -> lengthPartial + 1), 0, lengthList)
in

let count (countPredicate, countList) =
  length (filter (countPredicate, countList))
in

#####################
# ASSOCIATION LISTS #
#####################

let assf (assfFunction, assfList) =
  findf ((fun (assfCandidateKey, _) -> assfFunction assfCandidateKey), assfList)
in

let assoc (assocValue, assocList) =
  assf (equalCurried assocValue, assocList)
in

let assocValues assocValuesList =
  map ((fun (_, assocValuesElement) -> assocValuesElement), assocValuesList)
in

let assocUpdate (assocUpdateList, assocUpdateKey, assocUpdateFunction) =
  let (assocUpdateBefore, assocUpdateElement, assocUpdateAfter) =
    context (assocUpdateList, assoc (assocUpdateKey, assocUpdateList))
  in
  listAppend (append (assocUpdateBefore, assocUpdateFunction assocUpdateElement), assocUpdateAfter)
in

let groupBy (groupByFunction, groupByList) =
  assocValues (
    foldl (
      (let groupByMultimapAdd = multimapAdd in
       fun (groupByElement, groupByGroupsMultimap) ->
         groupByMultimapAdd (groupByFunction groupByElement, groupByElement, groupByGroupsMultimap)),
      [], groupByList))
in

#############
# MULTIMAPS #
#############

let multimapAdd (multimapAddKey, multimapAddValue, multimapAddMultimap) =
  match assoc (multimapAddKey, multimapAddMultimap) with
  | false ->
    (multimapAddKey, [multimapAddValue]) :: multimapAddMultimap
  | _ ->
    assocUpdate (multimapAddMultimap, multimapAddKey, consCurried multimapAddValue)
  end
in

#######################
# OTHER MANIPULATIONS #
#######################

let flatten flattenList =
  match flattenList with
  | _ :: _ -> foldl (listAppend, [], (map (flatten, flattenList)))
  | [] -> []
  | _ -> [flattenList]
  end
in

###########
# HELPERS #
###########

let equalFunction (equalFunctionLeft, equalFunctionRight) = equalFunctionLeft == equalFunctionRight in

let equalCurried equalCurriedLeft equalCurriedRight =
  equalFunction (equalCurriedLeft, equalCurriedRight)
in

let lessThan (lessThanLeft, lessThanRight) = lessThanLeft < lessThanRight in

let greaterThan (greaterThanLeft, greaterThanRight) = greaterThanRight < greaterThanLeft in

######################################################################################################

0;;
