# EXPECT-WELL-FORMED
# EXPECT-EVALUATE
# EXPECT-ANALYSIS-STACK-IS 1ddpa
# EXPECT-ANALYSIS-LOOKUP-FROM-END r {int}
# EXPECT-ANALYSIS-NO-INCONSISTENCIES

# (letrec ((lp1 (lambda (i x)
#                 (if (= 0 i)
#                     x
#                     (letrec ((lp2 (lambda (j f y)
#                                     (if (= 0 j)
#                                         (lp1 (- i 1) y)
#                                         (lp2 (- j 1) f (f y))))))
#                       (lp2 10 (lambda (n) (+ n i)) x))))))
#   (lp1 10 0))

ycombinator = fun ycombinatorf -> (
  ycombinatorfx1 = fun ycombinatorx1 -> (
    ycombinatorfv1 = fun ycombinatorv1 -> (
      ycombinatorxx1 = ycombinatorx1 ycombinatorx1;
      ycombinatorfv1r = ycombinatorxx1 ycombinatorv1;
    );
    ycombinatorfx1r = ycombinatorf ycombinatorfv1;
  );

  ycombinatorfx2 = fun ycombinatorx2 -> (
    ycombinatorfv2 = fun ycombinatorv2 -> (
      ycombinatorxx2 = ycombinatorx2 ycombinatorx2;
      ycombinatorfv2r = ycombinatorxx2 ycombinatorv2;
    );
    ycombinatorfx2r = ycombinatorf ycombinatorfv2;
  );

  ycombinatorr = ycombinatorfx1 ycombinatorfx2;
);

zero = 0;
one = 1;
ten = 10;

lp1p = fun lp1r -> (
  lp1pr = fun lp1prparams -> (
    i = lp1prparams.i;
    x = lp1prparams.x;
    izero = zero == i;
    xr = izero ~ {}
         ? fun izerom -> (
           izeromr = x;
         )
         : fun izeroa -> (
           lp2p = fun lp2r -> (
             lp2pr = fun lp2prparams -> (
               j = lp2prparams.j;
               f = lp2prparams.f;
               y = lp2prparams.y;
               jzero = zero == j;
               yr = jzero ~ {}
                          ? fun yrm -> (
                            i1 = i - one;
                            lp1rparams = {i = i1, x = y};
                            yrmr = lp1r lp1rparams;
                          )
                          : fun yra -> (
                            j1 = j - one;
                            fy = f y;
                            lp2rparams = {j = j1, f = f, y = fy};
                            yrar = lp2r lp2rparams;
                          );
             );
           );
           lp2 = ycombinator lp2p;
           fn = fun n -> (
             ni = n + i;
           );
           lp2finalparams = {j = ten, f = fn, y = x};
           izeroar = lp2 lp2finalparams;
         );
  );
);

lp1 = ycombinator lp1p;

lp1params = {i = ten, x = zero};
r = lp1 lp1params; # => 550
