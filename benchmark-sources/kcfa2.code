# EXPECT-WELL-FORMED
# EXPECT-EVALUATE
# EXPECT-ANALYSIS-STACK-IS 1ddpa
# EXPECT-ANALYSIS-LOOKUP-FROM-END r {int}
# EXPECT-ANALYSIS-NO-INCONSISTENCIES

# ((lambda (f1)
#    (let ((a (f1 #t)))
#      (f1 #f)))
#  (lambda (x1) ((lambda (f2)
#                  (let ((b (f2 #t)))
#                    (let ((c (f2 #f)))
#                      (f2 #t))))
#                (lambda (x2) ((lambda (z) (z x1 x2)) (lambda (y1 y2) y1))))))

true = {};
false = 0;

ff1 = fun f1 -> (
  a = f1 true;
  ff1r = f1 false;
);

fx1 = fun x1 -> (
  ff2 = fun f2 -> (
    b = f2 true;
    c = f2 false;
    ff2r = f2 true;
  );

  fx2 = fun x2 -> (
    fz = fun z -> (
      zparams = {y1 = x1, y2 = x2};
      fzr = z zparams;
    );

    fy1 = fun fy1params -> (
      y1 = fy1params.y1;
      y2 = fy1params.y2;
      fy2r = y1;
    );

    fx2r = fz fy1;
  );

  fx1r = ff2 fx2;
);

r = ff1 fx1; # => 0
