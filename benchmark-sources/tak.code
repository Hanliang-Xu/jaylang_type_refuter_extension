# EXPECT-WELL-FORMED
# EXPECT-ANALYSIS-STACK-IS 1ddpa
# EXPECT-ANALYSIS-LOOKUP-FROM-END r {int}
# EXPECT-ANALYSIS-NO-INCONSISTENCIES

# (define (tak x y z)
#   (if (not (< y x))
#       z
#       (tak (tak (- x 1) y z)
#            (tak (- y 1) z x)
#            (tak (- z 1) x y))))
#
# (tak 32 15 8)

true = {};
false = 0;

one = 1;
thirtytwo = 32;
fifteen = 15;
eight = 8;

takp = fun takpr -> (
  takprr = fun takprparams -> (
  x = takprparams.x;
  y = takprparams.y;
  z = takprparams.z;
  yx = y < x;

  # notyx = not yx;
  notyx = yx ~ {}
             ? fun notm -> (
               notmr = false;
             )
             : fun nota -> (
               notar = true;
             );

  takr = takpr takpr;
  zr = notyx ~ {}
             ? fun notyxm -> (
               notyxmr = z;
             )
             : fun notyxa -> (
               x1 = x - one;
               takxparams = {x = x1, y = y, z = z};
               takx = takr takxparams;
               y1 = y - one;
               takyparams = {x = x, y = y1, z = z};
               taky = takr takyparams;
               z1 = z - one;
               takzparams = {x = x, y = y, z = z1};
               takz = takr takzparams;

               takrparams = {x = takx, y = taky, z = takz};
               notyxar = takr takrparams;
             );
  );
);

tak = takp takp;

takparams = {x = thirtytwo, y = fifteen, z = eight};
r = tak takparams; # => 15
