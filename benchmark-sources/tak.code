# EXPECT-WELL-FORMED
# EXPECT-EVALUATE
# EXPECT-ANALYSIS-STACK-IS 1ddpa
# EXPECT-ANALYSIS-LOOKUP-FROM-END r {int}
# EXPECT-ANALYSIS-NO-INCONSISTENCIES

# (define (tak x y z)
#   (if (not (< y x))
#       z
#       (tak (tak (- x 1) y z)
#            (tak (- y 1) z x)
#            (tak (- z 1) x y))))
#
# (tak 32 15 8)

ycombinator = fun ycombinatorf -> (
  ycombinatorfx1 = fun ycombinatorx1 -> (
    ycombinatorfv1 = fun ycombinatorv1 -> (
      ycombinatorxx1 = ycombinatorx1 ycombinatorx1;
      ycombinatorfv1r = ycombinatorxx1 ycombinatorv1;
    );
    ycombinatorfx1r = ycombinatorf ycombinatorfv1;
  );

  ycombinatorfx2 = fun ycombinatorx2 -> (
    ycombinatorfv2 = fun ycombinatorv2 -> (
      ycombinatorxx2 = ycombinatorx2 ycombinatorx2;
      ycombinatorfv2r = ycombinatorxx2 ycombinatorv2;
    );
    ycombinatorfx2r = ycombinatorf ycombinatorfv2;
  );

  ycombinatorr = ycombinatorfx1 ycombinatorfx2;
);

true = {};
false = 0;

not = fun notp -> (
  notr = notp ~ {}
              ? fun notm -> (
                notmr = false;
              )
              : fun nota -> (
                notar = true;
              );
);

one = 1;
thirtytwo = 32;
fifteen = 15;
eight = 8;

takp = fun takr -> (
  takpr = fun takprparams -> (
  x = takprparams.x;
  y = takprparams.y;
  z = takprparams.z;
  yx = y < x;
  notyx = not yx;
  zr = notyx ~ {}
             ? fun notyxm -> (
               notyxmr = z;
             )
             : fun notyxa -> (
               x1 = x - 1;
               takxparams = {x = x1, y = y, z = z};
               takx = takr takxparams;
               y1 = y - 1;
               takyparams = {x = x, y = y1, z = z};
               taky = takr takyparams;
               z1 = z - 1;
               takzparams = {x = x, y = y, z = z1};
               takz = takr takzparams;

               takrparams = {x = takx, y = taky, z = takz};
               notyxar = takr takrparams;
             );
  );
);

tak = ycombinator takp;

takparams = {x = thirtytwo, y = fifteen, z = eight};
r = tak takparams; # => 15
