# EXPECT-WELL-FORMED
# EXPECT-EVALUATE
# EXPECT-ANALYSIS-STACK-IS 1ddpa
# EXPECT-ANALYSIS-LOOKUP-FROM-END r {int}
# EXPECT-ANALYSIS-NO-INCONSISTENCIES

# (define (ack m n)
#   (cond ((= m 0) (+ n 1))
#         ((= n 0) (ack (- m 1) 1))
#         (else (ack (- m 1) (ack m (- n 1))))))
#
# (ack 3 12)

zero = 0;
one = 1;
three = 3;
twelve = 12;

ack = fun m -> (
  ackr = fun n -> (
     mzero = m = zero;
     ackrr = mzero ~ {}
             ? fun mzerom -> (
               mzeromr = n + one;
             )
             : fun mzeroa -> (
               nzero = n = zero;
               mzeroar = nzero ~ {}
                       ? fun nzerom -> (
                         m1 = m - one;
                         ackm1 = ack m1;
                         nzeromr = ackm1 one;
                       )
                       : fun mzeroa -> (
                         n1 = n - one;
                         ackm = ack m;
                         ackmn1 = ackm n1;
                         m12 = m - one;
                         ackm12 = ack m12;
                         mzeroar = ackm12 ackmn1;
                       );
             );
  );
);

rp = ack three;
r = rp twelve; # => 32765
