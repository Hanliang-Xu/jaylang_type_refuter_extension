##############
# DEPENDENTS #
##############

# mbrotZ.swan

####################
# mathematics.swan #
####################

# XXX: We don't have floating-point numbers, so this program uses integers.

let multiply (multiplyLeft, multiplyRight) =
  if multiplyRight < 0 then
    0 - multiply (multiplyLeft, 0 - multiplyRight)
  else if multiplyRight == 0 then
    0
  else if multiplyRight == 1 then
    multiplyLeft
  else
    multiplyLeft + multiply (multiplyLeft, multiplyRight - 1)
  end end end
in

let greaterThan (greaterThanLeft, greaterThanRight) =
  greaterThanRight < greaterThanLeft
in

let greaterThanOrEqual (greaterThanOrEqualLeft, greaterThanOrEqualRight) =
  (greaterThan (greaterThanOrEqualLeft, greaterThanOrEqualRight)) or
  (greaterThanOrEqualLeft == greaterThanOrEqualRight)
in

let toFloat toFloatNumber = toFloatNumber in

################
# LIBRARY CODE #
################

let complexNumber (complexNumberRealPart, complexNumberImaginaryPart) =
  (complexNumberRealPart, complexNumberImaginaryPart)
in

let realPart (realPartRealPart, _) = realPartRealPart in

let imaginaryPart (_, imaginaryPartImaginaryPart) = imaginaryPartImaginaryPart in

let complexNumberAddScalar (complexNumberAddScalarNumber, complexNumberAddScalarFactor) =
  complexNumber (realPart complexNumberAddScalarNumber + complexNumberAddScalarFactor,
                 imaginaryPart complexNumberAddScalarNumber + complexNumberAddScalarFactor)
in

let complexNumberMultiplyScalar (complexNumberMultiplyScalarNumber, complexNumberMultiplyScalarFactor) =
  complexNumber (multiply (realPart complexNumberMultiplyScalarNumber, complexNumberMultiplyScalarFactor),
                 multiply (imaginaryPart complexNumberMultiplyScalarNumber, complexNumberMultiplyScalarFactor))
in

let complexNumberAdd (complexNumberAddLeft, complexNumberAddRight) =
  complexNumber (realPart complexNumberAddLeft + realPart complexNumberAddRight,
                 imaginaryPart complexNumberAddLeft + imaginaryPart complexNumberAddRight)
in

let complexNumberMultiply (complexNumberMultiplyLeft, complexNumberMultiplyRight) =
  complexNumber (multiply (realPart complexNumberMultiplyLeft, realPart complexNumberMultiplyRight),
                 multiply (imaginaryPart complexNumberMultiplyLeft, imaginaryPart complexNumberMultiplyRight))
in

#########
# TESTS #
#########

let testComplexNumber = complexNumber (2, 3) in

let assertRealPart = realPart testComplexNumber == 2 in
let assertImaginaryPart = imaginaryPart testComplexNumber == 3 in

let testComplexNumberAdditionScalarResult = complexNumberAddScalar (testComplexNumber, 4) in

let assertAdditionScalarResultRealPart = realPart testComplexNumberAdditionScalarResult == 6 in
let assertAdditionScalarResultImaginaryPart = imaginaryPart testComplexNumberAdditionScalarResult == 7 in

let testComplexNumberMultiplicationScalarResult = complexNumberMultiplyScalar (testComplexNumber, 4) in

let assertMultiplicationScalarResultRealPart = realPart testComplexNumberMultiplicationScalarResult == 8 in
let assertMultiplicationScalarResultImaginaryPart = imaginaryPart testComplexNumberMultiplicationScalarResult == 12 in

let testComplexNumberOther = complexNumber (5, 6) in

let testComplexNumberAdditionResult = complexNumberAdd (testComplexNumber, testComplexNumberOther) in

let assertAdditionResultRealPart = realPart testComplexNumberAdditionResult == 7 in
let assertAdditionResultImaginaryPart = imaginaryPart testComplexNumberAdditionResult == 9 in

let testComplexNumberMultiplicationResult = complexNumberMultiply (testComplexNumber, testComplexNumberOther) in

let assertMultiplicationResultRealPart = realPart testComplexNumberMultiplicationResult == 10 in
let assertMultiplicationResultImaginaryPart = imaginaryPart testComplexNumberMultiplicationResult == 18 in

"FINISH";;
