# EXPECT-WELL-FORMED
# EXPECT-ANALYSIS-STACK-IS 1ddpa
# EXPECT-ANALYSIS-LOOKUP-FROM-END r {{}}
# EXPECT-ANALYSIS-NO-INCONSISTENCIES

# (define (phi x1 x2 x3 x4)
#   (and (or x1 (not x2) (not x3))
#        (or (not x2) (not x3))
#        (or x4 x2)))
#
# (define (try f)
#   (or (f #t) (f #f)))
#
# (define (sat-solve-4 p)
#   (try (lambda (n1)
#          (try (lambda (n2)
#                 (try (lambda (n3)
#                        (try (lambda (n4)
#                               (p n1 n2 n3 n4))))))))))
#
# (sat-solve-4 phi) ; => #t

true = {};
false = 0;

phi = fun phiparams -> (
  x1 = phiparams.x1;
  x2 = phiparams.x2;
  x3 = phiparams.x3;
  x4 = phiparams.x4;

  # notx2 = not x2;
  notx2 = x2 ~ {}
             ? fun notx2m -> (
               notx2mr = false;
             )
             : fun notx2a -> (
               notx2ar = true;
             );

  # notx3 = not x3;
  notx3 = x3 ~ {}
             ? fun notx3m -> (
               notx3mr = false;
             )
             : fun notx3a -> (
               notx3ar = true;
             );

  # or3x1notx2notx3params = {a = x1, b = notx2, c = notx3};
  # or3x1notx2notx3 = or3 or3x1notx2notx3params;
  or3x1notx2notx3 = x1 ~ {}
                       ? fun or3am -> (
                         or3amr = true;
                       )
                       : fun or3aa -> (
                         or3aar = notx2 ~ {}
                                     ? fun or3bm -> (
                                       or3bmr = true;
                                     )
                                     : fun or3ba -> (
                                       or3bar = notx3 ~ {}
                                                   ? fun or3cm -> (
                                                     or3cmr = true;
                                                   )
                                                   : fun or3ca -> (
                                                     or3car = false;
                                                   );
                                     );
                       );

  # notx22 = not x2;
  notx22 = x2 ~ {}
              ? fun notx22m -> (
                notx22mr = false;
              )
              : fun notx22a -> (
                notx22ar = true;
              );

  # notx32 = not x3;
  notx32 = x3 ~ {}
              ? fun notx32m -> (
                notx32mr = false;
              )
              : fun notx32a -> (
                notx32ar = true;
              );

  # or2notx2notx3params = {a = notx22, b = notx32};
  # or2notx2notx3 = or2 or2notx2notx3params;
  or2notx2notx3 = notx22 ~ {}
             ? fun or2notx2notx3am -> (
               or2notx2notx3amr = true;
             )
             : fun or2notx2notx3aa -> (
               or2notx2notx3aar = notx32 ~ {}
                           ? fun or2notx2notx3bm -> (
                             or2notx2notx3bmr = true;
                           )
                           : fun or2notx2notx3ba -> (
                             or2notx2notx3bar = false;
                           );
             );

  # or2x4x2params = {a = x4, b = x2};
  # or2x4x2 = or2 or2x4x2params;
  or2x4x2 = x4 ~ {}
             ? fun or2x4x2am -> (
               or2x4x2amr = true;
             )
             : fun or2x4x2aa -> (
               or2x4x2aar = x2 ~ {}
                           ? fun or2x4x2bm -> (
                             or2x4x2bmr = true;
                           )
                           : fun or2x4x2ba -> (
                             or2x4x2bar = false;
                           );
             );

  # and3or3x1notx2notx3or2notx2notx3or2x4x2params = {a = or3x1notx2notx3, b = or2notx2notx3, c = or2x4x2};
  # and3or3x1notx2notx3or2notx2notx3or2x4x2 = and3 and3or3x1notx2notx3or2notx2notx3or2x4x2params;
  and3or3x1notx2notx3or2notx2notx3or2x4x2 = or3x1notx2notx3 ~ {}
                                                            ? fun and3am -> (
                                                              and3aar = or2notx2notx3 ~ {}
                                                                                      ? fun and3bm -> (
                                                                                        and3bmr = or2x4x2 ~ {}
                                                                                                          ? fun and3cm -> (
                                                                                                            and3cmr = true;
                                                                                                          )
                                                                                                          : fun and3ca -> (
                                                                                                            and3car = false;
                                                                                                          );
                                                                                      )
                                                                                      : fun and3ba -> (
                                                                                        and3bar = false;
                                                                                      );
                                                            )
                                                            : fun and3aa -> (
                                                              and3aar = false;
                                                            );
);

try = fun f -> (
  ft = f true;
  ff = f false;

  # or2ftffparams = {a = ft, b = ff};
  # or2ftff = or2 or2ftffparams;
  or2ftff = ft ~ {}
             ? fun or2ftffam -> (
               or2ftffamr = true;
             )
             : fun or2ftffaa -> (
               or2ftffaar = ff ~ {}
                           ? fun or2ftffbm -> (
                             or2ftffbmr = true;
                           )
                           : fun or2ftffba -> (
                             or2ftffbar = false;
                           );
             );
);

satsolve4 = fun p -> (
  fn1 = fun n1 -> (
    fn2 = fun n2 -> (
      fn3 = fun n3 -> (
        fn4 = fun n4 -> (
          pparams = {x1 = n1, x2 = n2, x3 = n3, x4 = n4};
          fn4r = p pparams;
        );
        tryfn4 = try fn4;
      );
      tryfn3 = try fn3;
    );
    tryfn2 = try fn2;
  );
  tryfn1 = try fn1;
);

r = satsolve4 phi; # => {}
