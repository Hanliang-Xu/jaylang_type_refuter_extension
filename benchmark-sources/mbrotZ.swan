###############
# vector.swan #
###############

# XXX: This implementation assumes vectors store only integers. See inital value
# on `makeVector' and dummy result of `vectorRef'.

let makeVector makeVectorSize =
  if makeVectorSize == 0 then
    []
  else
    (ref 0) :: (makeVector (makeVectorSize - 1))
  end
in

# XXX: The analysis is not able to /prove/ that the index is always in bounds
# /and/ there is no exception mechanism in Swan, so the /hacky/ solution is to
# return a dummy value on that case.
let vectorRef (vectorRefList, vectorRefPosition) =
  match vectorRefList with
  | [] -> 0
  | vectorRefHead :: vectorRefTail ->
    if vectorRefPosition == 0 then
      !vectorRefHead
    else
      vectorRef (vectorRefTail, vectorRefPosition - 1)
    end
  end
in

# XXX: The analysis is not able to /prove/ that the index is always in bounds
# /and/ there is no exception mechanism in Swan, so the /hacky/ solution is to
# return a dummy value on that case.
let vectorSet (vectorSetList, vectorSetPosition, vectorSetValue) =
  match vectorSetList with
  | [] -> {}
  | vectorSetHead :: vectorSetTail ->
    if vectorSetPosition == 0 then
      vectorSetHead <- vectorSetValue
    else
      vectorSet (vectorSetTail, vectorSetPosition - 1, vectorSetValue)
    end
  end
in

########################
# complex-numbers.swan #
########################

let complexNumber (complexNumberRealPart, complexNumberImaginaryPart) =
  (complexNumberRealPart, complexNumberImaginaryPart)
in

let realPart (realPartRealPart, _) = realPartRealPart in

let imaginaryPart (_, imaginaryPartImaginaryPart) = imaginaryPartImaginaryPart in

####################
# mathematics.swan #
####################

# XXX: We don't have floating-point numbers, so this program uses integers.

let multiply (multiplyLeft, multiplyRight) =
  if multiplyRight < 0 then
    0 - multiply (multiplyLeft, 0 - multiplyRight)
  else if multiplyRight == 0 then
    0
  else if multiplyRight == 1 then
    multiplyLeft
  else
    multiplyLeft + multiply (multiplyLeft, multiplyRight - 1)
  end end end
in

let greaterThan (greaterThanLeft, greaterThanRight) =
  greaterThanRight < greaterThanLeft
in

let greaterThanOrEqual (greaterThanOrEqualLeft, greaterThanOrEqualRight) =
  (greaterThan (greaterThanOrEqualLeft, greaterThanOrEqualRight)) or
  (greaterThanOrEqualLeft == greaterThanOrEqualRight)
in

let toFloat toFloatNumber = toFloatNumber in

##########
# mbrotZ #
##########

let count (countZ0, countStep, countZ) =
  let countMaxCount = 64 in
  let countRadius = 4 in
  let countRadiusSquared = multiply (countRadius, countRadius) in
  let countZ02 = countZ0 + multiply (countZ, countStep) in
  let countLoop (countZ2, countC) =
    if countC == countMaxCount then
      countC
    else
      let countZr = realPart countZ2 in
      let countZi = imaginaryPart countZ2 in
      let countZrSquared = multiply (countZr, countZr) in
      let countZiSquared = multiply (countZi, countZi) in
      if greaterThan (countZrSquared + countZiSquared, countRadiusSquared) then
        countC
      else
        countLoop (multiply (countZ2, countZ2) + countZ02, countC + 1)
      end
    end
  in
  countLoop (countZ02, 0)
in

let mbrot (mbrotMatrix, mbrotZ0, mbrotStep, mbrotN) =
  let mbrotLoop1 mbrotLoop1Y =
    if greaterThanOrEqual (mbrotLoop1Y, 0) then
      let mbrotLoop12 = mbrotLoop1 in let mbrotLoop2 mbrotLoop2X =
        if greaterThanOrEqual (mbrotLoop2X, 0) then
          vectorSet (vectorRef (mbrotMatrix, mbrotLoop2X),
                     mbrotLoop1Y,
                     count (mbrotZ0, mbrotStep,
                            complexNumber (toFloat mbrotLoop2X, toFloat mbrotLoop1Y)));
          mbrotLoop2 (mbrotLoop2X - 1)
        else
          mbrotLoop12 (mbrotLoop1Y - 1)
        end
      in
      mbrotLoop2 (mbrotN - 1)
    else
      {}
    end
  in
  mbrotLoop1 (mbrotN - 1)
in

let test testN =
  let testMatrix = makeVector testN in
  let testLoop testLoopI =
    if greaterThanOrEqual (testLoopI, 0) then
      vectorSet (testMatrix, testLoopI, makeVector testN);
      testLoop (testLoopI - 1)
    else
      {}
    end
  in
  testLoop (testN - 1);
  mbrot (testMatrix, complexNumber (0 - 1, 0 - 5), 5, testN);
  vectorRef ((vectorRef (testMatrix, 0)), 0)
in

let main {} =
  # XXX: `read' is not available in Swan/Nested/Core. Hard-coded values.
  let mainCount = 2 in
  let mainInput1 = 2 in
  let mainOutput = 5 in
  # XXX: `numberToString' is not available in Swan/Nested/Core.
  # let mainS2 = numberToString mainCount in
  # let mainS1 = numberToString MainInput1 in
  let mainName = "mbrot" in
  let mainOkHuh mainOkHuhResult = mainOkHuhResult == mainOutput in
  let mainThunk {} = test mainInput1 in
  let mainLoop (mainLoopI, mainLoopResult) =
    if mainLoopI < mainCount then
      mainLoop (mainLoopI + 1, mainThunk {})
    else if mainOkHuh mainLoopResult then
      mainLoopResult
    else
      # XXX: `display', `write' and `newline' are not available in Swan/Nested/Core.
      # display "ERROR: returned incorrect result: ";
      # write mainLoopResult;
      # newline;
      mainLoopResult
    end end
  in
  mainLoop (0, 0 - 1) # TODO: Is `{}' a better initial value here? Notice how
                      # `mainLoopResult' is going to be a number. On the other hand,
                      # the original implementation uses `(void)', which translates
                      # to `{}' better.
in

main {};;
