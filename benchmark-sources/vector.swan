##############
# DEPENDENTS #
##############

# mbrotZ.swan

################
# LIBRARY CODE #
################

# XXX: This implementation assumes vectors store only integers. See inital value
# on `makeVector' and dummy result of `vectorRef'.

let makeVector makeVectorSize =
  if makeVectorSize == 0 then
    []
  else
    (ref 0) :: (makeVector (makeVectorSize - 1))
  end
in

# XXX: The analysis is not able to /prove/ that the index is always in bounds
# /and/ there is no exception mechanism in Swan, so the /hacky/ solution is to
# return a dummy value on that case.
let vectorRef (vectorRefList, vectorRefPosition) =
  match vectorRefList with
  | [] -> 0
  | vectorRefHead :: vectorRefTail ->
    if vectorRefPosition == 0 then
      !vectorRefHead
    else
      vectorRef (vectorRefTail, vectorRefPosition - 1)
    end
  end
in

# XXX: The analysis is not able to /prove/ that the index is always in bounds
# /and/ there is no exception mechanism in Swan, so the /hacky/ solution is to
# return a dummy value on that case.
let vectorSet (vectorSetList, vectorSetPosition, vectorSetValue) =
  match vectorSetList with
  | [] -> {}
  | vectorSetHead :: vectorSetTail ->
    if vectorSetPosition == 0 then
      vectorSetHead <- vectorSetValue
    else
      vectorSet (vectorSetTail, vectorSetPosition - 1, vectorSetValue)
    end
  end
in

#########
# TESTS #
#########

let testVector = makeVector 5 in

let assertTestVectorInitialValues0 = vectorRef (testVector, 0) == 0 in
let assertTestVectorInitialValues1 = vectorRef (testVector, 1) == 0 in
let assertTestVectorInitialValues2 = vectorRef (testVector, 2) == 0 in
let assertTestVectorInitialValues3 = vectorRef (testVector, 3) == 0 in
let assertTestVectorInitialValues4 = vectorRef (testVector, 4) == 0 in

vectorSet (testVector, 0, 10);
vectorSet (testVector, 1, 11);
vectorSet (testVector, 2, 12);
vectorSet (testVector, 3, 13);
vectorSet (testVector, 4, 14);

let assertTestVectorModifiedValues0 = vectorRef (testVector, 0) == 10 in
let assertTestVectorModifiedValues1 = vectorRef (testVector, 1) == 11 in
let assertTestVectorModifiedValues2 = vectorRef (testVector, 2) == 12 in
let assertTestVectorModifiedValues3 = vectorRef (testVector, 3) == 13 in
let assertTestVectorModifiedValues4 = vectorRef (testVector, 4) == 14 in

"FINISH";;
