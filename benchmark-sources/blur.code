# EXPECT-WELL-FORMED
# EXPECT-ANALYSIS-STACK-IS 1ddpa
# EXPECT-ANALYSIS-LOOKUP-FROM-END re {{}, int}
# EXPECT-ANALYSIS-NO-INCONSISTENCIES

# Reference: https://bitbucket.org/ucombinator/p4f-prototype/src/8f1c1c20ed02945d2855e25abef3b445d80a77eb/benchmarks/gcfa2/blur.scm?at=master&fileviewer=file-view-default
#
# (letrec ((id (lambda (x) x))
#
#          (blur (lambda (y) y))
#
#          (lp (lambda (a n)
#                (if (<= n 1)
#                    (id a)
#                    (let* ((r ((blur id) #t))
#                           (s ((blur id) #f)))
#                      (not ((blur lp) s (- n 1))))))))
#   (lp #f 2)) ; => #t

true = {};
false = 0;

one = 1;
two = 2;

id = fun x -> (
  idr = x;
);

blur = fun y -> (
  blurr = y;
);

lpp = fun lppr -> (
  lpprr = fun lpprparams -> (
    a = lpprparams.a;
    n = lpprparams.n;
    nl = n <= one;
    nr = nl ~ {}
            ? fun nlm -> (
              nlmr = id a;
            )
            : fun nla -> (
              rf = blur id;
              r = rf true;
              sf = blur id;
              s = sf false;
              lpr = lppr lppr;
              blurlp = blur lpr;
              n1 = n - one;
              blurlpsn1params = {a = s, n = n1};
              blurlpsn1 = blurlp blurlpsn1params;
              # nlar = not blurlpsn1;
              nlar = blurlpsn1 ~ {}
                               ? fun notm -> (
                                 notmr = false;
                               )
                               : fun nota -> (
                                 notar = true;
                               );
            );
  );
);

lp = lpp lpp;

lpparams = {a = false, n = two};
re = lp lpparams; # => {}
