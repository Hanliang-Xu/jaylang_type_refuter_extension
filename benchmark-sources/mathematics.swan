##############
# DEPENDENTS #
##############

# mbrotZ.swan
# complex-numbers.swan

################
# LIBRARY CODE #
################

# XXX: We don't have floating-point numbers, so this program uses integers.

let multiply (multiplyLeft, multiplyRight) =
  if multiplyRight < 0 then
    0 - multiply (multiplyLeft, 0 - multiplyRight)
  else if multiplyRight == 0 then
    0
  else if multiplyRight == 1 then
    multiplyLeft
  else
    multiplyLeft + multiply (multiplyLeft, multiplyRight - 1)
  end end end
in

let greaterThan (greaterThanLeft, greaterThanRight) =
  greaterThanRight < greaterThanLeft
in

let greaterThanOrEqual (greaterThanOrEqualLeft, greaterThanOrEqualRight) =
  (greaterThan (greaterThanOrEqualLeft, greaterThanOrEqualRight)) or
  (greaterThanOrEqualLeft == greaterThanOrEqualRight)
in

let toFloat toFloatNumber = toFloatNumber in

#########
# TESTS #
#########

let assertMultiplicationBy0OnTheLeft = multiply (0, 2) == 0 in
let assertMultiplicationBy0OnTheRight = multiply (2, 0) == 0 in
let assertMultiplicationSimple = multiply (2, 3) == 6 in
let assertMultiplicationWithNegativeNumberOnTheLeft = multiply (0 - 2, 3) == 0 - 6 in
let assertMultiplicationWithNegativeNumberOnTheRight = multiply (2, 0 - 3) == 0 - 6 in

let assertGreaterThanTrue = greaterThan (3, 2) in
let assertGreaterThanFalse = not (greaterThan (2, 3)) in

let assertGreaterThanOrEqualTrue = greaterThanOrEqual (3, 2) in
let assertGreaterThanOrEqualFalse = not (greaterThanOrEqual (2, 3)) in
let assertGreaterThanOrEqualEqual = greaterThanOrEqual (2, 2) in

let assertToFloat = toFloat 2 == 2 in

"FINISH";;
