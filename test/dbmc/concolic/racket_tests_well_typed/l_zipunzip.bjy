# well-typed version should require that x and y are equal in `zip`

let f (g : int -> int -> int) : int -> int -> int =
  fun x y -> g (x + 1) (y + 1)
in

let rec unzip (x : int) (k : int -> int -> int) : int =
  if x == 0 then k 0 0
  else unzip (x - 1) (f k)
in

letd rec zip (x : int) : {. int | fun y -> y == x } -> int =
  fun y ->
    if x == 0 then
      if y == 0 then 0 else assert false
    else
      if y == 0 then assert false
      else 1 + zip (x - 1) (y - 1)
in

let main (n : int) : int =
  unzip n zip
in

main