
# y combinator
let rec ycomb f =
  fun y ->
    (fun x -> f (fun z -> (x x) z))
    (fun x -> f (fun z -> (x x) z))
    y
in

let is_nonempty ls =
  match ls with
  | [] -> false
  | _ -> true
  end
in

let last (l : {. List 'a | is_nonempty }) : 'a =
  ycomb (
    fun self x ->
      match x with
      | [] -> assert false
      | x :: xs -> 
        match xs with
        | [] -> x
        | _ -> self xs
        end
      end
  ) l
in

last