i_first = {};
list_test_j_186 = fun lst -> (
    flatten_fun_j_183 = fun lst_b_0 -> (
        int_j_27 = 0;
        input_j_28 = input;
        m_bl_i_326 = int_j_27 ~ int;
        m_br_i_327 = input_j_28 ~ int;
        m_b_i_328 = m_bl_i_326 and m_br_i_327;
        binop_j_29 = m_b_i_328 ? (
                c_binop_i_329 = int_j_27 < input_j_28
            ) : (
                ab_i_330 = abort
            );
        if_j_142 = binop_j_29 ? (
                flatten_fun_j_83 = fun expr_b_29 -> (
                    bool_j_30 = false;
                    lst_fail_b_30 = bool_j_30;
                    var_j_31 = expr_b_29;
                    m_match_bool_j_33 = var_j_31 ~ any;
                    m_match_bool_j_36 = var_j_31 ~ {j_head, j_tail, _};
                    m_match_bool_j_80 = var_j_31 ~ {j_empty, _};
                    m_match_cond_j_81 = m_match_bool_j_80 ? (
                            bool_j_82 = true
                        ) : (
                            m_match_cond_j_37 = m_match_bool_j_36 ? (
                                    bj_underscore_j_18 = var_j_31.j_head;
                                    bj_underscore2_j_17 = var_j_31.j_tail;
                                    flatten_fun_j_73 = fun test_fun_b_26_j_2 -> (
                                        flatten_fun_j_72 = fun test_list_b_27 -> (
                                            var_j_38 = test_fun_b_26_j_2;
                                            var_j_39 = test_fun_b_26_j_2;
                                            appl_j_40 = var_j_38 var_j_39;
                                            test_fun_b_26 = appl_j_40;
                                            var_j_41 = test_list_b_27;
                                            m_match_bool_j_43 = var_j_41 ~ 
                                                {j_head, j_tail, _};
                                            m_match_bool_j_69 = var_j_41 ~ 
                                                {j_empty, _};
                                            m_match_cond_j_70 = m_match_bool_j_69 ? (
                                                    bool_j_71 = true
                                                ) : (
                                                    m_match_cond_j_44 = m_match_bool_j_43 ? (
                                                            hd_j_14 = var_j_41.j_head;
                                                            tl_j_13 = var_j_41.j_tail;
                                                            bool_j_45 = false;
                                                            fail_b_24 = bool_j_45;
                                                            flatten_fun_j_54 = fun expr_b_23 -> (
                                                                var_j_46 = expr_b_23;
                                                                m_match_bool_j_48 = var_j_46 ~ any;
                                                                m_match_bool_j_51 = var_j_46 ~ int;
                                                                m_match_cond_j_52 = m_match_bool_j_51 ? (
                                                                        
                                                                    bool_j_53 = true
                                                                    ) : (
                                                                        
                                                                    m_match_cond_j_49 = m_match_bool_j_48 ? (
                                                                        var_j_50 = fail_b_24
                                                                    ) : (
                                                                        void_j_47 = 
                                                                    {}
                                                                    )
                                                                    ));
                                                            flatten_fun_j_56 = fun bj_null_j_12 -> (
                                                                input_j_55 = input);
                                                            flatten_fun_j_58 = fun expr_b_25 -> (
                                                                var_j_57 = expr_b_25);
                                                            record_j_59 = 
                                                                {checker = flatten_fun_j_54, generator = flatten_fun_j_56, wrapper = flatten_fun_j_58};
                                                            proj_j_60 = record_j_59.checker;
                                                            var_j_61 = hd_j_14;
                                                            appl_j_62 = proj_j_60 var_j_61;
                                                            elm_check_b_28 = appl_j_62;
                                                            var_j_63 = elm_check_b_28;
                                                            if_j_68 = var_j_63 ? (
                                                                    var_j_64 = test_fun_b_26;
                                                                    var_j_65 = tl_j_13;
                                                                    appl_j_66 = var_j_64 var_j_65
                                                                ) : (
                                                                    var_j_67 = elm_check_b_28
                                                                )
                                                        ) : (
                                                            void_j_42 = 
                                                                {}
                                                        )
                                                )));
                                    test_fun_b_26_j_2_j_16 = flatten_fun_j_73;
                                    var_j_74 = test_fun_b_26_j_2_j_16;
                                    var_j_75 = test_fun_b_26_j_2_j_16;
                                    appl_j_76 = var_j_74 var_j_75;
                                    test_fun_b_26_j_15 = appl_j_76;
                                    var_j_77 = test_fun_b_26_j_15;
                                    var_j_78 = expr_b_29;
                                    appl_j_79 = var_j_77 var_j_78
                                ) : (
                                    m_match_cond_j_34 = m_match_bool_j_33 ? (
                                            var_j_35 = lst_fail_b_30
                                        ) : (
                                            void_j_32 = {}
                                        )
                                )
                        ));
                flatten_fun_j_134 = fun bj_null_j_23 -> (
                    flatten_fun_j_120 = fun list_maker_b_21_j_3 -> (
                        flatten_fun_j_119 = fun len_b_20 -> (
                            var_j_84 = list_maker_b_21_j_3;
                            var_j_85 = list_maker_b_21_j_3;
                            appl_j_86 = var_j_84 var_j_85;
                            list_maker_b_21 = appl_j_86;
                            var_j_87 = len_b_20;
                            int_j_88 = 0;
                            binop_j_89 = var_j_87 == int_j_88;
                            if_j_118 = binop_j_89 ? (
                                    record_j_90 = {};
                                    record_j_91 = {j_empty = record_j_90}
                                ) : (
                                    bool_j_92 = false;
                                    fail_b_18 = bool_j_92;
                                    flatten_fun_j_101 = fun expr_b_17 -> (
                                        var_j_93 = expr_b_17;
                                        m_match_bool_j_95 = var_j_93 ~ any;
                                        m_match_bool_j_98 = var_j_93 ~ int;
                                        m_match_cond_j_99 = m_match_bool_j_98 ? (
                                                bool_j_100 = true
                                            ) : (
                                                m_match_cond_j_96 = m_match_bool_j_95 ? (
                                                        var_j_97 = fail_b_18
                                                    ) : (
                                                        void_j_94 = {}
                                                    )
                                            ));
                                    flatten_fun_j_103 = fun bj_null_j_19 -> (
                                        input_j_102 = input);
                                    flatten_fun_j_105 = fun expr_b_19 -> (
                                        var_j_104 = expr_b_19);
                                    record_j_106 = {checker = flatten_fun_j_101, generator = flatten_fun_j_103, wrapper = flatten_fun_j_105};
                                    proj_j_107 = record_j_106.generator;
                                    int_j_108 = 0;
                                    appl_j_109 = proj_j_107 int_j_108;
                                    elm_b_22 = appl_j_109;
                                    record_j_110 = {};
                                    var_j_111 = elm_b_22;
                                    var_j_112 = list_maker_b_21;
                                    var_j_113 = len_b_20;
                                    int_j_114 = 1;
                                    binop_j_115 = var_j_113 - int_j_114;
                                    appl_j_116 = var_j_112 binop_j_115;
                                    record_j_117 = {j_cons = record_j_110, j_head = var_j_111, j_tail = appl_j_116}
                                )));
                    list_maker_b_21_j_3_j_22 = flatten_fun_j_120;
                    var_j_121 = list_maker_b_21_j_3_j_22;
                    var_j_122 = list_maker_b_21_j_3_j_22;
                    appl_j_123 = var_j_121 var_j_122;
                    list_maker_b_21_j_21 = appl_j_123;
                    input_j_124 = input;
                    len_b_20_j_20 = input_j_124;
                    int_j_125 = 0;
                    var_j_126 = len_b_20_j_20;
                    binop_j_127 = int_j_125 <= var_j_126;
                    if_j_133 = binop_j_127 ? (
                            var_j_128 = list_maker_b_21_j_21;
                            var_j_129 = len_b_20_j_20;
                            appl_j_130 = var_j_128 var_j_129
                        ) : (
                            bool_j_131 = false;
                            assume_j_132 = assume bool_j_131
                        ));
                flatten_fun_j_136 = fun expr_b_31 -> (
                    var_j_135 = expr_b_31);
                record_j_137 = {checker = flatten_fun_j_83, generator = flatten_fun_j_134, wrapper = flatten_fun_j_136};
                proj_j_138 = record_j_137.checker;
                var_j_139 = lst_b_0;
                m_i_331 = proj_j_138 ~ fun;
                appl_j_140 = m_i_331 ? (
                        c_appl_i_332 = proj_j_138 var_j_139
                    ) : (
                        ab_i_333 = abort
                    )
            ) : (
                bool_j_141 = true
            );
        arg_check_b_1 = if_j_142;
        var_j_143 = arg_check_b_1;
        if_j_182 = var_j_143 ? (
                bool_j_144 = false;
                fail_b_33 = bool_j_144;
                flatten_fun_j_153 = fun expr_b_32 -> (
                    var_j_145 = expr_b_32;
                    m_match_bool_j_147 = var_j_145 ~ any;
                    m_match_bool_j_150 = var_j_145 ~ int;
                    m_match_cond_j_151 = m_match_bool_j_150 ? (
                            bool_j_152 = true
                        ) : (
                            m_match_cond_j_148 = m_match_bool_j_147 ? (
                                    var_j_149 = fail_b_33
                                ) : (
                                    void_j_146 = {}
                                )
                        ));
                flatten_fun_j_155 = fun bj_null_j_24 -> (
                    input_j_154 = input);
                flatten_fun_j_157 = fun expr_b_34 -> (
                    var_j_156 = expr_b_34);
                record_j_158 = {checker = flatten_fun_j_153, generator = flatten_fun_j_155, wrapper = flatten_fun_j_157};
                proj_j_159 = record_j_158.wrapper;
                bool_j_160 = false;
                fail_b_35 = bool_j_160;
                var_j_161 = lst;
                m_match_bool_j_163 = var_j_161 ~ {j_head, j_tail, _};
                m_match_bool_j_166 = var_j_161 ~ {j_empty, _};
                m_match_bool_j_169 = var_j_161 ~ {bj_untouched, _};
                m_match_cond_j_170 = m_match_bool_j_169 ? (
                        var_j_171 = fail_b_35;
                        assert_pred_j_172 = var_j_171;
                        assert_res_j_173 = assert_pred_j_172 ? (
                                assert_res_true_j_174 = {}
                            ) : (
                                ab_j_175 = abort
                            )
                    ) : (
                        m_match_cond_j_167 = m_match_bool_j_166 ? (
                                bool_j_168 = false
                            ) : (
                                m_match_cond_j_164 = m_match_bool_j_163 ? (
                                        hd_j_26 = var_j_161.j_head;
                                        tl_j_25 = var_j_161.j_tail;
                                        int_j_165 = 5
                                    ) : (
                                        ab_j_162 = abort
                                    )
                            )
                    );
                m_i_334 = proj_j_159 ~ fun;
                appl_j_176 = m_i_334 ? (
                        c_appl_i_335 = proj_j_159 m_match_cond_j_170
                    ) : (
                        ab_i_336 = abort
                    )
            ) : (
                var_j_177 = arg_check_b_1;
                assert_pred_j_178 = var_j_177;
                assert_res_j_179 = assert_pred_j_178 ? (
                        assert_res_true_j_180 = {}
                    ) : (
                        ab_j_181 = abort
                    )
            ));
    var_j_184 = lst;
    appl_j_185 = flatten_fun_j_183 var_j_184);
list_test = list_test_j_186;
flatten_fun_j_240 = fun expr_b_14 -> (
    bool_j_187 = false;
    lst_fail_b_15 = bool_j_187;
    var_j_188 = expr_b_14;
    m_match_bool_j_190 = var_j_188 ~ any;
    m_match_bool_j_193 = var_j_188 ~ {j_head, j_tail, _};
    m_match_bool_j_237 = var_j_188 ~ {j_empty, _};
    m_match_cond_j_238 = m_match_bool_j_237 ? (
            bool_j_239 = true
        ) : (
            m_match_cond_j_194 = m_match_bool_j_193 ? (
                    bj_underscore = var_j_188.j_head;
                    bj_underscore2 = var_j_188.j_tail;
                    flatten_fun_j_230 = fun test_fun_b_11_j_0 -> (
                        flatten_fun_j_229 = fun test_list_b_12 -> (
                            var_j_195 = test_fun_b_11_j_0;
                            var_j_196 = test_fun_b_11_j_0;
                            appl_j_197 = var_j_195 var_j_196;
                            test_fun_b_11 = appl_j_197;
                            var_j_198 = test_list_b_12;
                            m_match_bool_j_200 = var_j_198 ~ {j_head, j_tail, _};
                            m_match_bool_j_226 = var_j_198 ~ {j_empty, _};
                            m_match_cond_j_227 = m_match_bool_j_226 ? (
                                    bool_j_228 = true
                                ) : (
                                    m_match_cond_j_201 = m_match_bool_j_200 ? (
                                            hd = var_j_198.j_head;
                                            tl = var_j_198.j_tail;
                                            bool_j_202 = false;
                                            fail_b_9 = bool_j_202;
                                            flatten_fun_j_211 = fun expr_b_8 -> (
                                                var_j_203 = expr_b_8;
                                                m_match_bool_j_205 = var_j_203 ~ any;
                                                m_match_bool_j_208 = var_j_203 ~ int;
                                                m_match_cond_j_209 = m_match_bool_j_208 ? (
                                                        bool_j_210 = true
                                                    ) : (
                                                        m_match_cond_j_206 = m_match_bool_j_205 ? (
                                                                var_j_207 = fail_b_9
                                                            ) : (
                                                                void_j_204 = 
                                                                    {}
                                                            )
                                                    ));
                                            flatten_fun_j_213 = fun bj_null -> (
                                                input_j_212 = input);
                                            flatten_fun_j_215 = fun expr_b_10 -> (
                                                var_j_214 = expr_b_10);
                                            record_j_216 = {checker = flatten_fun_j_211, generator = flatten_fun_j_213, wrapper = flatten_fun_j_215};
                                            proj_j_217 = record_j_216.checker;
                                            var_j_218 = hd;
                                            appl_j_219 = proj_j_217 var_j_218;
                                            elm_check_b_13 = appl_j_219;
                                            var_j_220 = elm_check_b_13;
                                            if_j_225 = var_j_220 ? (
                                                    var_j_221 = test_fun_b_11;
                                                    var_j_222 = tl;
                                                    appl_j_223 = var_j_221 var_j_222
                                                ) : (
                                                    var_j_224 = elm_check_b_13
                                                )
                                        ) : (
                                            void_j_199 = {}
                                        )
                                )));
                    test_fun_b_11_j_0_j_5 = flatten_fun_j_230;
                    var_j_231 = test_fun_b_11_j_0_j_5;
                    var_j_232 = test_fun_b_11_j_0_j_5;
                    appl_j_233 = var_j_231 var_j_232;
                    test_fun_b_11_j_4 = appl_j_233;
                    var_j_234 = test_fun_b_11_j_4;
                    var_j_235 = expr_b_14;
                    appl_j_236 = var_j_234 var_j_235
                ) : (
                    m_match_cond_j_191 = m_match_bool_j_190 ? (
                            var_j_192 = lst_fail_b_15
                        ) : (
                            void_j_189 = {}
                        )
                )
        ));
flatten_fun_j_291 = fun bj_null_j_10 -> (
    flatten_fun_j_277 = fun list_maker_b_6_j_1 -> (
        flatten_fun_j_276 = fun len_b_5 -> (
            var_j_241 = list_maker_b_6_j_1;
            var_j_242 = list_maker_b_6_j_1;
            appl_j_243 = var_j_241 var_j_242;
            list_maker_b_6 = appl_j_243;
            var_j_244 = len_b_5;
            int_j_245 = 0;
            binop_j_246 = var_j_244 == int_j_245;
            if_j_275 = binop_j_246 ? (
                    record_j_247 = {};
                    record_j_248 = {j_empty = record_j_247}
                ) : (
                    bool_j_249 = false;
                    fail_b_3 = bool_j_249;
                    flatten_fun_j_258 = fun expr_b_2 -> (
                        var_j_250 = expr_b_2;
                        m_match_bool_j_252 = var_j_250 ~ any;
                        m_match_bool_j_255 = var_j_250 ~ int;
                        m_match_cond_j_256 = m_match_bool_j_255 ? (
                                bool_j_257 = true
                            ) : (
                                m_match_cond_j_253 = m_match_bool_j_252 ? (
                                        var_j_254 = fail_b_3
                                    ) : (
                                        void_j_251 = {}
                                    )
                            ));
                    flatten_fun_j_260 = fun bj_null_j_6 -> (
                        input_j_259 = input);
                    flatten_fun_j_262 = fun expr_b_4 -> (
                        var_j_261 = expr_b_4);
                    record_j_263 = {checker = flatten_fun_j_258, generator = flatten_fun_j_260, wrapper = flatten_fun_j_262};
                    proj_j_264 = record_j_263.generator;
                    int_j_265 = 0;
                    appl_j_266 = proj_j_264 int_j_265;
                    elm_b_7 = appl_j_266;
                    record_j_267 = {};
                    var_j_268 = elm_b_7;
                    var_j_269 = list_maker_b_6;
                    var_j_270 = len_b_5;
                    int_j_271 = 1;
                    binop_j_272 = var_j_270 - int_j_271;
                    appl_j_273 = var_j_269 binop_j_272;
                    record_j_274 = {j_cons = record_j_267, j_head = var_j_268, j_tail = appl_j_273}
                )));
    list_maker_b_6_j_1_j_9 = flatten_fun_j_277;
    var_j_278 = list_maker_b_6_j_1_j_9;
    var_j_279 = list_maker_b_6_j_1_j_9;
    appl_j_280 = var_j_278 var_j_279;
    list_maker_b_6_j_8 = appl_j_280;
    input_j_281 = input;
    len_b_5_j_7 = input_j_281;
    int_j_282 = 0;
    var_j_283 = len_b_5_j_7;
    binop_j_284 = int_j_282 <= var_j_283;
    if_j_290 = binop_j_284 ? (
            var_j_285 = list_maker_b_6_j_8;
            var_j_286 = len_b_5_j_7;
            appl_j_287 = var_j_285 var_j_286
        ) : (
            bool_j_288 = false;
            assume_j_289 = assume bool_j_288
        ));
flatten_fun_j_293 = fun expr_b_16 -> (
    var_j_292 = expr_b_16);
record_j_294 = {checker = flatten_fun_j_240, generator = flatten_fun_j_291, wrapper = flatten_fun_j_293};
proj_j_295 = record_j_294.generator;
int_j_296 = 0;
appl_j_297 = proj_j_295 int_j_296;
lst_b_39 = appl_j_297;
bool_j_298 = false;
fail_b_37 = bool_j_298;
flatten_fun_j_307 = fun expr_b_36 -> (
    var_j_299 = expr_b_36;
    m_match_bool_j_301 = var_j_299 ~ any;
    m_match_bool_j_304 = var_j_299 ~ int;
    m_match_cond_j_305 = m_match_bool_j_304 ? (
            bool_j_306 = true
        ) : (
            m_match_cond_j_302 = m_match_bool_j_301 ? (
                    var_j_303 = fail_b_37
                ) : (
                    void_j_300 = {}
                )
        ));
flatten_fun_j_309 = fun bj_null_j_11 -> (
    input_j_308 = input);
flatten_fun_j_311 = fun expr_b_38 -> (
    var_j_310 = expr_b_38);
record_j_312 = {checker = flatten_fun_j_307, generator = flatten_fun_j_309, wrapper = flatten_fun_j_311};
proj_j_313 = record_j_312.checker;
appl_j_316 = list_test lst_b_39;
appl_j_317 = proj_j_313 appl_j_316;
check_res_b_40 = appl_j_317;
if_j_325 = check_res_b_40 ? (
        var_j_319 = list_test
    ) : (
        error_var_j_320 = check_res_b_40;
        assert_pred_j_321 = error_var_j_320;
        assert_res_j_322 = assert_pred_j_321 ? (
                assert_res_true_j_323 = {}
            ) : (
                ab_j_324 = abort
            )
    );
i_result = if_j_325