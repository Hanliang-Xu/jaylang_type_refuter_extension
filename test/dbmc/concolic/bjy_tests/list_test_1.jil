i_first = {};
list_test_j_181 = fun lst -> (
    flatten_fun_j_178 = fun lst_b_0 -> (
        flatten_fun_j_80 = fun expr_b_29 -> (
            bool_j_27 = false;
            lst_fail_b_30 = bool_j_27;
            var_j_28 = expr_b_29;
            m_match_bool_j_30 = var_j_28 ~ any;
            m_match_bool_j_33 = var_j_28 ~ {j_head, j_tail, _};
            m_match_bool_j_77 = var_j_28 ~ {j_empty, _};
            m_match_cond_j_78 = m_match_bool_j_77 ? (
                    bool_j_79 = true
                ) : (
                    m_match_cond_j_34 = m_match_bool_j_33 ? (
                            bj_underscore_j_18 = var_j_28.j_head;
                            bj_underscore2_j_17 = var_j_28.j_tail;
                            flatten_fun_j_70 = fun test_fun_b_26_j_2 -> (
                                flatten_fun_j_69 = fun test_list_b_27 -> (
                                    var_j_35 = test_fun_b_26_j_2;
                                    var_j_36 = test_fun_b_26_j_2;
                                    appl_j_37 = var_j_35 var_j_36;
                                    test_fun_b_26 = appl_j_37;
                                    var_j_38 = test_list_b_27;
                                    m_match_bool_j_40 = var_j_38 ~ {j_head, j_tail, _};
                                    m_match_bool_j_66 = var_j_38 ~ {j_empty, _};
                                    m_match_cond_j_67 = m_match_bool_j_66 ? (
                                            bool_j_68 = true
                                        ) : (
                                            m_match_cond_j_41 = m_match_bool_j_40 ? (
                                                    hd_j_14 = var_j_38.j_head;
                                                    tl_j_13 = var_j_38.j_tail;
                                                    bool_j_42 = false;
                                                    fail_b_24 = bool_j_42;
                                                    flatten_fun_j_51 = fun expr_b_23 -> (
                                                        var_j_43 = expr_b_23;
                                                        m_match_bool_j_45 = var_j_43 ~ any;
                                                        m_match_bool_j_48 = var_j_43 ~ int;
                                                        m_match_cond_j_49 = m_match_bool_j_48 ? (
                                                                bool_j_50 = true
                                                            ) : (
                                                                m_match_cond_j_46 = m_match_bool_j_45 ? (
                                                                        
                                                                    var_j_47 = fail_b_24
                                                                    ) : (
                                                                        
                                                                    void_j_44 = 
                                                                    {}
                                                                    )
                                                            ));
                                                    flatten_fun_j_53 = fun bj_null_j_12 -> (
                                                        input_j_52 = input);
                                                    flatten_fun_j_55 = fun expr_b_25 -> (
                                                        var_j_54 = expr_b_25);
                                                    record_j_56 = {checker = flatten_fun_j_51, generator = flatten_fun_j_53, wrapper = flatten_fun_j_55};
                                                    proj_j_57 = record_j_56.checker;
                                                    var_j_58 = hd_j_14;
                                                    appl_j_59 = proj_j_57 var_j_58;
                                                    elm_check_b_28 = appl_j_59;
                                                    var_j_60 = elm_check_b_28;
                                                    if_j_65 = var_j_60 ? (
                                                            var_j_61 = test_fun_b_26;
                                                            var_j_62 = tl_j_13;
                                                            appl_j_63 = var_j_61 var_j_62
                                                        ) : (
                                                            var_j_64 = elm_check_b_28
                                                        )
                                                ) : (
                                                    void_j_39 = {}
                                                )
                                        )));
                            test_fun_b_26_j_2_j_16 = flatten_fun_j_70;
                            var_j_71 = test_fun_b_26_j_2_j_16;
                            var_j_72 = test_fun_b_26_j_2_j_16;
                            appl_j_73 = var_j_71 var_j_72;
                            test_fun_b_26_j_15 = appl_j_73;
                            var_j_74 = test_fun_b_26_j_15;
                            var_j_75 = expr_b_29;
                            appl_j_76 = var_j_74 var_j_75
                        ) : (
                            m_match_cond_j_31 = m_match_bool_j_30 ? (
                                    var_j_32 = lst_fail_b_30
                                ) : (
                                    void_j_29 = {}
                                )
                        )
                ));
        flatten_fun_j_131 = fun bj_null_j_23 -> (
            flatten_fun_j_117 = fun list_maker_b_21_j_3 -> (
                flatten_fun_j_116 = fun len_b_20 -> (
                    var_j_81 = list_maker_b_21_j_3;
                    var_j_82 = list_maker_b_21_j_3;
                    appl_j_83 = var_j_81 var_j_82;
                    list_maker_b_21 = appl_j_83;
                    var_j_84 = len_b_20;
                    int_j_85 = 0;
                    binop_j_86 = var_j_84 == int_j_85;
                    if_j_115 = binop_j_86 ? (
                            record_j_87 = {};
                            record_j_88 = {j_empty = record_j_87}
                        ) : (
                            bool_j_89 = false;
                            fail_b_18 = bool_j_89;
                            flatten_fun_j_98 = fun expr_b_17 -> (
                                var_j_90 = expr_b_17;
                                m_match_bool_j_92 = var_j_90 ~ any;
                                m_match_bool_j_95 = var_j_90 ~ int;
                                m_match_cond_j_96 = m_match_bool_j_95 ? (
                                        bool_j_97 = true
                                    ) : (
                                        m_match_cond_j_93 = m_match_bool_j_92 ? (
                                                var_j_94 = fail_b_18
                                            ) : (
                                                void_j_91 = {}
                                            )
                                    ));
                            flatten_fun_j_100 = fun bj_null_j_19 -> (
                                input_j_99 = input);
                            flatten_fun_j_102 = fun expr_b_19 -> (
                                var_j_101 = expr_b_19);
                            record_j_103 = {checker = flatten_fun_j_98, generator = flatten_fun_j_100, wrapper = flatten_fun_j_102};
                            proj_j_104 = record_j_103.generator;
                            int_j_105 = 0;
                            appl_j_106 = proj_j_104 int_j_105;
                            elm_b_22 = appl_j_106;
                            record_j_107 = {};
                            var_j_108 = elm_b_22;
                            var_j_109 = list_maker_b_21;
                            var_j_110 = len_b_20;
                            int_j_111 = 1;
                            binop_j_112 = var_j_110 - int_j_111;
                            appl_j_113 = var_j_109 binop_j_112;
                            record_j_114 = {j_cons = record_j_107, j_head = var_j_108, j_tail = appl_j_113}
                        )));
            list_maker_b_21_j_3_j_22 = flatten_fun_j_117;
            var_j_118 = list_maker_b_21_j_3_j_22;
            var_j_119 = list_maker_b_21_j_3_j_22;
            appl_j_120 = var_j_118 var_j_119;
            list_maker_b_21_j_21 = appl_j_120;
            input_j_121 = input;
            len_b_20_j_20 = input_j_121;
            int_j_122 = 0;
            var_j_123 = len_b_20_j_20;
            binop_j_124 = int_j_122 <= var_j_123;
            if_j_130 = binop_j_124 ? (
                    var_j_125 = list_maker_b_21_j_21;
                    var_j_126 = len_b_20_j_20;
                    appl_j_127 = var_j_125 var_j_126
                ) : (
                    bool_j_128 = false;
                    assume_j_129 = assume bool_j_128
                ));
        flatten_fun_j_133 = fun expr_b_31 -> (
            var_j_132 = expr_b_31);
        record_j_134 = {checker = flatten_fun_j_80, generator = flatten_fun_j_131, wrapper = flatten_fun_j_133};
        proj_j_135 = record_j_134.checker;
        var_j_136 = lst_b_0;
        appl_j_137 = proj_j_135 var_j_136;
        arg_check_b_1 = appl_j_137;
        var_j_138 = arg_check_b_1;
        if_j_177 = var_j_138 ? (
                bool_j_139 = false;
                fail_b_33 = bool_j_139;
                flatten_fun_j_148 = fun expr_b_32 -> (
                    var_j_140 = expr_b_32;
                    m_match_bool_j_142 = var_j_140 ~ any;
                    m_match_bool_j_145 = var_j_140 ~ int;
                    m_match_cond_j_146 = m_match_bool_j_145 ? (
                            bool_j_147 = true
                        ) : (
                            m_match_cond_j_143 = m_match_bool_j_142 ? (
                                    var_j_144 = fail_b_33
                                ) : (
                                    void_j_141 = {}
                                )
                        ));
                flatten_fun_j_150 = fun bj_null_j_24 -> (
                    input_j_149 = input);
                flatten_fun_j_152 = fun expr_b_34 -> (
                    var_j_151 = expr_b_34);
                record_j_153 = {checker = flatten_fun_j_148, generator = flatten_fun_j_150, wrapper = flatten_fun_j_152};
                proj_j_154 = record_j_153.wrapper;
                bool_j_155 = false;
                fail_b_35 = bool_j_155;
                var_j_156 = lst;
                m_match_bool_j_158 = var_j_156 ~ {j_head, j_tail, _};
                m_match_bool_j_161 = var_j_156 ~ {j_empty, _};
                m_match_bool_j_164 = var_j_156 ~ {bj_untouched, _};
                m_match_cond_j_165 = m_match_bool_j_164 ? (
                        var_j_166 = fail_b_35;
                        assert_pred_j_167 = var_j_166;
                        assert_res_j_168 = assert_pred_j_167 ? (
                                assert_res_true_j_169 = {}
                            ) : (
                                ab_j_170 = abort
                            )
                    ) : (
                        m_match_cond_j_162 = m_match_bool_j_161 ? (
                                bool_j_163 = false
                            ) : (
                                m_match_cond_j_159 = m_match_bool_j_158 ? (
                                        hd_j_26 = var_j_156.j_head;
                                        tl_j_25 = var_j_156.j_tail;
                                        int_j_160 = 5
                                    ) : (
                                        ab_j_157 = abort
                                    )
                            )
                    );
                m_i_321 = proj_j_154 ~ fun;
                appl_j_171 = m_i_321 ? (
                        c_appl_i_322 = proj_j_154 m_match_cond_j_165
                    ) : (
                        ab_i_323 = abort
                    )
            ) : (
                var_j_172 = arg_check_b_1;
                assert_pred_j_173 = var_j_172;
                assert_res_j_174 = assert_pred_j_173 ? (
                        assert_res_true_j_175 = {}
                    ) : (
                        ab_j_176 = abort
                    )
            ));
    var_j_179 = lst;
    appl_j_180 = flatten_fun_j_178 var_j_179);
list_test = list_test_j_181;
flatten_fun_j_235 = fun expr_b_14 -> (
    bool_j_182 = false;
    lst_fail_b_15 = bool_j_182;
    var_j_183 = expr_b_14;
    m_match_bool_j_185 = var_j_183 ~ any;
    m_match_bool_j_188 = var_j_183 ~ {j_head, j_tail, _};
    m_match_bool_j_232 = var_j_183 ~ {j_empty, _};
    m_match_cond_j_233 = m_match_bool_j_232 ? (
            bool_j_234 = true
        ) : (
            m_match_cond_j_189 = m_match_bool_j_188 ? (
                    bj_underscore = var_j_183.j_head;
                    bj_underscore2 = var_j_183.j_tail;
                    flatten_fun_j_225 = fun test_fun_b_11_j_0 -> (
                        flatten_fun_j_224 = fun test_list_b_12 -> (
                            var_j_190 = test_fun_b_11_j_0;
                            var_j_191 = test_fun_b_11_j_0;
                            appl_j_192 = var_j_190 var_j_191;
                            test_fun_b_11 = appl_j_192;
                            var_j_193 = test_list_b_12;
                            m_match_bool_j_195 = var_j_193 ~ {j_head, j_tail, _};
                            m_match_bool_j_221 = var_j_193 ~ {j_empty, _};
                            m_match_cond_j_222 = m_match_bool_j_221 ? (
                                    bool_j_223 = true
                                ) : (
                                    m_match_cond_j_196 = m_match_bool_j_195 ? (
                                            hd = var_j_193.j_head;
                                            tl = var_j_193.j_tail;
                                            bool_j_197 = false;
                                            fail_b_9 = bool_j_197;
                                            flatten_fun_j_206 = fun expr_b_8 -> (
                                                var_j_198 = expr_b_8;
                                                m_match_bool_j_200 = var_j_198 ~ any;
                                                m_match_bool_j_203 = var_j_198 ~ int;
                                                m_match_cond_j_204 = m_match_bool_j_203 ? (
                                                        bool_j_205 = true
                                                    ) : (
                                                        m_match_cond_j_201 = m_match_bool_j_200 ? (
                                                                var_j_202 = fail_b_9
                                                            ) : (
                                                                void_j_199 = 
                                                                    {}
                                                            )
                                                    ));
                                            flatten_fun_j_208 = fun bj_null -> (
                                                input_j_207 = input);
                                            flatten_fun_j_210 = fun expr_b_10 -> (
                                                var_j_209 = expr_b_10);
                                            record_j_211 = {checker = flatten_fun_j_206, generator = flatten_fun_j_208, wrapper = flatten_fun_j_210};
                                            proj_j_212 = record_j_211.checker;
                                            var_j_213 = hd;
                                            appl_j_214 = proj_j_212 var_j_213;
                                            elm_check_b_13 = appl_j_214;
                                            var_j_215 = elm_check_b_13;
                                            if_j_220 = var_j_215 ? (
                                                    var_j_216 = test_fun_b_11;
                                                    var_j_217 = tl;
                                                    appl_j_218 = var_j_216 var_j_217
                                                ) : (
                                                    var_j_219 = elm_check_b_13
                                                )
                                        ) : (
                                            void_j_194 = {}
                                        )
                                )));
                    test_fun_b_11_j_0_j_5 = flatten_fun_j_225;
                    var_j_226 = test_fun_b_11_j_0_j_5;
                    var_j_227 = test_fun_b_11_j_0_j_5;
                    appl_j_228 = var_j_226 var_j_227;
                    test_fun_b_11_j_4 = appl_j_228;
                    var_j_229 = test_fun_b_11_j_4;
                    var_j_230 = expr_b_14;
                    appl_j_231 = var_j_229 var_j_230
                ) : (
                    m_match_cond_j_186 = m_match_bool_j_185 ? (
                            var_j_187 = lst_fail_b_15
                        ) : (
                            void_j_184 = {}
                        )
                )
        ));
flatten_fun_j_286 = fun bj_null_j_10 -> (
    flatten_fun_j_272 = fun list_maker_b_6_j_1 -> (
        flatten_fun_j_271 = fun len_b_5 -> (
            var_j_236 = list_maker_b_6_j_1;
            var_j_237 = list_maker_b_6_j_1;
            appl_j_238 = var_j_236 var_j_237;
            list_maker_b_6 = appl_j_238;
            var_j_239 = len_b_5;
            int_j_240 = 0;
            binop_j_241 = var_j_239 == int_j_240;
            if_j_270 = binop_j_241 ? (
                    record_j_242 = {};
                    record_j_243 = {j_empty = record_j_242}
                ) : (
                    bool_j_244 = false;
                    fail_b_3 = bool_j_244;
                    flatten_fun_j_253 = fun expr_b_2 -> (
                        var_j_245 = expr_b_2;
                        m_match_bool_j_247 = var_j_245 ~ any;
                        m_match_bool_j_250 = var_j_245 ~ int;
                        m_match_cond_j_251 = m_match_bool_j_250 ? (
                                bool_j_252 = true
                            ) : (
                                m_match_cond_j_248 = m_match_bool_j_247 ? (
                                        var_j_249 = fail_b_3
                                    ) : (
                                        void_j_246 = {}
                                    )
                            ));
                    flatten_fun_j_255 = fun bj_null_j_6 -> (
                        input_j_254 = input);
                    flatten_fun_j_257 = fun expr_b_4 -> (
                        var_j_256 = expr_b_4);
                    record_j_258 = {checker = flatten_fun_j_253, generator = flatten_fun_j_255, wrapper = flatten_fun_j_257};
                    proj_j_259 = record_j_258.generator;
                    int_j_260 = 0;
                    appl_j_261 = proj_j_259 int_j_260;
                    elm_b_7 = appl_j_261;
                    record_j_262 = {};
                    var_j_263 = elm_b_7;
                    var_j_264 = list_maker_b_6;
                    var_j_265 = len_b_5;
                    int_j_266 = 1;
                    binop_j_267 = var_j_265 - int_j_266;
                    appl_j_268 = var_j_264 binop_j_267;
                    record_j_269 = {j_cons = record_j_262, j_head = var_j_263, j_tail = appl_j_268}
                )));
    list_maker_b_6_j_1_j_9 = flatten_fun_j_272;
    var_j_273 = list_maker_b_6_j_1_j_9;
    var_j_274 = list_maker_b_6_j_1_j_9;
    appl_j_275 = var_j_273 var_j_274;
    list_maker_b_6_j_8 = appl_j_275;
    input_j_276 = input;
    len_b_5_j_7 = input_j_276;
    int_j_277 = 0;
    var_j_278 = len_b_5_j_7;
    binop_j_279 = int_j_277 <= var_j_278;
    if_j_285 = binop_j_279 ? (
            var_j_280 = list_maker_b_6_j_8;
            var_j_281 = len_b_5_j_7;
            appl_j_282 = var_j_280 var_j_281
        ) : (
            bool_j_283 = false;
            assume_j_284 = assume bool_j_283
        ));
flatten_fun_j_288 = fun expr_b_16 -> (
    var_j_287 = expr_b_16);
record_j_289 = {checker = flatten_fun_j_235, generator = flatten_fun_j_286, wrapper = flatten_fun_j_288};
proj_j_290 = record_j_289.generator;
int_j_291 = 0;
appl_j_292 = proj_j_290 int_j_291;
lst_b_39 = appl_j_292;
bool_j_293 = false;
fail_b_37 = bool_j_293;
flatten_fun_j_302 = fun expr_b_36 -> (
    var_j_294 = expr_b_36;
    m_match_bool_j_296 = var_j_294 ~ any;
    m_match_bool_j_299 = var_j_294 ~ int;
    m_match_cond_j_300 = m_match_bool_j_299 ? (
            bool_j_301 = true
        ) : (
            m_match_cond_j_297 = m_match_bool_j_296 ? (
                    var_j_298 = fail_b_37
                ) : (
                    void_j_295 = {}
                )
        ));
flatten_fun_j_304 = fun bj_null_j_11 -> (
    input_j_303 = input);
flatten_fun_j_306 = fun expr_b_38 -> (
    var_j_305 = expr_b_38);
record_j_307 = {checker = flatten_fun_j_302, generator = flatten_fun_j_304, wrapper = flatten_fun_j_306};
proj_j_308 = record_j_307.checker;
appl_j_311 = list_test lst_b_39;
appl_j_312 = proj_j_308 appl_j_311;
check_res_b_40 = appl_j_312;
if_j_320 = check_res_b_40 ? (
        var_j_314 = list_test
    ) : (
        error_var_j_315 = check_res_b_40;
        assert_pred_j_316 = error_var_j_315;
        assert_res_j_317 = assert_pred_j_316 ? (
                assert_res_true_j_318 = {}
            ) : (
                ab_j_319 = abort
            )
    );
i_result = if_j_320