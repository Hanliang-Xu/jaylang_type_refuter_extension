_i_first = {};
flatten_fun_j_25 = fun sum_j_0 -> (
    flatten_fun_j_24 = fun acc -> (
        flatten_fun_j_23 = fun x -> (
            var_j_5 = sum_j_0;
            var_j_6 = sum_j_0;
            appl_j_7 = var_j_5 var_j_6;
            sum = appl_j_7;
            var_j_8 = x;
            int_j_9 = 0;
            binop_j_10 = var_j_8 == int_j_9;
            if_j_22 = binop_j_10 ? (
                    var_j_11 = acc
                ) : (
                    var_j_12 = x;
                    var_j_13 = acc;
                    binop_j_14 = var_j_12 + var_j_13;
                    acc2 = binop_j_14;
                    var_j_15 = sum;
                    var_j_16 = x;
                    int_j_17 = 1;
                    binop_j_18 = var_j_16 - int_j_17;
                    appl_j_19 = var_j_15 binop_j_18;
                    var_j_20 = acc2;
                    appl_j_21 = appl_j_19 var_j_20
                ))));
appl_j_28 = flatten_fun_j_25 flatten_fun_j_25;
bool_j_29 = false;
fail_b_1 = bool_j_29;
flatten_fun_j_38 = fun expr_b_0 -> (
    var_j_30 = expr_b_0;
    m_match_bool_j_32 = var_j_30 ~ any;
    m_match_bool_j_35 = var_j_30 ~ int;
    m_match_cond_j_36 = m_match_bool_j_35 ? (
            bool_j_37 = true
        ) : (
            m_match_cond_j_33 = m_match_bool_j_32 ? (
                    var_j_34 = fail_b_1
                ) : (
                    void_j_31 = {}
                )
        ));
flatten_fun_j_40 = fun ~null -> (
    input_j_39 = input);
record_j_41 = {checker = flatten_fun_j_38, generator = flatten_fun_j_40};
proj_j_42 = record_j_41.generator;
int_j_43 = 0;
appl_j_44 = proj_j_42 int_j_43;
acc_b_11 = appl_j_44;
bool_j_45 = false;
fail_b_4 = bool_j_45;
flatten_fun_j_54 = fun expr_b_3 -> (
    var_j_46 = expr_b_3;
    m_match_bool_j_48 = var_j_46 ~ any;
    m_match_bool_j_51 = var_j_46 ~ int;
    m_match_cond_j_52 = m_match_bool_j_51 ? (
            bool_j_53 = true
        ) : (
            m_match_cond_j_49 = m_match_bool_j_48 ? (
                    var_j_50 = fail_b_4
                ) : (
                    void_j_47 = {}
                )
        ));
flatten_fun_j_56 = fun ~null_j_1 -> (
    input_j_55 = input);
record_j_57 = {checker = flatten_fun_j_54, generator = flatten_fun_j_56};
proj_j_58 = record_j_57.generator;
int_j_59 = 0;
appl_j_60 = proj_j_58 int_j_59;
x_b_10 = appl_j_60;
bool_j_61 = false;
fail_b_7 = bool_j_61;
flatten_fun_j_70 = fun expr_b_6 -> (
    var_j_62 = expr_b_6;
    m_match_bool_j_64 = var_j_62 ~ any;
    m_match_bool_j_67 = var_j_62 ~ bool;
    m_match_cond_j_68 = m_match_bool_j_67 ? (
            bool_j_69 = true
        ) : (
            m_match_cond_j_65 = m_match_bool_j_64 ? (
                    var_j_66 = fail_b_7
                ) : (
                    void_j_63 = {}
                )
        ));
flatten_fun_j_74 = fun ~null_j_2 -> (
    int_j_71 = 0;
    input_j_72 = input;
    binop_j_73 = int_j_71 <= input_j_72);
record_j_75 = {checker = flatten_fun_j_70, generator = flatten_fun_j_74};
proj_j_76 = record_j_75.checker;
appl_j_79 = appl_j_28 acc_b_11;
appl_j_81 = appl_j_79 x_b_10;
appl_j_82 = proj_j_76 appl_j_81;
check_res_b_9 = appl_j_82;
if_j_93 = check_res_b_9 ? (
        var_j_84 = appl_j_28;
        int_j_85 = 0;
        appl_j_86 = var_j_84 int_j_85;
        sum2 = appl_j_86;
        var_j_87 = sum2
    ) : (
        error_var_j_88 = check_res_b_9;
        assert_pred_j_89 = error_var_j_88;
        assert_res_j_90 = assert_pred_j_89 ? (
                assert_res_true_j_91 = {}
            ) : (
                ab_j_92 = abort
            )
    );
_i_result = if_j_93