i_first = {};
access_record_j_179 = fun r -> (
    flatten_fun_j_176 = fun r_b_0 -> (
        flatten_fun_j_84 = fun expr_b_33 -> (
            bool_j_17 = false;
            rec_fail_b_32 = bool_j_17;
            bool_j_18 = false;
            rec_fail_b_31 = bool_j_18;
            bool_j_19 = false;
            rec_fail_b_30 = bool_j_19;
            var_j_20 = expr_b_33;
            m_match_bool_j_22 = var_j_20 ~ any;
            m_match_bool_j_25 = var_j_20 ~ {bj_actual_rec, _};
            m_match_cond_j_26 = m_match_bool_j_25 ? (
                    var_j_27 = expr_b_33;
                    proj_j_28 = var_j_27.bj_decl_lbls;
                    m_match_bool_j_30 = proj_j_28 ~ any;
                    m_match_bool_j_33 = proj_j_28 ~ {a, b, _};
                    m_match_cond_j_34 = m_match_bool_j_33 ? (
                            a_j_12 = proj_j_28.a;
                            b_j_11 = proj_j_28.b;
                            var_j_35 = expr_b_33;
                            proj_j_36 = var_j_35.bj_actual_rec;
                            m_match_bool_j_38 = proj_j_36 ~ any;
                            m_match_bool_j_41 = proj_j_36 ~ {a, b, _};
                            m_match_cond_j_42 = m_match_bool_j_41 ? (
                                    a_j_10 = proj_j_36.a;
                                    b_j_9 = proj_j_36.b;
                                    bool_j_43 = false;
                                    fail_b_39 = bool_j_43;
                                    flatten_fun_j_52 = fun expr_b_38 -> (
                                        var_j_44 = expr_b_38;
                                        m_match_bool_j_46 = var_j_44 ~ any;
                                        m_match_bool_j_49 = var_j_44 ~ int;
                                        m_match_cond_j_50 = m_match_bool_j_49 ? (
                                                bool_j_51 = true
                                            ) : (
                                                m_match_cond_j_47 = m_match_bool_j_46 ? (
                                                        var_j_48 = fail_b_39
                                                    ) : (
                                                        void_j_45 = {}
                                                    )
                                            ));
                                    flatten_fun_j_54 = fun bj_null_j_7 -> (
                                        input_j_53 = input);
                                    flatten_fun_j_56 = fun expr_b_40 -> (
                                        var_j_55 = expr_b_40);
                                    record_j_57 = {checker = flatten_fun_j_52, generator = flatten_fun_j_54, wrapper = flatten_fun_j_56};
                                    proj_j_58 = record_j_57.checker;
                                    var_j_59 = a_j_10;
                                    appl_j_60 = proj_j_58 var_j_59;
                                    lbl_check_b_37 = appl_j_60;
                                    var_j_61 = lbl_check_b_37;
                                    if_j_83 = var_j_61 ? (
                                            bool_j_62 = false;
                                            fail_b_35 = bool_j_62;
                                            flatten_fun_j_71 = fun expr_b_34 -> (
                                                var_j_63 = expr_b_34;
                                                m_match_bool_j_65 = var_j_63 ~ any;
                                                m_match_bool_j_68 = var_j_63 ~ bool;
                                                m_match_cond_j_69 = m_match_bool_j_68 ? (
                                                        bool_j_70 = true
                                                    ) : (
                                                        m_match_cond_j_66 = m_match_bool_j_65 ? (
                                                                var_j_67 = fail_b_35
                                                            ) : (
                                                                void_j_64 = 
                                                                    {}
                                                            )
                                                    ));
                                            flatten_fun_j_75 = fun bj_null_j_8 -> (
                                                int_j_72 = 0;
                                                input_j_73 = input;
                                                m_bl_i_328 = int_j_72 ~ int;
                                                m_br_i_329 = input_j_73 ~ int;
                                                m_b_i_330 = m_bl_i_328 and m_br_i_329;
                                                binop_j_74 = m_b_i_330 ? (
                                                        c_binop_i_331 = int_j_72 <= input_j_73
                                                    ) : (
                                                        ab_i_332 = abort
                                                    ));
                                            flatten_fun_j_77 = fun expr_b_36 -> (
                                                var_j_76 = expr_b_36);
                                            record_j_78 = {checker = flatten_fun_j_71, generator = flatten_fun_j_75, wrapper = flatten_fun_j_77};
                                            proj_j_79 = record_j_78.checker;
                                            var_j_80 = b_j_9;
                                            appl_j_81 = proj_j_79 var_j_80
                                        ) : (
                                            var_j_82 = lbl_check_b_37
                                        )
                                ) : (
                                    m_match_cond_j_39 = m_match_bool_j_38 ? (
                                            var_j_40 = rec_fail_b_30
                                        ) : (
                                            void_j_37 = {}
                                        )
                                )
                        ) : (
                            m_match_cond_j_31 = m_match_bool_j_30 ? (
                                    var_j_32 = rec_fail_b_31
                                ) : (
                                    void_j_29 = {}
                                )
                        )
                ) : (
                    m_match_cond_j_23 = m_match_bool_j_22 ? (
                            var_j_24 = rec_fail_b_32
                        ) : (
                            void_j_21 = {}
                        )
                ));
        flatten_fun_j_130 = fun bj_null_j_15 -> (
            bool_j_85 = false;
            fail_b_28 = bool_j_85;
            flatten_fun_j_94 = fun expr_b_27 -> (
                var_j_86 = expr_b_27;
                m_match_bool_j_88 = var_j_86 ~ any;
                m_match_bool_j_91 = var_j_86 ~ bool;
                m_match_cond_j_92 = m_match_bool_j_91 ? (
                        bool_j_93 = true
                    ) : (
                        m_match_cond_j_89 = m_match_bool_j_88 ? (
                                var_j_90 = fail_b_28
                            ) : (
                                void_j_87 = {}
                            )
                    ));
            flatten_fun_j_98 = fun bj_null_j_13 -> (
                int_j_95 = 0;
                input_j_96 = input;
                m_bl_i_333 = int_j_95 ~ int;
                m_br_i_334 = input_j_96 ~ int;
                m_b_i_335 = m_bl_i_333 and m_br_i_334;
                binop_j_97 = m_b_i_335 ? (
                        c_binop_i_336 = int_j_95 <= input_j_96
                    ) : (
                        ab_i_337 = abort
                    ));
            flatten_fun_j_100 = fun expr_b_29 -> (
                var_j_99 = expr_b_29);
            record_j_101 = {checker = flatten_fun_j_94, generator = flatten_fun_j_98, wrapper = flatten_fun_j_100};
            proj_j_102 = record_j_101.generator;
            int_j_103 = 0;
            appl_j_104 = proj_j_102 int_j_103;
            b_b_23 = appl_j_104;
            bool_j_105 = false;
            fail_b_25 = bool_j_105;
            flatten_fun_j_114 = fun expr_b_24 -> (
                var_j_106 = expr_b_24;
                m_match_bool_j_108 = var_j_106 ~ any;
                m_match_bool_j_111 = var_j_106 ~ int;
                m_match_cond_j_112 = m_match_bool_j_111 ? (
                        bool_j_113 = true
                    ) : (
                        m_match_cond_j_109 = m_match_bool_j_108 ? (
                                var_j_110 = fail_b_25
                            ) : (
                                void_j_107 = {}
                            )
                    ));
            flatten_fun_j_116 = fun bj_null_j_14 -> (
                input_j_115 = input);
            flatten_fun_j_118 = fun expr_b_26 -> (
                var_j_117 = expr_b_26);
            record_j_119 = {checker = flatten_fun_j_114, generator = flatten_fun_j_116, wrapper = flatten_fun_j_118};
            proj_j_120 = record_j_119.generator;
            int_j_121 = 0;
            appl_j_122 = proj_j_120 int_j_121;
            a_b_22 = appl_j_122;
            var_j_123 = a_b_22;
            var_j_124 = b_b_23;
            record_j_125 = {a = var_j_123, b = var_j_124};
            record_j_126 = {};
            record_j_127 = {};
            record_j_128 = {a = record_j_126, b = record_j_127};
            record_j_129 = {bj_actual_rec = record_j_125, bj_decl_lbls = record_j_128});
        flatten_fun_j_132 = fun expr_b_41 -> (
            var_j_131 = expr_b_41);
        record_j_133 = {checker = flatten_fun_j_84, generator = flatten_fun_j_130, wrapper = flatten_fun_j_132};
        proj_j_134 = record_j_133.checker;
        var_j_135 = r_b_0;
        appl_j_136 = proj_j_134 var_j_135;
        arg_check_b_1 = appl_j_136;
        var_j_137 = arg_check_b_1;
        if_j_175 = var_j_137 ? (
                bool_j_138 = false;
                fail_b_43 = bool_j_138;
                flatten_fun_j_147 = fun expr_b_42 -> (
                    var_j_139 = expr_b_42;
                    m_match_bool_j_141 = var_j_139 ~ any;
                    m_match_bool_j_144 = var_j_139 ~ int;
                    m_match_cond_j_145 = m_match_bool_j_144 ? (
                            bool_j_146 = true
                        ) : (
                            m_match_cond_j_142 = m_match_bool_j_141 ? (
                                    var_j_143 = fail_b_43
                                ) : (
                                    void_j_140 = {}
                                )
                        ));
                flatten_fun_j_149 = fun bj_null_j_16 -> (
                    input_j_148 = input);
                flatten_fun_j_151 = fun expr_b_44 -> (
                    var_j_150 = expr_b_44);
                record_j_152 = {checker = flatten_fun_j_147, generator = flatten_fun_j_149, wrapper = flatten_fun_j_151};
                proj_j_153 = record_j_152.wrapper;
                var_j_154 = r;
                proj_j_155 = var_j_154.bj_decl_lbls;
                m_match_bool_j_157 = proj_j_155 ~ any;
                m_match_bool_j_164 = proj_j_155 ~ {b, _};
                m_match_cond_j_165 = m_match_bool_j_164 ? (
                        var_j_166 = r;
                        proj_j_167 = var_j_166.bj_actual_rec;
                        proj_j_168 = proj_j_167.b
                    ) : (
                        m_match_cond_j_158 = m_match_bool_j_157 ? (
                                bool_j_159 = false;
                                assert_pred_j_160 = bool_j_159;
                                assert_res_j_161 = assert_pred_j_160 ? (
                                        assert_res_true_j_162 = {}
                                    ) : (
                                        ab_j_163 = abort
                                    )
                            ) : (
                                void_j_156 = {}
                            )
                    );
                m_i_338 = proj_j_153 ~ fun;
                appl_j_169 = m_i_338 ? (
                        c_appl_i_339 = proj_j_153 m_match_cond_j_165
                    ) : (
                        ab_i_340 = abort
                    )
            ) : (
                var_j_170 = arg_check_b_1;
                assert_pred_j_171 = var_j_170;
                assert_res_j_172 = assert_pred_j_171 ? (
                        assert_res_true_j_173 = {}
                    ) : (
                        ab_j_174 = abort
                    )
            ));
    var_j_177 = r;
    appl_j_178 = flatten_fun_j_176 var_j_177);
access_record = access_record_j_179;
flatten_fun_j_247 = fun expr_b_13 -> (
    bool_j_180 = false;
    rec_fail_b_12 = bool_j_180;
    bool_j_181 = false;
    rec_fail_b_11 = bool_j_181;
    bool_j_182 = false;
    rec_fail_b_10 = bool_j_182;
    var_j_183 = expr_b_13;
    m_match_bool_j_185 = var_j_183 ~ any;
    m_match_bool_j_188 = var_j_183 ~ {bj_actual_rec, _};
    m_match_cond_j_189 = m_match_bool_j_188 ? (
            var_j_190 = expr_b_13;
            proj_j_191 = var_j_190.bj_decl_lbls;
            m_match_bool_j_193 = proj_j_191 ~ any;
            m_match_bool_j_196 = proj_j_191 ~ {a, b, _};
            m_match_cond_j_197 = m_match_bool_j_196 ? (
                    a_j_2 = proj_j_191.a;
                    b_j_1 = proj_j_191.b;
                    var_j_198 = expr_b_13;
                    proj_j_199 = var_j_198.bj_actual_rec;
                    m_match_bool_j_201 = proj_j_199 ~ any;
                    m_match_bool_j_204 = proj_j_199 ~ {a, b, _};
                    m_match_cond_j_205 = m_match_bool_j_204 ? (
                            a = proj_j_199.a;
                            b = proj_j_199.b;
                            bool_j_206 = false;
                            fail_b_19 = bool_j_206;
                            flatten_fun_j_215 = fun expr_b_18 -> (
                                var_j_207 = expr_b_18;
                                m_match_bool_j_209 = var_j_207 ~ any;
                                m_match_bool_j_212 = var_j_207 ~ int;
                                m_match_cond_j_213 = m_match_bool_j_212 ? (
                                        bool_j_214 = true
                                    ) : (
                                        m_match_cond_j_210 = m_match_bool_j_209 ? (
                                                var_j_211 = fail_b_19
                                            ) : (
                                                void_j_208 = {}
                                            )
                                    ));
                            flatten_fun_j_217 = fun bj_null -> (
                                input_j_216 = input);
                            flatten_fun_j_219 = fun expr_b_20 -> (
                                var_j_218 = expr_b_20);
                            record_j_220 = {checker = flatten_fun_j_215, generator = flatten_fun_j_217, wrapper = flatten_fun_j_219};
                            proj_j_221 = record_j_220.checker;
                            var_j_222 = a;
                            appl_j_223 = proj_j_221 var_j_222;
                            lbl_check_b_17 = appl_j_223;
                            var_j_224 = lbl_check_b_17;
                            if_j_246 = var_j_224 ? (
                                    bool_j_225 = false;
                                    fail_b_15 = bool_j_225;
                                    flatten_fun_j_234 = fun expr_b_14 -> (
                                        var_j_226 = expr_b_14;
                                        m_match_bool_j_228 = var_j_226 ~ any;
                                        m_match_bool_j_231 = var_j_226 ~ bool;
                                        m_match_cond_j_232 = m_match_bool_j_231 ? (
                                                bool_j_233 = true
                                            ) : (
                                                m_match_cond_j_229 = m_match_bool_j_228 ? (
                                                        var_j_230 = fail_b_15
                                                    ) : (
                                                        void_j_227 = 
                                                            {}
                                                    )
                                            ));
                                    flatten_fun_j_238 = fun bj_null_j_0 -> (
                                        int_j_235 = 0;
                                        input_j_236 = input;
                                        m_bl_i_341 = int_j_235 ~ int;
                                        m_br_i_342 = input_j_236 ~ int;
                                        m_b_i_343 = m_bl_i_341 and m_br_i_342;
                                        binop_j_237 = m_b_i_343 ? (
                                                c_binop_i_344 = int_j_235 <= input_j_236
                                            ) : (
                                                ab_i_345 = abort
                                            ));
                                    flatten_fun_j_240 = fun expr_b_16 -> (
                                        var_j_239 = expr_b_16);
                                    record_j_241 = {checker = flatten_fun_j_234, generator = flatten_fun_j_238, wrapper = flatten_fun_j_240};
                                    proj_j_242 = record_j_241.checker;
                                    var_j_243 = b;
                                    appl_j_244 = proj_j_242 var_j_243
                                ) : (
                                    var_j_245 = lbl_check_b_17
                                )
                        ) : (
                            m_match_cond_j_202 = m_match_bool_j_201 ? (
                                    var_j_203 = rec_fail_b_10
                                ) : (
                                    void_j_200 = {}
                                )
                        )
                ) : (
                    m_match_cond_j_194 = m_match_bool_j_193 ? (
                            var_j_195 = rec_fail_b_11
                        ) : (
                            void_j_192 = {}
                        )
                )
        ) : (
            m_match_cond_j_186 = m_match_bool_j_185 ? (
                    var_j_187 = rec_fail_b_12
                ) : (
                    void_j_184 = {}
                )
        ));
flatten_fun_j_293 = fun bj_null_j_5 -> (
    bool_j_248 = false;
    fail_b_8 = bool_j_248;
    flatten_fun_j_257 = fun expr_b_7 -> (
        var_j_249 = expr_b_7;
        m_match_bool_j_251 = var_j_249 ~ any;
        m_match_bool_j_254 = var_j_249 ~ bool;
        m_match_cond_j_255 = m_match_bool_j_254 ? (
                bool_j_256 = true
            ) : (
                m_match_cond_j_252 = m_match_bool_j_251 ? (
                        var_j_253 = fail_b_8
                    ) : (
                        void_j_250 = {}
                    )
            ));
    flatten_fun_j_261 = fun bj_null_j_3 -> (
        int_j_258 = 0;
        input_j_259 = input;
        m_bl_i_346 = int_j_258 ~ int;
        m_br_i_347 = input_j_259 ~ int;
        m_b_i_348 = m_bl_i_346 and m_br_i_347;
        binop_j_260 = m_b_i_348 ? (
                c_binop_i_349 = int_j_258 <= input_j_259
            ) : (
                ab_i_350 = abort
            ));
    flatten_fun_j_263 = fun expr_b_9 -> (
        var_j_262 = expr_b_9);
    record_j_264 = {checker = flatten_fun_j_257, generator = flatten_fun_j_261, wrapper = flatten_fun_j_263};
    proj_j_265 = record_j_264.generator;
    int_j_266 = 0;
    appl_j_267 = proj_j_265 int_j_266;
    b_b_3 = appl_j_267;
    bool_j_268 = false;
    fail_b_5 = bool_j_268;
    flatten_fun_j_277 = fun expr_b_4 -> (
        var_j_269 = expr_b_4;
        m_match_bool_j_271 = var_j_269 ~ any;
        m_match_bool_j_274 = var_j_269 ~ int;
        m_match_cond_j_275 = m_match_bool_j_274 ? (
                bool_j_276 = true
            ) : (
                m_match_cond_j_272 = m_match_bool_j_271 ? (
                        var_j_273 = fail_b_5
                    ) : (
                        void_j_270 = {}
                    )
            ));
    flatten_fun_j_279 = fun bj_null_j_4 -> (
        input_j_278 = input);
    flatten_fun_j_281 = fun expr_b_6 -> (
        var_j_280 = expr_b_6);
    record_j_282 = {checker = flatten_fun_j_277, generator = flatten_fun_j_279, wrapper = flatten_fun_j_281};
    proj_j_283 = record_j_282.generator;
    int_j_284 = 0;
    appl_j_285 = proj_j_283 int_j_284;
    a_b_2 = appl_j_285;
    var_j_286 = a_b_2;
    var_j_287 = b_b_3;
    record_j_288 = {a = var_j_286, b = var_j_287};
    record_j_289 = {};
    record_j_290 = {};
    record_j_291 = {a = record_j_289, b = record_j_290};
    record_j_292 = {bj_actual_rec = record_j_288, bj_decl_lbls = record_j_291});
flatten_fun_j_295 = fun expr_b_21 -> (
    var_j_294 = expr_b_21);
record_j_296 = {checker = flatten_fun_j_247, generator = flatten_fun_j_293, wrapper = flatten_fun_j_295};
proj_j_297 = record_j_296.generator;
int_j_298 = 0;
appl_j_299 = proj_j_297 int_j_298;
r_b_48 = appl_j_299;
bool_j_300 = false;
fail_b_46 = bool_j_300;
flatten_fun_j_309 = fun expr_b_45 -> (
    var_j_301 = expr_b_45;
    m_match_bool_j_303 = var_j_301 ~ any;
    m_match_bool_j_306 = var_j_301 ~ int;
    m_match_cond_j_307 = m_match_bool_j_306 ? (
            bool_j_308 = true
        ) : (
            m_match_cond_j_304 = m_match_bool_j_303 ? (
                    var_j_305 = fail_b_46
                ) : (
                    void_j_302 = {}
                )
        ));
flatten_fun_j_311 = fun bj_null_j_6 -> (
    input_j_310 = input);
flatten_fun_j_313 = fun expr_b_47 -> (
    var_j_312 = expr_b_47);
record_j_314 = {checker = flatten_fun_j_309, generator = flatten_fun_j_311, wrapper = flatten_fun_j_313};
proj_j_315 = record_j_314.checker;
appl_j_318 = access_record r_b_48;
appl_j_319 = proj_j_315 appl_j_318;
check_res_b_49 = appl_j_319;
if_j_327 = check_res_b_49 ? (
        var_j_321 = access_record
    ) : (
        error_var_j_322 = check_res_b_49;
        assert_pred_j_323 = error_var_j_322;
        assert_res_j_324 = assert_pred_j_323 ? (
                assert_res_true_j_325 = {}
            ) : (
                ab_j_326 = abort
            )
    );
i_result = if_j_327