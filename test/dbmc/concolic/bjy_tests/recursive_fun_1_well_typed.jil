i_first = {};
flatten_fun_j_41 = fun makeList_j_0 -> (
    flatten_fun_j_40 = fun n -> (
        var_j_23 = makeList_j_0;
        var_j_24 = makeList_j_0;
        appl_j_25 = var_j_23 var_j_24;
        makeList = appl_j_25;
        var_j_26 = n;
        int_j_27 = 0;
        m_bl_i_370 = var_j_26 ~ int;
        m_br_i_371 = int_j_27 ~ int;
        m_b_i_372 = m_bl_i_370 and m_br_i_371;
        binop_j_28 = m_b_i_372 ? (
                c_binop_i_373 = var_j_26 == int_j_27
            ) : (
                ab_i_374 = abort
            );
        m_i_375 = binop_j_28 ~ bool;
        if_j_39 = m_i_375 ? (
                c_cond_i_384 = binop_j_28 ? (
                        record_j_29 = {};
                        record_j_30 = {j_empty = record_j_29}
                    ) : (
                        record_j_31 = {};
                        var_j_32 = n;
                        var_j_33 = makeList;
                        var_j_34 = n;
                        int_j_35 = 1;
                        m_bl_i_376 = var_j_34 ~ int;
                        m_br_i_377 = int_j_35 ~ int;
                        m_b_i_378 = m_bl_i_376 and m_br_i_377;
                        binop_j_36 = m_b_i_378 ? (
                                c_binop_i_379 = var_j_34 - int_j_35
                            ) : (
                                ab_i_380 = abort
                            );
                        m_i_381 = var_j_33 ~ fun;
                        appl_j_37 = m_i_381 ? (
                                c_appl_i_382 = var_j_33 binop_j_36
                            ) : (
                                ab_i_383 = abort
                            );
                        record_j_38 = {j_cons = record_j_31, j_head = var_j_32, j_tail = appl_j_37}
                    )
            ) : (
                ab_i_385 = abort
            )));
appl_j_44 = flatten_fun_j_41 flatten_fun_j_41;
getHead_j_65 = fun l_j_20 -> (
    bool_j_45 = false;
    fail_b_2 = bool_j_45;
    var_j_46 = l_j_20;
    m_match_bool_j_48 = var_j_46 ~ {j_head, j_tail, _};
    m_match_bool_j_51 = var_j_46 ~ {j_empty, _};
    m_match_bool_j_58 = var_j_46 ~ {bj_untouched, _};
    m_match_cond_j_59 = m_match_bool_j_58 ? (
            var_j_60 = fail_b_2;
            assert_pred_j_61 = var_j_60;
            assert_res_j_62 = assert_pred_j_61 ? (
                    assert_res_true_j_63 = {}
                ) : (
                    ab_j_64 = abort
                )
        ) : (
            m_match_cond_j_52 = m_match_bool_j_51 ? (
                    bool_j_53 = false;
                    assert_pred_j_54 = bool_j_53;
                    m_i_386 = assert_pred_j_54 ~ bool;
                    assert_res_j_55 = m_i_386 ? (
                            c_cond_i_387 = assert_pred_j_54 ? (
                                    assert_res_true_j_56 = {}
                                ) : (
                                    ab_j_57 = abort
                                )
                        ) : (
                            ab_i_388 = abort
                        )
                ) : (
                    m_match_cond_j_49 = m_match_bool_j_48 ? (
                            hd = var_j_46.j_head;
                            tl = var_j_46.j_tail;
                            var_j_50 = hd
                        ) : (
                            ab_j_47 = abort
                        )
                )
        ));
getHead = getHead_j_65;
main_j_225 = fun n_j_19 -> (
    flatten_fun_j_222 = fun n_b_0 -> (
        int_j_66 = 0;
        input_j_67 = input;
        m_bl_i_389 = int_j_66 ~ int;
        m_br_i_390 = input_j_67 ~ int;
        m_b_i_391 = m_bl_i_389 and m_br_i_390;
        binop_j_68 = m_b_i_391 ? (
                c_binop_i_392 = int_j_66 < input_j_67
            ) : (
                ab_i_393 = abort
            );
        if_j_137 = binop_j_68 ? (
                flatten_fun_j_100 = fun expr_b_21 -> (
                    bool_j_69 = false;
                    fail_b_19 = bool_j_69;
                    flatten_fun_j_78 = fun expr_b_18 -> (
                        var_j_70 = expr_b_18;
                        m_match_bool_j_72 = var_j_70 ~ any;
                        m_match_bool_j_75 = var_j_70 ~ int;
                        m_match_cond_j_76 = m_match_bool_j_75 ? (
                                bool_j_77 = true
                            ) : (
                                m_match_cond_j_73 = m_match_bool_j_72 ? (
                                        var_j_74 = fail_b_19
                                    ) : (
                                        void_j_71 = {}
                                    )
                            ));
                    flatten_fun_j_80 = fun bj_null_j_9 -> (
                        input_j_79 = input);
                    flatten_fun_j_82 = fun expr_b_20 -> (
                        var_j_81 = expr_b_20);
                    record_j_83 = {checker = flatten_fun_j_78, generator = flatten_fun_j_80, wrapper = flatten_fun_j_82};
                    proj_j_84 = record_j_83.checker;
                    var_j_85 = expr_b_21;
                    appl_j_86 = proj_j_84 var_j_85;
                    t_check_b_22 = appl_j_86;
                    var_j_87 = t_check_b_22;
                    if_j_99 = var_j_87 ? (
                            bool_j_88 = false;
                            pred_check_b_23 = bool_j_88;
                            flatten_fun_j_92 = fun a_j_10 -> (
                                int_j_89 = 0;
                                var_j_90 = a_j_10;
                                m_bl_i_394 = int_j_89 ~ int;
                                m_br_i_395 = var_j_90 ~ int;
                                m_b_i_396 = m_bl_i_394 and m_br_i_395;
                                binop_j_91 = m_b_i_396 ? (
                                        c_binop_i_397 = int_j_89 < var_j_90
                                    ) : (
                                        ab_i_398 = abort
                                    ));
                            var_j_93 = expr_b_21;
                            appl_j_94 = flatten_fun_j_92 var_j_93;
                            if_j_97 = appl_j_94 ? (
                                    bool_j_95 = true
                                ) : (
                                    var_j_96 = pred_check_b_23
                                )
                        ) : (
                            var_j_98 = t_check_b_22
                        ));
                flatten_fun_j_129 = fun bj_null_j_13 -> (
                    bool_j_101 = false;
                    fail_b_15 = bool_j_101;
                    flatten_fun_j_110 = fun expr_b_14 -> (
                        var_j_102 = expr_b_14;
                        m_match_bool_j_104 = var_j_102 ~ any;
                        m_match_bool_j_107 = var_j_102 ~ int;
                        m_match_cond_j_108 = m_match_bool_j_107 ? (
                                bool_j_109 = true
                            ) : (
                                m_match_cond_j_105 = m_match_bool_j_104 ? (
                                        var_j_106 = fail_b_15
                                    ) : (
                                        void_j_103 = {}
                                    )
                            ));
                    flatten_fun_j_112 = fun bj_null_j_11 -> (
                        input_j_111 = input);
                    flatten_fun_j_114 = fun expr_b_16 -> (
                        var_j_113 = expr_b_16);
                    record_j_115 = {checker = flatten_fun_j_110, generator = flatten_fun_j_112, wrapper = flatten_fun_j_114};
                    proj_j_116 = record_j_115.generator;
                    int_j_117 = 0;
                    appl_j_118 = proj_j_116 int_j_117;
                    candidate_b_17 = appl_j_118;
                    flatten_fun_j_122 = fun a_j_12 -> (
                        int_j_119 = 0;
                        var_j_120 = a_j_12;
                        m_bl_i_399 = int_j_119 ~ int;
                        m_br_i_400 = var_j_120 ~ int;
                        m_b_i_401 = m_bl_i_399 and m_br_i_400;
                        binop_j_121 = m_b_i_401 ? (
                                c_binop_i_402 = int_j_119 < var_j_120
                            ) : (
                                ab_i_403 = abort
                            ));
                    var_j_123 = candidate_b_17;
                    appl_j_124 = flatten_fun_j_122 var_j_123;
                    if_j_128 = appl_j_124 ? (
                            var_j_125 = candidate_b_17
                        ) : (
                            bool_j_126 = false;
                            assume_j_127 = assume bool_j_126
                        ));
                flatten_fun_j_131 = fun expr_b_24 -> (
                    var_j_130 = expr_b_24);
                record_j_132 = {checker = flatten_fun_j_100, generator = flatten_fun_j_129, wrapper = flatten_fun_j_131};
                proj_j_133 = record_j_132.checker;
                var_j_134 = n_b_0;
                m_i_404 = proj_j_133 ~ fun;
                appl_j_135 = m_i_404 ? (
                        c_appl_i_405 = proj_j_133 var_j_134
                    ) : (
                        ab_i_406 = abort
                    )
            ) : (
                bool_j_136 = true
            );
        arg_check_b_1 = if_j_137;
        var_j_138 = arg_check_b_1;
        if_j_221 = var_j_138 ? (
                flatten_fun_j_170 = fun expr_b_32 -> (
                    bool_j_139 = false;
                    fail_b_30 = bool_j_139;
                    flatten_fun_j_148 = fun expr_b_29 -> (
                        var_j_140 = expr_b_29;
                        m_match_bool_j_142 = var_j_140 ~ any;
                        m_match_bool_j_145 = var_j_140 ~ int;
                        m_match_cond_j_146 = m_match_bool_j_145 ? (
                                bool_j_147 = true
                            ) : (
                                m_match_cond_j_143 = m_match_bool_j_142 ? (
                                        var_j_144 = fail_b_30
                                    ) : (
                                        void_j_141 = {}
                                    )
                            ));
                    flatten_fun_j_150 = fun bj_null_j_14 -> (
                        input_j_149 = input);
                    flatten_fun_j_152 = fun expr_b_31 -> (
                        var_j_151 = expr_b_31);
                    record_j_153 = {checker = flatten_fun_j_148, generator = flatten_fun_j_150, wrapper = flatten_fun_j_152};
                    proj_j_154 = record_j_153.checker;
                    var_j_155 = expr_b_32;
                    appl_j_156 = proj_j_154 var_j_155;
                    t_check_b_33 = appl_j_156;
                    var_j_157 = t_check_b_33;
                    if_j_169 = var_j_157 ? (
                            bool_j_158 = false;
                            pred_check_b_34 = bool_j_158;
                            flatten_fun_j_162 = fun a_j_15 -> (
                                int_j_159 = 0;
                                var_j_160 = a_j_15;
                                m_bl_i_407 = int_j_159 ~ int;
                                m_br_i_408 = var_j_160 ~ int;
                                m_b_i_409 = m_bl_i_407 and m_br_i_408;
                                binop_j_161 = m_b_i_409 ? (
                                        c_binop_i_410 = int_j_159 < var_j_160
                                    ) : (
                                        ab_i_411 = abort
                                    ));
                            var_j_163 = expr_b_32;
                            appl_j_164 = flatten_fun_j_162 var_j_163;
                            if_j_167 = appl_j_164 ? (
                                    bool_j_165 = true
                                ) : (
                                    var_j_166 = pred_check_b_34
                                )
                        ) : (
                            var_j_168 = t_check_b_33
                        ));
                flatten_fun_j_199 = fun bj_null_j_18 -> (
                    bool_j_171 = false;
                    fail_b_26 = bool_j_171;
                    flatten_fun_j_180 = fun expr_b_25 -> (
                        var_j_172 = expr_b_25;
                        m_match_bool_j_174 = var_j_172 ~ any;
                        m_match_bool_j_177 = var_j_172 ~ int;
                        m_match_cond_j_178 = m_match_bool_j_177 ? (
                                bool_j_179 = true
                            ) : (
                                m_match_cond_j_175 = m_match_bool_j_174 ? (
                                        var_j_176 = fail_b_26
                                    ) : (
                                        void_j_173 = {}
                                    )
                            ));
                    flatten_fun_j_182 = fun bj_null_j_16 -> (
                        input_j_181 = input);
                    flatten_fun_j_184 = fun expr_b_27 -> (
                        var_j_183 = expr_b_27);
                    record_j_185 = {checker = flatten_fun_j_180, generator = flatten_fun_j_182, wrapper = flatten_fun_j_184};
                    proj_j_186 = record_j_185.generator;
                    int_j_187 = 0;
                    appl_j_188 = proj_j_186 int_j_187;
                    candidate_b_28 = appl_j_188;
                    flatten_fun_j_192 = fun a_j_17 -> (
                        int_j_189 = 0;
                        var_j_190 = a_j_17;
                        m_bl_i_412 = int_j_189 ~ int;
                        m_br_i_413 = var_j_190 ~ int;
                        m_b_i_414 = m_bl_i_412 and m_br_i_413;
                        binop_j_191 = m_b_i_414 ? (
                                c_binop_i_415 = int_j_189 < var_j_190
                            ) : (
                                ab_i_416 = abort
                            ));
                    var_j_193 = candidate_b_28;
                    appl_j_194 = flatten_fun_j_192 var_j_193;
                    if_j_198 = appl_j_194 ? (
                            var_j_195 = candidate_b_28
                        ) : (
                            bool_j_196 = false;
                            assume_j_197 = assume bool_j_196
                        ));
                flatten_fun_j_201 = fun expr_b_35 -> (
                    var_j_200 = expr_b_35);
                record_j_202 = {checker = flatten_fun_j_170, generator = flatten_fun_j_199, wrapper = flatten_fun_j_201};
                proj_j_203 = record_j_202.wrapper;
                var_j_204 = appl_j_44;
                var_j_205 = n_j_19;
                m_i_417 = var_j_204 ~ fun;
                appl_j_206 = m_i_417 ? (
                        c_appl_i_418 = var_j_204 var_j_205
                    ) : (
                        ab_i_419 = abort
                    );
                l = appl_j_206;
                int_j_207 = 0;
                var_j_208 = n_j_19;
                m_bl_i_420 = int_j_207 ~ int;
                m_br_i_421 = var_j_208 ~ int;
                m_b_i_422 = m_bl_i_420 and m_br_i_421;
                binop_j_209 = m_b_i_422 ? (
                        c_binop_i_423 = int_j_207 < var_j_208
                    ) : (
                        ab_i_424 = abort
                    );
                m_i_425 = binop_j_209 ~ bool;
                if_j_214 = m_i_425 ? (
                        c_cond_i_429 = binop_j_209 ? (
                                var_j_210 = getHead;
                                var_j_211 = l;
                                m_i_426 = var_j_210 ~ fun;
                                appl_j_212 = m_i_426 ? (
                                        c_appl_i_427 = var_j_210 var_j_211
                                    ) : (
                                        ab_i_428 = abort
                                    )
                            ) : (
                                int_j_213 = 0
                            )
                    ) : (
                        ab_i_430 = abort
                    );
                m_i_431 = proj_j_203 ~ fun;
                appl_j_215 = m_i_431 ? (
                        c_appl_i_432 = proj_j_203 if_j_214
                    ) : (
                        ab_i_433 = abort
                    )
            ) : (
                var_j_216 = arg_check_b_1;
                assert_pred_j_217 = var_j_216;
                assert_res_j_218 = assert_pred_j_217 ? (
                        assert_res_true_j_219 = {}
                    ) : (
                        ab_j_220 = abort
                    )
            ));
    var_j_223 = n_j_19;
    appl_j_224 = flatten_fun_j_222 var_j_223);
main = main_j_225;
flatten_fun_j_257 = fun expr_b_10 -> (
    bool_j_226 = false;
    fail_b_8 = bool_j_226;
    flatten_fun_j_235 = fun expr_b_7 -> (
        var_j_227 = expr_b_7;
        m_match_bool_j_229 = var_j_227 ~ any;
        m_match_bool_j_232 = var_j_227 ~ int;
        m_match_cond_j_233 = m_match_bool_j_232 ? (
                bool_j_234 = true
            ) : (
                m_match_cond_j_230 = m_match_bool_j_229 ? (
                        var_j_231 = fail_b_8
                    ) : (
                        void_j_228 = {}
                    )
            ));
    flatten_fun_j_237 = fun bj_null -> (
        input_j_236 = input);
    flatten_fun_j_239 = fun expr_b_9 -> (
        var_j_238 = expr_b_9);
    record_j_240 = {checker = flatten_fun_j_235, generator = flatten_fun_j_237, wrapper = flatten_fun_j_239};
    proj_j_241 = record_j_240.checker;
    var_j_242 = expr_b_10;
    appl_j_243 = proj_j_241 var_j_242;
    t_check_b_11 = appl_j_243;
    var_j_244 = t_check_b_11;
    if_j_256 = var_j_244 ? (
            bool_j_245 = false;
            pred_check_b_12 = bool_j_245;
            flatten_fun_j_249 = fun a -> (
                int_j_246 = 0;
                var_j_247 = a;
                m_bl_i_434 = int_j_246 ~ int;
                m_br_i_435 = var_j_247 ~ int;
                m_b_i_436 = m_bl_i_434 and m_br_i_435;
                binop_j_248 = m_b_i_436 ? (
                        c_binop_i_437 = int_j_246 < var_j_247
                    ) : (
                        ab_i_438 = abort
                    ));
            var_j_250 = expr_b_10;
            appl_j_251 = flatten_fun_j_249 var_j_250;
            if_j_254 = appl_j_251 ? (
                    bool_j_252 = true
                ) : (
                    var_j_253 = pred_check_b_12
                )
        ) : (
            var_j_255 = t_check_b_11
        ));
flatten_fun_j_286 = fun bj_null_j_3 -> (
    bool_j_258 = false;
    fail_b_4 = bool_j_258;
    flatten_fun_j_267 = fun expr_b_3 -> (
        var_j_259 = expr_b_3;
        m_match_bool_j_261 = var_j_259 ~ any;
        m_match_bool_j_264 = var_j_259 ~ int;
        m_match_cond_j_265 = m_match_bool_j_264 ? (
                bool_j_266 = true
            ) : (
                m_match_cond_j_262 = m_match_bool_j_261 ? (
                        var_j_263 = fail_b_4
                    ) : (
                        void_j_260 = {}
                    )
            ));
    flatten_fun_j_269 = fun bj_null_j_1 -> (
        input_j_268 = input);
    flatten_fun_j_271 = fun expr_b_5 -> (
        var_j_270 = expr_b_5);
    record_j_272 = {checker = flatten_fun_j_267, generator = flatten_fun_j_269, wrapper = flatten_fun_j_271};
    proj_j_273 = record_j_272.generator;
    int_j_274 = 0;
    appl_j_275 = proj_j_273 int_j_274;
    candidate_b_6 = appl_j_275;
    flatten_fun_j_279 = fun a_j_2 -> (
        int_j_276 = 0;
        var_j_277 = a_j_2;
        m_bl_i_439 = int_j_276 ~ int;
        m_br_i_440 = var_j_277 ~ int;
        m_b_i_441 = m_bl_i_439 and m_br_i_440;
        binop_j_278 = m_b_i_441 ? (
                c_binop_i_442 = int_j_276 < var_j_277
            ) : (
                ab_i_443 = abort
            ));
    var_j_280 = candidate_b_6;
    appl_j_281 = flatten_fun_j_279 var_j_280;
    if_j_285 = appl_j_281 ? (
            var_j_282 = candidate_b_6
        ) : (
            bool_j_283 = false;
            assume_j_284 = assume bool_j_283
        ));
flatten_fun_j_288 = fun expr_b_13 -> (
    var_j_287 = expr_b_13);
record_j_289 = {checker = flatten_fun_j_257, generator = flatten_fun_j_286, wrapper = flatten_fun_j_288};
proj_j_290 = record_j_289.generator;
int_j_291 = 0;
appl_j_292 = proj_j_290 int_j_291;
n_b_47 = appl_j_292;
flatten_fun_j_324 = fun expr_b_43 -> (
    bool_j_293 = false;
    fail_b_41 = bool_j_293;
    flatten_fun_j_302 = fun expr_b_40 -> (
        var_j_294 = expr_b_40;
        m_match_bool_j_296 = var_j_294 ~ any;
        m_match_bool_j_299 = var_j_294 ~ int;
        m_match_cond_j_300 = m_match_bool_j_299 ? (
                bool_j_301 = true
            ) : (
                m_match_cond_j_297 = m_match_bool_j_296 ? (
                        var_j_298 = fail_b_41
                    ) : (
                        void_j_295 = {}
                    )
            ));
    flatten_fun_j_304 = fun bj_null_j_4 -> (
        input_j_303 = input);
    flatten_fun_j_306 = fun expr_b_42 -> (
        var_j_305 = expr_b_42);
    record_j_307 = {checker = flatten_fun_j_302, generator = flatten_fun_j_304, wrapper = flatten_fun_j_306};
    proj_j_308 = record_j_307.checker;
    var_j_309 = expr_b_43;
    appl_j_310 = proj_j_308 var_j_309;
    t_check_b_44 = appl_j_310;
    var_j_311 = t_check_b_44;
    if_j_323 = var_j_311 ? (
            bool_j_312 = false;
            pred_check_b_45 = bool_j_312;
            flatten_fun_j_316 = fun a_j_5 -> (
                int_j_313 = 0;
                var_j_314 = a_j_5;
                m_bl_i_444 = int_j_313 ~ int;
                m_br_i_445 = var_j_314 ~ int;
                m_b_i_446 = m_bl_i_444 and m_br_i_445;
                binop_j_315 = m_b_i_446 ? (
                        c_binop_i_447 = int_j_313 < var_j_314
                    ) : (
                        ab_i_448 = abort
                    ));
            var_j_317 = expr_b_43;
            appl_j_318 = flatten_fun_j_316 var_j_317;
            if_j_321 = appl_j_318 ? (
                    bool_j_319 = true
                ) : (
                    var_j_320 = pred_check_b_45
                )
        ) : (
            var_j_322 = t_check_b_44
        ));
flatten_fun_j_353 = fun bj_null_j_8 -> (
    bool_j_325 = false;
    fail_b_37 = bool_j_325;
    flatten_fun_j_334 = fun expr_b_36 -> (
        var_j_326 = expr_b_36;
        m_match_bool_j_328 = var_j_326 ~ any;
        m_match_bool_j_331 = var_j_326 ~ int;
        m_match_cond_j_332 = m_match_bool_j_331 ? (
                bool_j_333 = true
            ) : (
                m_match_cond_j_329 = m_match_bool_j_328 ? (
                        var_j_330 = fail_b_37
                    ) : (
                        void_j_327 = {}
                    )
            ));
    flatten_fun_j_336 = fun bj_null_j_6 -> (
        input_j_335 = input);
    flatten_fun_j_338 = fun expr_b_38 -> (
        var_j_337 = expr_b_38);
    record_j_339 = {checker = flatten_fun_j_334, generator = flatten_fun_j_336, wrapper = flatten_fun_j_338};
    proj_j_340 = record_j_339.generator;
    int_j_341 = 0;
    appl_j_342 = proj_j_340 int_j_341;
    candidate_b_39 = appl_j_342;
    flatten_fun_j_346 = fun a_j_7 -> (
        int_j_343 = 0;
        var_j_344 = a_j_7;
        m_bl_i_449 = int_j_343 ~ int;
        m_br_i_450 = var_j_344 ~ int;
        m_b_i_451 = m_bl_i_449 and m_br_i_450;
        binop_j_345 = m_b_i_451 ? (
                c_binop_i_452 = int_j_343 < var_j_344
            ) : (
                ab_i_453 = abort
            ));
    var_j_347 = candidate_b_39;
    appl_j_348 = flatten_fun_j_346 var_j_347;
    if_j_352 = appl_j_348 ? (
            var_j_349 = candidate_b_39
        ) : (
            bool_j_350 = false;
            assume_j_351 = assume bool_j_350
        ));
flatten_fun_j_355 = fun expr_b_46 -> (
    var_j_354 = expr_b_46);
record_j_356 = {checker = flatten_fun_j_324, generator = flatten_fun_j_353, wrapper = flatten_fun_j_355};
proj_j_357 = record_j_356.checker;
appl_j_360 = main n_b_47;
appl_j_361 = proj_j_357 appl_j_360;
check_res_b_48 = appl_j_361;
if_j_369 = check_res_b_48 ? (
        var_j_363 = main
    ) : (
        error_var_j_364 = check_res_b_48;
        assert_pred_j_365 = error_var_j_364;
        assert_res_j_366 = assert_pred_j_365 ? (
                assert_res_true_j_367 = {}
            ) : (
                ab_j_368 = abort
            )
    );
i_result = if_j_369