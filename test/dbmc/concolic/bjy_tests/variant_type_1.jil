bool_j_2 = true;
record_j_3 = {};
record_j_4 = {j_value = bool_j_2, j_variant_A = record_j_3};
x = record_j_4;
flatten_fun_j_29 = fun expr_b_5 -> (
    bool_j_5 = false;
    variant_fail_b_4 = bool_j_5;
    var_j_6 = expr_b_5;
    m_match_bool_j_8 = var_j_6 ~ any;
    m_match_bool_j_11 = var_j_6 ~ {j_value, j_variant_A, _};
    m_match_cond_j_12 = m_match_bool_j_11 ? (
            v_expr_b_6 = var_j_6.j_value;
            bool_j_13 = false;
            fail_b_8 = bool_j_13;
            flatten_fun_j_22 = fun expr_b_7 -> (
                var_j_14 = expr_b_7;
                m_match_bool_j_16 = var_j_14 ~ any;
                m_match_bool_j_19 = var_j_14 ~ int;
                m_match_cond_j_20 = m_match_bool_j_19 ? (
                        bool_j_21 = true
                    ) : (
                        m_match_cond_j_17 = m_match_bool_j_16 ? (
                                var_j_18 = fail_b_8
                            ) : (
                                void_j_15 = {}
                            )
                    ));
            flatten_fun_j_24 = fun bj_null -> (
                input_j_23 = input);
            record_j_25 = {checker = flatten_fun_j_22, generator = flatten_fun_j_24};
            proj_j_26 = record_j_25.checker;
            var_j_27 = v_expr_b_6;
            appl_j_28 = proj_j_26 var_j_27
        ) : (
            m_match_cond_j_9 = m_match_bool_j_8 ? (
                    var_j_10 = variant_fail_b_4
                ) : (
                    void_j_7 = {}
                )
        ));
bool_j_30 = false;
fail_b_1 = bool_j_30;
flatten_fun_j_39 = fun expr_b_0 -> (
    var_j_31 = expr_b_0;
    m_match_bool_j_33 = var_j_31 ~ any;
    m_match_bool_j_36 = var_j_31 ~ int;
    m_match_cond_j_37 = m_match_bool_j_36 ? (
            bool_j_38 = true
        ) : (
            m_match_cond_j_34 = m_match_bool_j_33 ? (
                    var_j_35 = fail_b_1
                ) : (
                    void_j_32 = {}
                )
        ));
flatten_fun_j_41 = fun bj_null_j_0 -> (
    input_j_40 = input);
record_j_42 = {checker = flatten_fun_j_39, generator = flatten_fun_j_41};
proj_j_43 = record_j_42.generator;
int_j_44 = 0;
appl_j_45 = proj_j_43 int_j_44;
record_j_46 = {};
record_j_47 = {j_value = appl_j_45, j_variant_A = record_j_46};
v_expr_b_3 = record_j_47;
flatten_fun_j_49 = fun bj_null_j_1 -> (
    var_j_48 = v_expr_b_3);
record_j_50 = {checker = flatten_fun_j_29, generator = flatten_fun_j_49};
proj_j_51 = record_j_50.checker;
bool_j_52 = true;
record_j_53 = {};
record_j_54 = {j_value = bool_j_52, j_variant_A = record_j_53};
appl_j_55 = proj_j_51 record_j_54;
check_res_b_11 = appl_j_55;
if_j_63 = check_res_b_11 ? (
        var_j_57 = x
    ) : (
        error_var_j_58 = check_res_b_11;
        assert_pred_j_59 = error_var_j_58;
        assert_res_j_60 = assert_pred_j_59 ? (
                assert_res_true_j_61 = {}
            ) : (
                ab_j_62 = abort
            )
    );
i_result = if_j_63