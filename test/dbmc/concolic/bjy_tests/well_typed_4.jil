i_first = {};
intId_j_58 = fun x -> (
    flatten_fun_j_55 = fun x_b_0 -> (
        int_j_3 = 0;
        input_j_4 = input;
        m_bl_i_107 = int_j_3 ~ int;
        m_br_i_108 = input_j_4 ~ int;
        m_b_i_109 = m_bl_i_107 and m_br_i_108;
        binop_j_5 = m_b_i_109 ? (
                c_binop_i_110 = int_j_3 < input_j_4
            ) : (
                ab_i_111 = abort
            );
        if_j_25 = binop_j_5 ? (
                bool_j_6 = false;
                fail_b_6 = bool_j_6;
                flatten_fun_j_15 = fun expr_b_5 -> (
                    var_j_7 = expr_b_5;
                    m_match_bool_j_9 = var_j_7 ~ any;
                    m_match_bool_j_12 = var_j_7 ~ int;
                    m_match_cond_j_13 = m_match_bool_j_12 ? (
                            bool_j_14 = true
                        ) : (
                            m_match_cond_j_10 = m_match_bool_j_9 ? (
                                    var_j_11 = fail_b_6
                                ) : (
                                    void_j_8 = {}
                                )
                        ));
                flatten_fun_j_17 = fun bj_null_j_1 -> (
                    input_j_16 = input);
                flatten_fun_j_19 = fun expr_b_7 -> (
                    var_j_18 = expr_b_7);
                record_j_20 = {checker = flatten_fun_j_15, generator = flatten_fun_j_17, wrapper = flatten_fun_j_19};
                proj_j_21 = record_j_20.checker;
                var_j_22 = x_b_0;
                m_i_112 = proj_j_21 ~ fun;
                appl_j_23 = m_i_112 ? (
                        c_appl_i_113 = proj_j_21 var_j_22
                    ) : (
                        ab_i_114 = abort
                    )
            ) : (
                bool_j_24 = true
            );
        arg_check_b_1 = if_j_25;
        var_j_26 = arg_check_b_1;
        if_j_54 = var_j_26 ? (
                bool_j_27 = false;
                fail_b_9 = bool_j_27;
                flatten_fun_j_36 = fun expr_b_8 -> (
                    var_j_28 = expr_b_8;
                    m_match_bool_j_30 = var_j_28 ~ any;
                    m_match_bool_j_33 = var_j_28 ~ int;
                    m_match_cond_j_34 = m_match_bool_j_33 ? (
                            bool_j_35 = true
                        ) : (
                            m_match_cond_j_31 = m_match_bool_j_30 ? (
                                    var_j_32 = fail_b_9
                                ) : (
                                    void_j_29 = {}
                                )
                        ));
                flatten_fun_j_38 = fun bj_null_j_2 -> (
                    input_j_37 = input);
                flatten_fun_j_40 = fun expr_b_10 -> (
                    var_j_39 = expr_b_10);
                record_j_41 = {checker = flatten_fun_j_36, generator = flatten_fun_j_38, wrapper = flatten_fun_j_40};
                proj_j_42 = record_j_41.wrapper;
                intId2_j_44 = fun y -> (
                    var_j_43 = y);
                intId2 = intId2_j_44;
                var_j_45 = intId2;
                var_j_46 = x;
                m_i_115 = var_j_45 ~ fun;
                appl_j_47 = m_i_115 ? (
                        c_appl_i_116 = var_j_45 var_j_46
                    ) : (
                        ab_i_117 = abort
                    );
                m_i_118 = proj_j_42 ~ fun;
                appl_j_48 = m_i_118 ? (
                        c_appl_i_119 = proj_j_42 appl_j_47
                    ) : (
                        ab_i_120 = abort
                    )
            ) : (
                var_j_49 = arg_check_b_1;
                assert_pred_j_50 = var_j_49;
                assert_res_j_51 = assert_pred_j_50 ? (
                        assert_res_true_j_52 = {}
                    ) : (
                        ab_j_53 = abort
                    )
            ));
    var_j_56 = x;
    appl_j_57 = flatten_fun_j_55 var_j_56);
intId = intId_j_58;
bool_j_59 = false;
fail_b_3 = bool_j_59;
flatten_fun_j_68 = fun expr_b_2 -> (
    var_j_60 = expr_b_2;
    m_match_bool_j_62 = var_j_60 ~ any;
    m_match_bool_j_65 = var_j_60 ~ int;
    m_match_cond_j_66 = m_match_bool_j_65 ? (
            bool_j_67 = true
        ) : (
            m_match_cond_j_63 = m_match_bool_j_62 ? (
                    var_j_64 = fail_b_3
                ) : (
                    void_j_61 = {}
                )
        ));
flatten_fun_j_70 = fun bj_null -> (
    input_j_69 = input);
flatten_fun_j_72 = fun expr_b_4 -> (
    var_j_71 = expr_b_4);
record_j_73 = {checker = flatten_fun_j_68, generator = flatten_fun_j_70, wrapper = flatten_fun_j_72};
proj_j_74 = record_j_73.generator;
int_j_75 = 0;
appl_j_76 = proj_j_74 int_j_75;
x_b_14 = appl_j_76;
bool_j_77 = false;
fail_b_12 = bool_j_77;
flatten_fun_j_86 = fun expr_b_11 -> (
    var_j_78 = expr_b_11;
    m_match_bool_j_80 = var_j_78 ~ any;
    m_match_bool_j_83 = var_j_78 ~ int;
    m_match_cond_j_84 = m_match_bool_j_83 ? (
            bool_j_85 = true
        ) : (
            m_match_cond_j_81 = m_match_bool_j_80 ? (
                    var_j_82 = fail_b_12
                ) : (
                    void_j_79 = {}
                )
        ));
flatten_fun_j_88 = fun bj_null_j_0 -> (
    input_j_87 = input);
flatten_fun_j_90 = fun expr_b_13 -> (
    var_j_89 = expr_b_13);
record_j_91 = {checker = flatten_fun_j_86, generator = flatten_fun_j_88, wrapper = flatten_fun_j_90};
proj_j_92 = record_j_91.checker;
appl_j_95 = intId x_b_14;
appl_j_96 = proj_j_92 appl_j_95;
check_res_b_15 = appl_j_96;
if_j_106 = check_res_b_15 ? (
        var_j_98 = intId;
        int_j_99 = 5;
        m_i_121 = var_j_98 ~ fun;
        appl_j_100 = m_i_121 ? (
                c_appl_i_122 = var_j_98 int_j_99
            ) : (
                ab_i_123 = abort
            )
    ) : (
        error_var_j_101 = check_res_b_15;
        assert_pred_j_102 = error_var_j_101;
        assert_res_j_103 = assert_pred_j_102 ? (
                assert_res_true_j_104 = {}
            ) : (
                ab_j_105 = abort
            )
    );
i_result = if_j_106