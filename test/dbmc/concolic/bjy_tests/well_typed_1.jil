i_first = {};
id_j_2 = fun x -> (
    var_j_1 = x);
id = id_j_2;
bool_j_3 = false;
fail_b_1 = bool_j_3;
flatten_fun_j_12 = fun expr_b_0 -> (
    var_j_4 = expr_b_0;
    m_match_bool_j_6 = var_j_4 ~ any;
    m_match_bool_j_9 = var_j_4 ~ int;
    m_match_cond_j_10 = m_match_bool_j_9 ? (
            bool_j_11 = true
        ) : (
            m_match_cond_j_7 = m_match_bool_j_6 ? (
                    var_j_8 = fail_b_1
                ) : (
                    void_j_5 = {}
                )
        ));
flatten_fun_j_14 = fun bj_null -> (
    input_j_13 = input);
record_j_15 = {checker = flatten_fun_j_12, generator = flatten_fun_j_14};
proj_j_16 = record_j_15.generator;
int_j_17 = 0;
appl_j_18 = proj_j_16 int_j_17;
x_b_6 = appl_j_18;
bool_j_19 = false;
fail_b_4 = bool_j_19;
flatten_fun_j_28 = fun expr_b_3 -> (
    var_j_20 = expr_b_3;
    m_match_bool_j_22 = var_j_20 ~ any;
    m_match_bool_j_25 = var_j_20 ~ int;
    m_match_cond_j_26 = m_match_bool_j_25 ? (
            bool_j_27 = true
        ) : (
            m_match_cond_j_23 = m_match_bool_j_22 ? (
                    var_j_24 = fail_b_4
                ) : (
                    void_j_21 = {}
                )
        ));
flatten_fun_j_30 = fun bj_null_j_0 -> (
    input_j_29 = input);
record_j_31 = {checker = flatten_fun_j_28, generator = flatten_fun_j_30};
proj_j_32 = record_j_31.checker;
appl_j_35 = id x_b_6;
appl_j_36 = proj_j_32 appl_j_35;
check_res_b_7 = appl_j_36;
if_j_46 = check_res_b_7 ? (
        var_j_38 = id;
        int_j_39 = 5;
        m_i_47 = var_j_38 ~ fun;
        appl_j_40 = m_i_47 ? (
                c_appl_i_48 = var_j_38 int_j_39
            ) : (
                ab_i_49 = abort
            )
    ) : (
        error_var_j_41 = check_res_b_7;
        assert_pred_j_42 = error_var_j_41;
        assert_res_j_43 = assert_pred_j_42 ? (
                assert_res_true_j_44 = {}
            ) : (
                ab_j_45 = abort
            )
    );
i_result = if_j_46