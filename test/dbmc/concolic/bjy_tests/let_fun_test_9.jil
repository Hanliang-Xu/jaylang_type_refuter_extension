i_first = {};
isNeg_j_15 = fun n_j_11 -> (
    var_j_12 = n_j_11;
    int_j_13 = 0;
    m_bl_i_289 = var_j_12 ~ int;
    m_br_i_290 = int_j_13 ~ int;
    m_b_i_291 = m_bl_i_289 and m_br_i_290;
    binop_j_14 = m_b_i_291 ? (
            c_binop_i_292 = var_j_12 <= int_j_13
        ) : (
            ab_i_293 = abort
        ));
isNeg = isNeg_j_15;
isPos_j_19 = fun n -> (
    int_j_16 = 0;
    var_j_17 = n;
    m_bl_i_294 = int_j_16 ~ int;
    m_br_i_295 = var_j_17 ~ int;
    m_b_i_296 = m_bl_i_294 and m_br_i_295;
    binop_j_18 = m_b_i_296 ? (
            c_binop_i_297 = int_j_16 < var_j_17
        ) : (
            ab_i_298 = abort
        ));
isPos = isPos_j_19;
negation_j_156 = fun x -> (
    flatten_fun_j_153 = fun x_b_0 -> (
        flatten_fun_j_48 = fun expr_b_20 -> (
            bool_j_20 = false;
            fail_b_18 = bool_j_20;
            flatten_fun_j_29 = fun expr_b_17 -> (
                var_j_21 = expr_b_17;
                m_match_bool_j_23 = var_j_21 ~ any;
                m_match_bool_j_26 = var_j_21 ~ int;
                m_match_cond_j_27 = m_match_bool_j_26 ? (
                        bool_j_28 = true
                    ) : (
                        m_match_cond_j_24 = m_match_bool_j_23 ? (
                                var_j_25 = fail_b_18
                            ) : (
                                void_j_22 = {}
                            )
                    ));
            flatten_fun_j_31 = fun bj_null_j_5 -> (
                input_j_30 = input);
            flatten_fun_j_33 = fun expr_b_19 -> (
                var_j_32 = expr_b_19);
            record_j_34 = {checker = flatten_fun_j_29, generator = flatten_fun_j_31, wrapper = flatten_fun_j_33};
            proj_j_35 = record_j_34.checker;
            var_j_36 = expr_b_20;
            appl_j_37 = proj_j_35 var_j_36;
            t_check_b_21 = appl_j_37;
            var_j_38 = t_check_b_21;
            if_j_47 = var_j_38 ? (
                    bool_j_39 = false;
                    pred_check_b_22 = bool_j_39;
                    var_j_40 = isNeg;
                    var_j_41 = expr_b_20;
                    appl_j_42 = var_j_40 var_j_41;
                    if_j_45 = appl_j_42 ? (
                            bool_j_43 = true
                        ) : (
                            var_j_44 = pred_check_b_22
                        )
                ) : (
                    var_j_46 = t_check_b_21
                ));
        flatten_fun_j_74 = fun bj_null_j_7 -> (
            bool_j_49 = false;
            fail_b_14 = bool_j_49;
            flatten_fun_j_58 = fun expr_b_13 -> (
                var_j_50 = expr_b_13;
                m_match_bool_j_52 = var_j_50 ~ any;
                m_match_bool_j_55 = var_j_50 ~ int;
                m_match_cond_j_56 = m_match_bool_j_55 ? (
                        bool_j_57 = true
                    ) : (
                        m_match_cond_j_53 = m_match_bool_j_52 ? (
                                var_j_54 = fail_b_14
                            ) : (
                                void_j_51 = {}
                            )
                    ));
            flatten_fun_j_60 = fun bj_null_j_6 -> (
                input_j_59 = input);
            flatten_fun_j_62 = fun expr_b_15 -> (
                var_j_61 = expr_b_15);
            record_j_63 = {checker = flatten_fun_j_58, generator = flatten_fun_j_60, wrapper = flatten_fun_j_62};
            proj_j_64 = record_j_63.generator;
            int_j_65 = 0;
            appl_j_66 = proj_j_64 int_j_65;
            candidate_b_16 = appl_j_66;
            var_j_67 = isNeg;
            var_j_68 = candidate_b_16;
            appl_j_69 = var_j_67 var_j_68;
            if_j_73 = appl_j_69 ? (
                    var_j_70 = candidate_b_16
                ) : (
                    bool_j_71 = false;
                    assume_j_72 = assume bool_j_71
                ));
        flatten_fun_j_76 = fun expr_b_23 -> (
            var_j_75 = expr_b_23);
        record_j_77 = {checker = flatten_fun_j_48, generator = flatten_fun_j_74, wrapper = flatten_fun_j_76};
        proj_j_78 = record_j_77.checker;
        var_j_79 = x_b_0;
        appl_j_80 = proj_j_78 var_j_79;
        arg_check_b_1 = appl_j_80;
        var_j_81 = arg_check_b_1;
        if_j_152 = var_j_81 ? (
                flatten_fun_j_110 = fun expr_b_31 -> (
                    bool_j_82 = false;
                    fail_b_29 = bool_j_82;
                    flatten_fun_j_91 = fun expr_b_28 -> (
                        var_j_83 = expr_b_28;
                        m_match_bool_j_85 = var_j_83 ~ any;
                        m_match_bool_j_88 = var_j_83 ~ int;
                        m_match_cond_j_89 = m_match_bool_j_88 ? (
                                bool_j_90 = true
                            ) : (
                                m_match_cond_j_86 = m_match_bool_j_85 ? (
                                        var_j_87 = fail_b_29
                                    ) : (
                                        void_j_84 = {}
                                    )
                            ));
                    flatten_fun_j_93 = fun bj_null_j_8 -> (
                        input_j_92 = input);
                    flatten_fun_j_95 = fun expr_b_30 -> (
                        var_j_94 = expr_b_30);
                    record_j_96 = {checker = flatten_fun_j_91, generator = flatten_fun_j_93, wrapper = flatten_fun_j_95};
                    proj_j_97 = record_j_96.checker;
                    var_j_98 = expr_b_31;
                    appl_j_99 = proj_j_97 var_j_98;
                    t_check_b_32 = appl_j_99;
                    var_j_100 = t_check_b_32;
                    if_j_109 = var_j_100 ? (
                            bool_j_101 = false;
                            pred_check_b_33 = bool_j_101;
                            var_j_102 = isPos;
                            var_j_103 = expr_b_31;
                            appl_j_104 = var_j_102 var_j_103;
                            if_j_107 = appl_j_104 ? (
                                    bool_j_105 = true
                                ) : (
                                    var_j_106 = pred_check_b_33
                                )
                        ) : (
                            var_j_108 = t_check_b_32
                        ));
                flatten_fun_j_136 = fun bj_null_j_10 -> (
                    bool_j_111 = false;
                    fail_b_25 = bool_j_111;
                    flatten_fun_j_120 = fun expr_b_24 -> (
                        var_j_112 = expr_b_24;
                        m_match_bool_j_114 = var_j_112 ~ any;
                        m_match_bool_j_117 = var_j_112 ~ int;
                        m_match_cond_j_118 = m_match_bool_j_117 ? (
                                bool_j_119 = true
                            ) : (
                                m_match_cond_j_115 = m_match_bool_j_114 ? (
                                        var_j_116 = fail_b_25
                                    ) : (
                                        void_j_113 = {}
                                    )
                            ));
                    flatten_fun_j_122 = fun bj_null_j_9 -> (
                        input_j_121 = input);
                    flatten_fun_j_124 = fun expr_b_26 -> (
                        var_j_123 = expr_b_26);
                    record_j_125 = {checker = flatten_fun_j_120, generator = flatten_fun_j_122, wrapper = flatten_fun_j_124};
                    proj_j_126 = record_j_125.generator;
                    int_j_127 = 0;
                    appl_j_128 = proj_j_126 int_j_127;
                    candidate_b_27 = appl_j_128;
                    var_j_129 = isPos;
                    var_j_130 = candidate_b_27;
                    appl_j_131 = var_j_129 var_j_130;
                    if_j_135 = appl_j_131 ? (
                            var_j_132 = candidate_b_27
                        ) : (
                            bool_j_133 = false;
                            assume_j_134 = assume bool_j_133
                        ));
                flatten_fun_j_138 = fun expr_b_34 -> (
                    var_j_137 = expr_b_34);
                record_j_139 = {checker = flatten_fun_j_110, generator = flatten_fun_j_136, wrapper = flatten_fun_j_138};
                proj_j_140 = record_j_139.wrapper;
                int_j_141 = 0;
                int_j_142 = 1;
                m_bl_i_299 = int_j_141 ~ int;
                m_br_i_300 = int_j_142 ~ int;
                m_b_i_301 = m_bl_i_299 and m_br_i_300;
                binop_j_143 = m_b_i_301 ? (
                        c_binop_i_302 = int_j_141 - int_j_142
                    ) : (
                        ab_i_303 = abort
                    );
                var_j_144 = x;
                m_bl_i_304 = binop_j_143 ~ int;
                m_br_i_305 = var_j_144 ~ int;
                m_b_i_306 = m_bl_i_304 and m_br_i_305;
                binop_j_145 = m_b_i_306 ? (
                        c_binop_i_307 = binop_j_143 * var_j_144
                    ) : (
                        ab_i_308 = abort
                    );
                m_i_309 = proj_j_140 ~ fun;
                appl_j_146 = m_i_309 ? (
                        c_appl_i_310 = proj_j_140 binop_j_145
                    ) : (
                        ab_i_311 = abort
                    )
            ) : (
                var_j_147 = arg_check_b_1;
                assert_pred_j_148 = var_j_147;
                assert_res_j_149 = assert_pred_j_148 ? (
                        assert_res_true_j_150 = {}
                    ) : (
                        ab_j_151 = abort
                    )
            ));
    var_j_154 = x;
    appl_j_155 = flatten_fun_j_153 var_j_154);
negation = negation_j_156;
flatten_fun_j_185 = fun expr_b_9 -> (
    bool_j_157 = false;
    fail_b_7 = bool_j_157;
    flatten_fun_j_166 = fun expr_b_6 -> (
        var_j_158 = expr_b_6;
        m_match_bool_j_160 = var_j_158 ~ any;
        m_match_bool_j_163 = var_j_158 ~ int;
        m_match_cond_j_164 = m_match_bool_j_163 ? (
                bool_j_165 = true
            ) : (
                m_match_cond_j_161 = m_match_bool_j_160 ? (
                        var_j_162 = fail_b_7
                    ) : (
                        void_j_159 = {}
                    )
            ));
    flatten_fun_j_168 = fun bj_null -> (
        input_j_167 = input);
    flatten_fun_j_170 = fun expr_b_8 -> (
        var_j_169 = expr_b_8);
    record_j_171 = {checker = flatten_fun_j_166, generator = flatten_fun_j_168, wrapper = flatten_fun_j_170};
    proj_j_172 = record_j_171.checker;
    var_j_173 = expr_b_9;
    appl_j_174 = proj_j_172 var_j_173;
    t_check_b_10 = appl_j_174;
    var_j_175 = t_check_b_10;
    if_j_184 = var_j_175 ? (
            bool_j_176 = false;
            pred_check_b_11 = bool_j_176;
            var_j_177 = isNeg;
            var_j_178 = expr_b_9;
            appl_j_179 = var_j_177 var_j_178;
            if_j_182 = appl_j_179 ? (
                    bool_j_180 = true
                ) : (
                    var_j_181 = pred_check_b_11
                )
        ) : (
            var_j_183 = t_check_b_10
        ));
flatten_fun_j_211 = fun bj_null_j_1 -> (
    bool_j_186 = false;
    fail_b_3 = bool_j_186;
    flatten_fun_j_195 = fun expr_b_2 -> (
        var_j_187 = expr_b_2;
        m_match_bool_j_189 = var_j_187 ~ any;
        m_match_bool_j_192 = var_j_187 ~ int;
        m_match_cond_j_193 = m_match_bool_j_192 ? (
                bool_j_194 = true
            ) : (
                m_match_cond_j_190 = m_match_bool_j_189 ? (
                        var_j_191 = fail_b_3
                    ) : (
                        void_j_188 = {}
                    )
            ));
    flatten_fun_j_197 = fun bj_null_j_0 -> (
        input_j_196 = input);
    flatten_fun_j_199 = fun expr_b_4 -> (
        var_j_198 = expr_b_4);
    record_j_200 = {checker = flatten_fun_j_195, generator = flatten_fun_j_197, wrapper = flatten_fun_j_199};
    proj_j_201 = record_j_200.generator;
    int_j_202 = 0;
    appl_j_203 = proj_j_201 int_j_202;
    candidate_b_5 = appl_j_203;
    var_j_204 = isNeg;
    var_j_205 = candidate_b_5;
    appl_j_206 = var_j_204 var_j_205;
    if_j_210 = appl_j_206 ? (
            var_j_207 = candidate_b_5
        ) : (
            bool_j_208 = false;
            assume_j_209 = assume bool_j_208
        ));
flatten_fun_j_213 = fun expr_b_12 -> (
    var_j_212 = expr_b_12);
record_j_214 = {checker = flatten_fun_j_185, generator = flatten_fun_j_211, wrapper = flatten_fun_j_213};
proj_j_215 = record_j_214.generator;
int_j_216 = 0;
appl_j_217 = proj_j_215 int_j_216;
x_b_46 = appl_j_217;
flatten_fun_j_246 = fun expr_b_42 -> (
    bool_j_218 = false;
    fail_b_40 = bool_j_218;
    flatten_fun_j_227 = fun expr_b_39 -> (
        var_j_219 = expr_b_39;
        m_match_bool_j_221 = var_j_219 ~ any;
        m_match_bool_j_224 = var_j_219 ~ int;
        m_match_cond_j_225 = m_match_bool_j_224 ? (
                bool_j_226 = true
            ) : (
                m_match_cond_j_222 = m_match_bool_j_221 ? (
                        var_j_223 = fail_b_40
                    ) : (
                        void_j_220 = {}
                    )
            ));
    flatten_fun_j_229 = fun bj_null_j_2 -> (
        input_j_228 = input);
    flatten_fun_j_231 = fun expr_b_41 -> (
        var_j_230 = expr_b_41);
    record_j_232 = {checker = flatten_fun_j_227, generator = flatten_fun_j_229, wrapper = flatten_fun_j_231};
    proj_j_233 = record_j_232.checker;
    var_j_234 = expr_b_42;
    appl_j_235 = proj_j_233 var_j_234;
    t_check_b_43 = appl_j_235;
    var_j_236 = t_check_b_43;
    if_j_245 = var_j_236 ? (
            bool_j_237 = false;
            pred_check_b_44 = bool_j_237;
            var_j_238 = isPos;
            var_j_239 = expr_b_42;
            appl_j_240 = var_j_238 var_j_239;
            if_j_243 = appl_j_240 ? (
                    bool_j_241 = true
                ) : (
                    var_j_242 = pred_check_b_44
                )
        ) : (
            var_j_244 = t_check_b_43
        ));
flatten_fun_j_272 = fun bj_null_j_4 -> (
    bool_j_247 = false;
    fail_b_36 = bool_j_247;
    flatten_fun_j_256 = fun expr_b_35 -> (
        var_j_248 = expr_b_35;
        m_match_bool_j_250 = var_j_248 ~ any;
        m_match_bool_j_253 = var_j_248 ~ int;
        m_match_cond_j_254 = m_match_bool_j_253 ? (
                bool_j_255 = true
            ) : (
                m_match_cond_j_251 = m_match_bool_j_250 ? (
                        var_j_252 = fail_b_36
                    ) : (
                        void_j_249 = {}
                    )
            ));
    flatten_fun_j_258 = fun bj_null_j_3 -> (
        input_j_257 = input);
    flatten_fun_j_260 = fun expr_b_37 -> (
        var_j_259 = expr_b_37);
    record_j_261 = {checker = flatten_fun_j_256, generator = flatten_fun_j_258, wrapper = flatten_fun_j_260};
    proj_j_262 = record_j_261.generator;
    int_j_263 = 0;
    appl_j_264 = proj_j_262 int_j_263;
    candidate_b_38 = appl_j_264;
    var_j_265 = isPos;
    var_j_266 = candidate_b_38;
    appl_j_267 = var_j_265 var_j_266;
    if_j_271 = appl_j_267 ? (
            var_j_268 = candidate_b_38
        ) : (
            bool_j_269 = false;
            assume_j_270 = assume bool_j_269
        ));
flatten_fun_j_274 = fun expr_b_45 -> (
    var_j_273 = expr_b_45);
record_j_275 = {checker = flatten_fun_j_246, generator = flatten_fun_j_272, wrapper = flatten_fun_j_274};
proj_j_276 = record_j_275.checker;
appl_j_279 = negation x_b_46;
appl_j_280 = proj_j_276 appl_j_279;
check_res_b_47 = appl_j_280;
if_j_288 = check_res_b_47 ? (
        var_j_282 = negation
    ) : (
        error_var_j_283 = check_res_b_47;
        assert_pred_j_284 = error_var_j_283;
        assert_res_j_285 = assert_pred_j_284 ? (
                assert_res_true_j_286 = {}
            ) : (
                ab_j_287 = abort
            )
    );
i_result = if_j_288