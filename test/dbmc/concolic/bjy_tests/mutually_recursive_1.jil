i_first = {};
flatten_fun_j_84 = fun f_j_0 -> (
    flatten_fun_j_83 = fun g_j_1 -> (
        flatten_fun_j_82 = fun x -> (
            var_j_17 = f_j_0;
            var_j_18 = f_j_0;
            appl_j_19 = var_j_17 var_j_18;
            var_j_20 = g_j_1;
            appl_j_21 = appl_j_19 var_j_20;
            f = appl_j_21;
            var_j_22 = g_j_1;
            var_j_23 = f_j_0;
            appl_j_24 = var_j_22 var_j_23;
            var_j_25 = g_j_1;
            appl_j_26 = appl_j_24 var_j_25;
            g = appl_j_26;
            flatten_fun_j_79 = fun x_b_0 -> (
                bool_j_27 = false;
                fail_b_8 = bool_j_27;
                flatten_fun_j_36 = fun expr_b_7 -> (
                    var_j_28 = expr_b_7;
                    m_match_bool_j_30 = var_j_28 ~ any;
                    m_match_bool_j_33 = var_j_28 ~ int;
                    m_match_cond_j_34 = m_match_bool_j_33 ? (
                            bool_j_35 = true
                        ) : (
                            m_match_cond_j_31 = m_match_bool_j_30 ? (
                                    var_j_32 = fail_b_8
                                ) : (
                                    void_j_29 = {}
                                )
                        ));
                flatten_fun_j_38 = fun bj_null -> (
                    input_j_37 = input);
                flatten_fun_j_40 = fun expr_b_9 -> (
                    var_j_39 = expr_b_9);
                record_j_41 = {checker = flatten_fun_j_36, generator = flatten_fun_j_38, wrapper = flatten_fun_j_40};
                proj_j_42 = record_j_41.checker;
                var_j_43 = x_b_0;
                appl_j_44 = proj_j_42 var_j_43;
                arg_check_b_1 = appl_j_44;
                var_j_45 = arg_check_b_1;
                if_j_78 = var_j_45 ? (
                        bool_j_46 = false;
                        fail_b_11 = bool_j_46;
                        flatten_fun_j_55 = fun expr_b_10 -> (
                            var_j_47 = expr_b_10;
                            m_match_bool_j_49 = var_j_47 ~ any;
                            m_match_bool_j_52 = var_j_47 ~ int;
                            m_match_cond_j_53 = m_match_bool_j_52 ? (
                                    bool_j_54 = true
                                ) : (
                                    m_match_cond_j_50 = m_match_bool_j_49 ? (
                                            var_j_51 = fail_b_11
                                        ) : (
                                            void_j_48 = {}
                                        )
                                ));
                        flatten_fun_j_57 = fun bj_null_j_2 -> (
                            input_j_56 = input);
                        flatten_fun_j_59 = fun expr_b_12 -> (
                            var_j_58 = expr_b_12);
                        record_j_60 = {checker = flatten_fun_j_55, generator = flatten_fun_j_57, wrapper = flatten_fun_j_59};
                        proj_j_61 = record_j_60.wrapper;
                        var_j_62 = x;
                        int_j_63 = 0;
                        m_bl_i_256 = var_j_62 ~ int;
                        m_br_i_257 = int_j_63 ~ int;
                        m_b_i_258 = m_bl_i_256 and m_br_i_257;
                        binop_j_64 = m_b_i_258 ? (
                                c_binop_i_259 = var_j_62 == int_j_63
                            ) : (
                                ab_i_260 = abort
                            );
                        m_i_261 = binop_j_64 ~ bool;
                        if_j_71 = m_i_261 ? (
                                c_cond_i_270 = binop_j_64 ? (
                                        int_j_65 = 0
                                    ) : (
                                        var_j_66 = g;
                                        var_j_67 = x;
                                        int_j_68 = 1;
                                        m_bl_i_262 = var_j_67 ~ int;
                                        m_br_i_263 = int_j_68 ~ int;
                                        m_b_i_264 = m_bl_i_262 and m_br_i_263;
                                        binop_j_69 = m_b_i_264 ? (
                                                c_binop_i_265 = var_j_67 - int_j_68
                                            ) : (
                                                ab_i_266 = abort
                                            );
                                        m_i_267 = var_j_66 ~ fun;
                                        appl_j_70 = m_i_267 ? (
                                                c_appl_i_268 = var_j_66 binop_j_69
                                            ) : (
                                                ab_i_269 = abort
                                            )
                                    )
                            ) : (
                                ab_i_271 = abort
                            );
                        m_i_272 = proj_j_61 ~ fun;
                        appl_j_72 = m_i_272 ? (
                                c_appl_i_273 = proj_j_61 if_j_71
                            ) : (
                                ab_i_274 = abort
                            )
                    ) : (
                        var_j_73 = arg_check_b_1;
                        assert_pred_j_74 = var_j_73;
                        assert_res_j_75 = assert_pred_j_74 ? (
                                assert_res_true_j_76 = {}
                            ) : (
                                ab_j_77 = abort
                            )
                    ));
            var_j_80 = x;
            appl_j_81 = flatten_fun_j_79 var_j_80)));
flatten_fun_j_152 = fun f_j_0_j_8 -> (
    flatten_fun_j_151 = fun g_j_1_j_7 -> (
        flatten_fun_j_150 = fun y -> (
            var_j_85 = f_j_0_j_8;
            var_j_86 = f_j_0_j_8;
            appl_j_87 = var_j_85 var_j_86;
            var_j_88 = g_j_1_j_7;
            appl_j_89 = appl_j_87 var_j_88;
            f_j_6 = appl_j_89;
            var_j_90 = g_j_1_j_7;
            var_j_91 = f_j_0_j_8;
            appl_j_92 = var_j_90 var_j_91;
            var_j_93 = g_j_1_j_7;
            appl_j_94 = appl_j_92 var_j_93;
            g_j_5 = appl_j_94;
            flatten_fun_j_147 = fun y_b_2 -> (
                bool_j_95 = false;
                fail_b_20 = bool_j_95;
                flatten_fun_j_104 = fun expr_b_19 -> (
                    var_j_96 = expr_b_19;
                    m_match_bool_j_98 = var_j_96 ~ any;
                    m_match_bool_j_101 = var_j_96 ~ int;
                    m_match_cond_j_102 = m_match_bool_j_101 ? (
                            bool_j_103 = true
                        ) : (
                            m_match_cond_j_99 = m_match_bool_j_98 ? (
                                    var_j_100 = fail_b_20
                                ) : (
                                    void_j_97 = {}
                                )
                        ));
                flatten_fun_j_106 = fun bj_null_j_3 -> (
                    input_j_105 = input);
                flatten_fun_j_108 = fun expr_b_21 -> (
                    var_j_107 = expr_b_21);
                record_j_109 = {checker = flatten_fun_j_104, generator = flatten_fun_j_106, wrapper = flatten_fun_j_108};
                proj_j_110 = record_j_109.checker;
                var_j_111 = y_b_2;
                appl_j_112 = proj_j_110 var_j_111;
                arg_check_b_3 = appl_j_112;
                var_j_113 = arg_check_b_3;
                if_j_146 = var_j_113 ? (
                        bool_j_114 = false;
                        fail_b_23 = bool_j_114;
                        flatten_fun_j_123 = fun expr_b_22 -> (
                            var_j_115 = expr_b_22;
                            m_match_bool_j_117 = var_j_115 ~ any;
                            m_match_bool_j_120 = var_j_115 ~ int;
                            m_match_cond_j_121 = m_match_bool_j_120 ? (
                                    bool_j_122 = true
                                ) : (
                                    m_match_cond_j_118 = m_match_bool_j_117 ? (
                                            var_j_119 = fail_b_23
                                        ) : (
                                            void_j_116 = {}
                                        )
                                ));
                        flatten_fun_j_125 = fun bj_null_j_4 -> (
                            input_j_124 = input);
                        flatten_fun_j_127 = fun expr_b_24 -> (
                            var_j_126 = expr_b_24);
                        record_j_128 = {checker = flatten_fun_j_123, generator = flatten_fun_j_125, wrapper = flatten_fun_j_127};
                        proj_j_129 = record_j_128.wrapper;
                        var_j_130 = y;
                        int_j_131 = 0;
                        m_bl_i_275 = var_j_130 ~ int;
                        m_br_i_276 = int_j_131 ~ int;
                        m_b_i_277 = m_bl_i_275 and m_br_i_276;
                        binop_j_132 = m_b_i_277 ? (
                                c_binop_i_278 = var_j_130 < int_j_131
                            ) : (
                                ab_i_279 = abort
                            );
                        m_i_280 = binop_j_132 ~ bool;
                        if_j_139 = m_i_280 ? (
                                c_cond_i_289 = binop_j_132 ? (
                                        bool_j_133 = false
                                    ) : (
                                        var_j_134 = f_j_6;
                                        var_j_135 = y;
                                        int_j_136 = 1;
                                        m_bl_i_281 = var_j_135 ~ int;
                                        m_br_i_282 = int_j_136 ~ int;
                                        m_b_i_283 = m_bl_i_281 and m_br_i_282;
                                        binop_j_137 = m_b_i_283 ? (
                                                c_binop_i_284 = var_j_135 - int_j_136
                                            ) : (
                                                ab_i_285 = abort
                                            );
                                        m_i_286 = var_j_134 ~ fun;
                                        appl_j_138 = m_i_286 ? (
                                                c_appl_i_287 = var_j_134 binop_j_137
                                            ) : (
                                                ab_i_288 = abort
                                            )
                                    )
                            ) : (
                                ab_i_290 = abort
                            );
                        m_i_291 = proj_j_129 ~ fun;
                        appl_j_140 = m_i_291 ? (
                                c_appl_i_292 = proj_j_129 if_j_139
                            ) : (
                                ab_i_293 = abort
                            )
                    ) : (
                        var_j_141 = arg_check_b_3;
                        assert_pred_j_142 = var_j_141;
                        assert_res_j_143 = assert_pred_j_142 ? (
                                assert_res_true_j_144 = {}
                            ) : (
                                ab_j_145 = abort
                            )
                    ));
            var_j_148 = y;
            appl_j_149 = flatten_fun_j_147 var_j_148)));
appl_j_155 = flatten_fun_j_84 flatten_fun_j_84;
appl_j_157 = appl_j_155 flatten_fun_j_152;
appl_j_160 = flatten_fun_j_152 flatten_fun_j_84;
appl_j_162 = appl_j_160 flatten_fun_j_152;
bool_j_163 = false;
fail_b_5 = bool_j_163;
flatten_fun_j_172 = fun expr_b_4 -> (
    var_j_164 = expr_b_4;
    m_match_bool_j_166 = var_j_164 ~ any;
    m_match_bool_j_169 = var_j_164 ~ int;
    m_match_cond_j_170 = m_match_bool_j_169 ? (
            bool_j_171 = true
        ) : (
            m_match_cond_j_167 = m_match_bool_j_166 ? (
                    var_j_168 = fail_b_5
                ) : (
                    void_j_165 = {}
                )
        ));
flatten_fun_j_174 = fun bj_null_j_9 -> (
    input_j_173 = input);
flatten_fun_j_176 = fun expr_b_6 -> (
    var_j_175 = expr_b_6);
record_j_177 = {checker = flatten_fun_j_172, generator = flatten_fun_j_174, wrapper = flatten_fun_j_176};
proj_j_178 = record_j_177.generator;
int_j_179 = 0;
appl_j_180 = proj_j_178 int_j_179;
x_b_31 = appl_j_180;
bool_j_181 = false;
fail_b_14 = bool_j_181;
flatten_fun_j_190 = fun expr_b_13 -> (
    var_j_182 = expr_b_13;
    m_match_bool_j_184 = var_j_182 ~ any;
    m_match_bool_j_187 = var_j_182 ~ int;
    m_match_cond_j_188 = m_match_bool_j_187 ? (
            bool_j_189 = true
        ) : (
            m_match_cond_j_185 = m_match_bool_j_184 ? (
                    var_j_186 = fail_b_14
                ) : (
                    void_j_183 = {}
                )
        ));
flatten_fun_j_192 = fun bj_null_j_10 -> (
    input_j_191 = input);
flatten_fun_j_194 = fun expr_b_15 -> (
    var_j_193 = expr_b_15);
record_j_195 = {checker = flatten_fun_j_190, generator = flatten_fun_j_192, wrapper = flatten_fun_j_194};
proj_j_196 = record_j_195.checker;
appl_j_199 = appl_j_157 x_b_31;
appl_j_200 = proj_j_196 appl_j_199;
check_res_b_30 = appl_j_200;
if_j_255 = check_res_b_30 ? (
        bool_j_202 = false;
        fail_b_17 = bool_j_202;
        flatten_fun_j_211 = fun expr_b_16 -> (
            var_j_203 = expr_b_16;
            m_match_bool_j_205 = var_j_203 ~ any;
            m_match_bool_j_208 = var_j_203 ~ int;
            m_match_cond_j_209 = m_match_bool_j_208 ? (
                    bool_j_210 = true
                ) : (
                    m_match_cond_j_206 = m_match_bool_j_205 ? (
                            var_j_207 = fail_b_17
                        ) : (
                            void_j_204 = {}
                        )
                ));
        flatten_fun_j_213 = fun bj_null_j_11 -> (
            input_j_212 = input);
        flatten_fun_j_215 = fun expr_b_18 -> (
            var_j_214 = expr_b_18);
        record_j_216 = {checker = flatten_fun_j_211, generator = flatten_fun_j_213, wrapper = flatten_fun_j_215};
        proj_j_217 = record_j_216.generator;
        int_j_218 = 0;
        appl_j_219 = proj_j_217 int_j_218;
        y_b_29 = appl_j_219;
        bool_j_220 = false;
        fail_b_26 = bool_j_220;
        flatten_fun_j_229 = fun expr_b_25 -> (
            var_j_221 = expr_b_25;
            m_match_bool_j_223 = var_j_221 ~ any;
            m_match_bool_j_226 = var_j_221 ~ int;
            m_match_cond_j_227 = m_match_bool_j_226 ? (
                    bool_j_228 = true
                ) : (
                    m_match_cond_j_224 = m_match_bool_j_223 ? (
                            var_j_225 = fail_b_26
                        ) : (
                            void_j_222 = {}
                        )
                ));
        flatten_fun_j_231 = fun bj_null_j_12 -> (
            input_j_230 = input);
        flatten_fun_j_233 = fun expr_b_27 -> (
            var_j_232 = expr_b_27);
        record_j_234 = {checker = flatten_fun_j_229, generator = flatten_fun_j_231, wrapper = flatten_fun_j_233};
        proj_j_235 = record_j_234.checker;
        var_j_236 = appl_j_162;
        var_j_237 = y_b_29;
        appl_j_238 = var_j_236 var_j_237;
        appl_j_239 = proj_j_235 appl_j_238;
        check_res_b_28 = appl_j_239;
        var_j_240 = check_res_b_28;
        if_j_249 = var_j_240 ? (
                var_j_241 = appl_j_157;
                int_j_242 = 1;
                m_i_294 = var_j_241 ~ fun;
                appl_j_243 = m_i_294 ? (
                        c_appl_i_295 = var_j_241 int_j_242
                    ) : (
                        ab_i_296 = abort
                    )
            ) : (
                error_var_j_244 = check_res_b_28;
                assert_pred_j_245 = error_var_j_244;
                assert_res_j_246 = assert_pred_j_245 ? (
                        assert_res_true_j_247 = {}
                    ) : (
                        ab_j_248 = abort
                    )
            )
    ) : (
        error_var_j_250 = check_res_b_30;
        assert_pred_j_251 = error_var_j_250;
        assert_res_j_252 = assert_pred_j_251 ? (
                assert_res_true_j_253 = {}
            ) : (
                ab_j_254 = abort
            )
    );
i_result = if_j_255