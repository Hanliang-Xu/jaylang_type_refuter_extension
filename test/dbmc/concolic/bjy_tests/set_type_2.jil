int_j_4 = 1;
x = int_j_4;
flatten_fun_j_37 = fun expr_b_7 -> (
    bool_j_5 = false;
    fail_b_5 = bool_j_5;
    flatten_fun_j_14 = fun expr_b_4 -> (
        var_j_6 = expr_b_4;
        m_match_bool_j_8 = var_j_6 ~ any;
        m_match_bool_j_11 = var_j_6 ~ int;
        m_match_cond_j_12 = m_match_bool_j_11 ? (
                bool_j_13 = true
            ) : (
                m_match_cond_j_9 = m_match_bool_j_8 ? (
                        var_j_10 = fail_b_5
                    ) : (
                        void_j_7 = {}
                    )
            ));
    flatten_fun_j_16 = fun bj_null -> (
        input_j_15 = input);
    record_j_17 = {checker = flatten_fun_j_14, generator = flatten_fun_j_16};
    proj_j_18 = record_j_17.checker;
    var_j_19 = expr_b_7;
    appl_j_20 = proj_j_18 var_j_19;
    t_check_b_8 = appl_j_20;
    var_j_21 = t_check_b_8;
    if_j_36 = var_j_21 ? (
            bool_j_22 = false;
            pred_check_b_9 = bool_j_22;
            flatten_fun_j_29 = fun a -> (
                flatten_fun_j_26 = fun b -> (
                    var_j_23 = b;
                    int_j_24 = 0;
                    m_bl_i_80 = var_j_23 ~ int;
                    m_br_i_81 = int_j_24 ~ int;
                    m_b_i_82 = m_bl_i_80 and m_br_i_81;
                    binop_j_25 = m_b_i_82 ? (
                            c_binop_i_83 = var_j_23 < int_j_24
                        ) : (
                            ab_i_84 = abort
                        ));
                var_j_27 = a;
                m_i_85 = flatten_fun_j_26 ~ fun;
                appl_j_28 = m_i_85 ? (
                        c_appl_i_86 = flatten_fun_j_26 var_j_27
                    ) : (
                        ab_i_87 = abort
                    ));
            var_j_30 = expr_b_7;
            appl_j_31 = flatten_fun_j_29 var_j_30;
            if_j_34 = appl_j_31 ? (
                    bool_j_32 = true
                ) : (
                    var_j_33 = pred_check_b_9
                )
        ) : (
            var_j_35 = t_check_b_8
        ));
flatten_fun_j_67 = fun bj_null_j_3 -> (
    bool_j_38 = false;
    fail_b_1 = bool_j_38;
    flatten_fun_j_47 = fun expr_b_0 -> (
        var_j_39 = expr_b_0;
        m_match_bool_j_41 = var_j_39 ~ any;
        m_match_bool_j_44 = var_j_39 ~ int;
        m_match_cond_j_45 = m_match_bool_j_44 ? (
                bool_j_46 = true
            ) : (
                m_match_cond_j_42 = m_match_bool_j_41 ? (
                        var_j_43 = fail_b_1
                    ) : (
                        void_j_40 = {}
                    )
            ));
    flatten_fun_j_49 = fun bj_null_j_0 -> (
        input_j_48 = input);
    record_j_50 = {checker = flatten_fun_j_47, generator = flatten_fun_j_49};
    proj_j_51 = record_j_50.generator;
    int_j_52 = 0;
    appl_j_53 = proj_j_51 int_j_52;
    candidate_b_3 = appl_j_53;
    flatten_fun_j_60 = fun a_j_2 -> (
        flatten_fun_j_57 = fun b_j_1 -> (
            var_j_54 = b_j_1;
            int_j_55 = 0;
            m_bl_i_88 = var_j_54 ~ int;
            m_br_i_89 = int_j_55 ~ int;
            m_b_i_90 = m_bl_i_88 and m_br_i_89;
            binop_j_56 = m_b_i_90 ? (
                    c_binop_i_91 = var_j_54 < int_j_55
                ) : (
                    ab_i_92 = abort
                ));
        var_j_58 = a_j_2;
        m_i_93 = flatten_fun_j_57 ~ fun;
        appl_j_59 = m_i_93 ? (
                c_appl_i_94 = flatten_fun_j_57 var_j_58
            ) : (
                ab_i_95 = abort
            ));
    var_j_61 = candidate_b_3;
    appl_j_62 = flatten_fun_j_60 var_j_61;
    if_j_66 = appl_j_62 ? (
            var_j_63 = candidate_b_3
        ) : (
            bool_j_64 = false;
            assume_j_65 = assume bool_j_64
        ));
record_j_68 = {checker = flatten_fun_j_37, generator = flatten_fun_j_67};
proj_j_69 = record_j_68.checker;
int_j_70 = 1;
appl_j_71 = proj_j_69 int_j_70;
check_res_b_11 = appl_j_71;
if_j_79 = check_res_b_11 ? (
        var_j_73 = x
    ) : (
        error_var_j_74 = check_res_b_11;
        assert_pred_j_75 = error_var_j_74;
        assert_res_j_76 = assert_pred_j_75 ? (
                assert_res_true_j_77 = {}
            ) : (
                ab_j_78 = abort
            )
    );
i_result = if_j_79