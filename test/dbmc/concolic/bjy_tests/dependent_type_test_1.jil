_i_first = {};
B_j_40 = fun x -> (
    int_j_8 = 0;
    var_j_9 = x;
    binop_j_10 = int_j_8 < var_j_9;
    if_j_39 = binop_j_10 ? (
            bool_j_11 = false;
            fail_b_1 = bool_j_11;
            flatten_fun_j_20 = fun expr_b_0 -> (
                var_j_12 = expr_b_0;
                m_match_bool_j_14 = var_j_12 ~ any;
                m_match_bool_j_17 = var_j_12 ~ int;
                m_match_cond_j_18 = m_match_bool_j_17 ? (
                        bool_j_19 = true
                    ) : (
                        m_match_cond_j_15 = m_match_bool_j_14 ? (
                                var_j_16 = fail_b_1
                            ) : (
                                void_j_13 = {}
                            )
                    ));
            flatten_fun_j_22 = fun ~null_j_6 -> (
                input_j_21 = input);
            record_j_23 = {checker = flatten_fun_j_20, generator = flatten_fun_j_22}
        ) : (
            bool_j_24 = false;
            fail_b_4 = bool_j_24;
            flatten_fun_j_33 = fun expr_b_3 -> (
                var_j_25 = expr_b_3;
                m_match_bool_j_27 = var_j_25 ~ any;
                m_match_bool_j_30 = var_j_25 ~ bool;
                m_match_cond_j_31 = m_match_bool_j_30 ? (
                        bool_j_32 = true
                    ) : (
                        m_match_cond_j_28 = m_match_bool_j_27 ? (
                                var_j_29 = fail_b_4
                            ) : (
                                void_j_26 = {}
                            )
                    ));
            flatten_fun_j_37 = fun ~null_j_7 -> (
                int_j_34 = 0;
                input_j_35 = input;
                binop_j_36 = int_j_34 <= input_j_35);
            record_j_38 = {checker = flatten_fun_j_33, generator = flatten_fun_j_37}
        ));
B = B_j_40;
f_j_86 = fun a_j_5 -> (
    g_j_50 = fun b_j_4 -> (
        int_j_41 = 0;
        var_j_42 = a_j_5;
        binop_j_43 = int_j_41 < var_j_42;
        if_j_49 = binop_j_43 ? (
                int_j_44 = 1
            ) : (
                var_j_45 = b_j_4;
                if_j_48 = var_j_45 ? (
                        bool_j_46 = true
                    ) : (
                        int_j_47 = 2
                    )
            ));
    g = g_j_50;
    var_j_51 = B;
    var_j_52 = a_j_5;
    appl_j_53 = var_j_51 var_j_52;
    proj_j_54 = appl_j_53.generator;
    int_j_55 = 0;
    appl_j_56 = proj_j_54 int_j_55;
    b_b_30 = appl_j_56;
    flatten_fun_j_71 = fun b -> (
        bool_j_57 = false;
        fail_b_10 = bool_j_57;
        flatten_fun_j_66 = fun expr_b_9 -> (
            var_j_58 = expr_b_9;
            m_match_bool_j_60 = var_j_58 ~ any;
            m_match_bool_j_63 = var_j_58 ~ int;
            m_match_cond_j_64 = m_match_bool_j_63 ? (
                    bool_j_65 = true
                ) : (
                    m_match_cond_j_61 = m_match_bool_j_60 ? (
                            var_j_62 = fail_b_10
                        ) : (
                            void_j_59 = {}
                        )
                ));
        flatten_fun_j_68 = fun ~null_j_3 -> (
            input_j_67 = input);
        record_j_69 = {checker = flatten_fun_j_66, generator = flatten_fun_j_68};
        proj_j_70 = record_j_69.checker);
    var_j_72 = b_b_30;
    appl_j_73 = flatten_fun_j_71 var_j_72;
    var_j_74 = g;
    var_j_75 = b_b_30;
    appl_j_76 = var_j_74 var_j_75;
    appl_j_77 = appl_j_73 appl_j_76;
    check_res_b_31 = appl_j_77;
    var_j_78 = check_res_b_31;
    if_j_85 = var_j_78 ? (
            var_j_79 = g
        ) : (
            error_var_j_80 = check_res_b_31;
            assert_pred_j_81 = error_var_j_80;
            assert_res_j_82 = assert_pred_j_81 ? (
                    assert_res_true_j_83 = {}
                ) : (
                    ab_j_84 = abort
                )
        ));
f = f_j_86;
bool_j_87 = false;
fail_b_7 = bool_j_87;
flatten_fun_j_96 = fun expr_b_6 -> (
    var_j_88 = expr_b_6;
    m_match_bool_j_90 = var_j_88 ~ any;
    m_match_bool_j_93 = var_j_88 ~ int;
    m_match_cond_j_94 = m_match_bool_j_93 ? (
            bool_j_95 = true
        ) : (
            m_match_cond_j_91 = m_match_bool_j_90 ? (
                    var_j_92 = fail_b_7
                ) : (
                    void_j_89 = {}
                )
        ));
flatten_fun_j_98 = fun ~null -> (
    input_j_97 = input);
record_j_99 = {checker = flatten_fun_j_96, generator = flatten_fun_j_98};
proj_j_100 = record_j_99.generator;
int_j_101 = 0;
appl_j_102 = proj_j_100 int_j_101;
a_b_28 = appl_j_102;
flatten_fun_j_162 = fun a -> (
    flatten_fun_j_128 = fun expr_b_20 -> (
        var_j_103 = B;
        var_j_104 = a;
        appl_j_105 = var_j_103 var_j_104;
        proj_j_106 = appl_j_105.generator;
        int_j_107 = 0;
        appl_j_108 = proj_j_106 int_j_107;
        arg_assert_b_21 = appl_j_108;
        var_j_109 = expr_b_20;
        var_j_110 = arg_assert_b_21;
        appl_j_111 = var_j_109 var_j_110;
        fun_ret_b_22 = appl_j_111;
        bool_j_112 = false;
        fail_b_18 = bool_j_112;
        flatten_fun_j_121 = fun expr_b_17 -> (
            var_j_113 = expr_b_17;
            m_match_bool_j_115 = var_j_113 ~ any;
            m_match_bool_j_118 = var_j_113 ~ int;
            m_match_cond_j_119 = m_match_bool_j_118 ? (
                    bool_j_120 = true
                ) : (
                    m_match_cond_j_116 = m_match_bool_j_115 ? (
                            var_j_117 = fail_b_18
                        ) : (
                            void_j_114 = {}
                        )
                ));
        flatten_fun_j_123 = fun ~null_j_0 -> (
            input_j_122 = input);
        record_j_124 = {checker = flatten_fun_j_121, generator = flatten_fun_j_123};
        proj_j_125 = record_j_124.checker;
        var_j_126 = fun_ret_b_22;
        appl_j_127 = proj_j_125 var_j_126);
    flatten_fun_j_159 = fun ~null_j_2 -> (
        flatten_fun_j_158 = fun arg_assume_b_15 -> (
            var_j_129 = B;
            var_j_130 = a;
            appl_j_131 = var_j_129 var_j_130;
            proj_j_132 = appl_j_131.checker;
            var_j_133 = arg_assume_b_15;
            appl_j_134 = proj_j_132 var_j_133;
            if_j_157 = appl_j_134 ? (
                    bool_j_135 = false;
                    fail_b_13 = bool_j_135;
                    flatten_fun_j_144 = fun expr_b_12 -> (
                        var_j_136 = expr_b_12;
                        m_match_bool_j_138 = var_j_136 ~ any;
                        m_match_bool_j_141 = var_j_136 ~ int;
                        m_match_cond_j_142 = m_match_bool_j_141 ? (
                                bool_j_143 = true
                            ) : (
                                m_match_cond_j_139 = m_match_bool_j_138 ? (
                                        var_j_140 = fail_b_13
                                    ) : (
                                        void_j_137 = {}
                                    )
                            ));
                    flatten_fun_j_146 = fun ~null_j_1 -> (
                        input_j_145 = input);
                    record_j_147 = {checker = flatten_fun_j_144, generator = flatten_fun_j_146};
                    proj_j_148 = record_j_147.generator;
                    int_j_149 = 0;
                    appl_j_150 = proj_j_148 int_j_149
                ) : (
                    bool_j_151 = false;
                    fail_b_16 = bool_j_151;
                    var_j_152 = fail_b_16;
                    assert_pred_j_153 = var_j_152;
                    assert_res_j_154 = assert_pred_j_153 ? (
                            assert_res_true_j_155 = {}
                        ) : (
                            ab_j_156 = abort
                        )
                )));
    record_j_160 = {checker = flatten_fun_j_128, generator = flatten_fun_j_159};
    proj_j_161 = record_j_160.checker);
appl_j_164 = flatten_fun_j_162 a_b_28;
appl_j_167 = f a_b_28;
appl_j_168 = appl_j_164 appl_j_167;
check_res_b_29 = appl_j_168;
if_j_176 = check_res_b_29 ? (
        var_j_170 = f
    ) : (
        error_var_j_171 = check_res_b_29;
        assert_pred_j_172 = error_var_j_171;
        assert_res_j_173 = assert_pred_j_172 ? (
                assert_res_true_j_174 = {}
            ) : (
                ab_j_175 = abort
            )
    );
_i_result = if_j_176