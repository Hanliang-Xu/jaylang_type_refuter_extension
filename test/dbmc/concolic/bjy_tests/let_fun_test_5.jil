i_first = {};
f_j_59 = fun x -> (
    flatten_fun_j_56 = fun x_b_0 -> (
        int_j_3 = 0;
        input_j_4 = input;
        m_bl_i_108 = int_j_3 ~ int;
        m_br_i_109 = input_j_4 ~ int;
        m_b_i_110 = m_bl_i_108 and m_br_i_109;
        binop_j_5 = m_b_i_110 ? (
                c_binop_i_111 = int_j_3 < input_j_4
            ) : (
                ab_i_112 = abort
            );
        if_j_27 = binop_j_5 ? (
                bool_j_6 = false;
                fail_b_6 = bool_j_6;
                flatten_fun_j_15 = fun expr_b_5 -> (
                    var_j_7 = expr_b_5;
                    m_match_bool_j_9 = var_j_7 ~ any;
                    m_match_bool_j_12 = var_j_7 ~ bool;
                    m_match_cond_j_13 = m_match_bool_j_12 ? (
                            bool_j_14 = true
                        ) : (
                            m_match_cond_j_10 = m_match_bool_j_9 ? (
                                    var_j_11 = fail_b_6
                                ) : (
                                    void_j_8 = {}
                                )
                        ));
                flatten_fun_j_19 = fun bj_null_j_1 -> (
                    int_j_16 = 0;
                    input_j_17 = input;
                    m_bl_i_113 = int_j_16 ~ int;
                    m_br_i_114 = input_j_17 ~ int;
                    m_b_i_115 = m_bl_i_113 and m_br_i_114;
                    binop_j_18 = m_b_i_115 ? (
                            c_binop_i_116 = int_j_16 <= input_j_17
                        ) : (
                            ab_i_117 = abort
                        ));
                flatten_fun_j_21 = fun expr_b_7 -> (
                    var_j_20 = expr_b_7);
                record_j_22 = {checker = flatten_fun_j_15, generator = flatten_fun_j_19, wrapper = flatten_fun_j_21};
                proj_j_23 = record_j_22.checker;
                var_j_24 = x_b_0;
                m_i_118 = proj_j_23 ~ fun;
                appl_j_25 = m_i_118 ? (
                        c_appl_i_119 = proj_j_23 var_j_24
                    ) : (
                        ab_i_120 = abort
                    )
            ) : (
                bool_j_26 = true
            );
        arg_check_b_1 = if_j_27;
        var_j_28 = arg_check_b_1;
        if_j_55 = var_j_28 ? (
                bool_j_29 = false;
                fail_b_9 = bool_j_29;
                flatten_fun_j_38 = fun expr_b_8 -> (
                    var_j_30 = expr_b_8;
                    m_match_bool_j_32 = var_j_30 ~ any;
                    m_match_bool_j_35 = var_j_30 ~ int;
                    m_match_cond_j_36 = m_match_bool_j_35 ? (
                            bool_j_37 = true
                        ) : (
                            m_match_cond_j_33 = m_match_bool_j_32 ? (
                                    var_j_34 = fail_b_9
                                ) : (
                                    void_j_31 = {}
                                )
                        ));
                flatten_fun_j_40 = fun bj_null_j_2 -> (
                    input_j_39 = input);
                flatten_fun_j_42 = fun expr_b_10 -> (
                    var_j_41 = expr_b_10);
                record_j_43 = {checker = flatten_fun_j_38, generator = flatten_fun_j_40, wrapper = flatten_fun_j_42};
                proj_j_44 = record_j_43.wrapper;
                var_j_45 = x;
                var_j_46 = x;
                m_bl_i_121 = var_j_45 ~ int;
                m_br_i_122 = var_j_46 ~ int;
                m_b_i_123 = m_bl_i_121 and m_br_i_122;
                binop_j_47 = m_b_i_123 ? (
                        c_binop_i_124 = var_j_45 + var_j_46
                    ) : (
                        ab_i_125 = abort
                    );
                ret = binop_j_47;
                int_j_48 = 1;
                m_i_126 = proj_j_44 ~ fun;
                appl_j_49 = m_i_126 ? (
                        c_appl_i_127 = proj_j_44 int_j_48
                    ) : (
                        ab_i_128 = abort
                    )
            ) : (
                var_j_50 = arg_check_b_1;
                assert_pred_j_51 = var_j_50;
                assert_res_j_52 = assert_pred_j_51 ? (
                        assert_res_true_j_53 = {}
                    ) : (
                        ab_j_54 = abort
                    )
            ));
    var_j_57 = x;
    appl_j_58 = flatten_fun_j_56 var_j_57);
f = f_j_59;
bool_j_60 = false;
fail_b_3 = bool_j_60;
flatten_fun_j_69 = fun expr_b_2 -> (
    var_j_61 = expr_b_2;
    m_match_bool_j_63 = var_j_61 ~ any;
    m_match_bool_j_66 = var_j_61 ~ bool;
    m_match_cond_j_67 = m_match_bool_j_66 ? (
            bool_j_68 = true
        ) : (
            m_match_cond_j_64 = m_match_bool_j_63 ? (
                    var_j_65 = fail_b_3
                ) : (
                    void_j_62 = {}
                )
        ));
flatten_fun_j_73 = fun bj_null -> (
    int_j_70 = 0;
    input_j_71 = input;
    m_bl_i_129 = int_j_70 ~ int;
    m_br_i_130 = input_j_71 ~ int;
    m_b_i_131 = m_bl_i_129 and m_br_i_130;
    binop_j_72 = m_b_i_131 ? (
            c_binop_i_132 = int_j_70 <= input_j_71
        ) : (
            ab_i_133 = abort
        ));
flatten_fun_j_75 = fun expr_b_4 -> (
    var_j_74 = expr_b_4);
record_j_76 = {checker = flatten_fun_j_69, generator = flatten_fun_j_73, wrapper = flatten_fun_j_75};
proj_j_77 = record_j_76.generator;
int_j_78 = 0;
appl_j_79 = proj_j_77 int_j_78;
x_b_14 = appl_j_79;
bool_j_80 = false;
fail_b_12 = bool_j_80;
flatten_fun_j_89 = fun expr_b_11 -> (
    var_j_81 = expr_b_11;
    m_match_bool_j_83 = var_j_81 ~ any;
    m_match_bool_j_86 = var_j_81 ~ int;
    m_match_cond_j_87 = m_match_bool_j_86 ? (
            bool_j_88 = true
        ) : (
            m_match_cond_j_84 = m_match_bool_j_83 ? (
                    var_j_85 = fail_b_12
                ) : (
                    void_j_82 = {}
                )
        ));
flatten_fun_j_91 = fun bj_null_j_0 -> (
    input_j_90 = input);
flatten_fun_j_93 = fun expr_b_13 -> (
    var_j_92 = expr_b_13);
record_j_94 = {checker = flatten_fun_j_89, generator = flatten_fun_j_91, wrapper = flatten_fun_j_93};
proj_j_95 = record_j_94.checker;
appl_j_98 = f x_b_14;
appl_j_99 = proj_j_95 appl_j_98;
check_res_b_15 = appl_j_99;
if_j_107 = check_res_b_15 ? (
        var_j_101 = f
    ) : (
        error_var_j_102 = check_res_b_15;
        assert_pred_j_103 = error_var_j_102;
        assert_res_j_104 = assert_pred_j_103 ? (
                assert_res_true_j_105 = {}
            ) : (
                ab_j_106 = abort
            )
    );
i_result = if_j_107