i_first = {};
flatten_fun_j_51 = fun expr_b_13 -> (
    bool_j_9 = false;
    fail_b_8 = bool_j_9;
    flatten_fun_j_18 = fun expr_b_7 -> (
        var_j_10 = expr_b_7;
        m_match_bool_j_12 = var_j_10 ~ any;
        m_match_bool_j_15 = var_j_10 ~ bool;
        m_match_cond_j_16 = m_match_bool_j_15 ? (
                bool_j_17 = true
            ) : (
                m_match_cond_j_13 = m_match_bool_j_12 ? (
                        var_j_14 = fail_b_8
                    ) : (
                        void_j_11 = {}
                    )
            ));
    flatten_fun_j_22 = fun bj_null -> (
        int_j_19 = 0;
        input_j_20 = input;
        m_bl_i_202 = int_j_19 ~ int;
        m_br_i_203 = input_j_20 ~ int;
        m_b_i_204 = m_bl_i_202 and m_br_i_203;
        binop_j_21 = m_b_i_204 ? (
                c_binop_i_205 = int_j_19 <= input_j_20
            ) : (
                ab_i_206 = abort
            ));
    flatten_fun_j_24 = fun expr_b_9 -> (
        var_j_23 = expr_b_9);
    record_j_25 = {checker = flatten_fun_j_18, generator = flatten_fun_j_22, wrapper = flatten_fun_j_24};
    proj_j_26 = record_j_25.checker;
    var_j_27 = expr_b_13;
    appl_j_28 = proj_j_26 var_j_27;
    check_1_b_14 = appl_j_28;
    var_j_29 = check_1_b_14;
    if_j_50 = var_j_29 ? (
            bool_j_30 = false;
            fail_b_11 = bool_j_30;
            flatten_fun_j_39 = fun expr_b_10 -> (
                var_j_31 = expr_b_10;
                m_match_bool_j_33 = var_j_31 ~ any;
                m_match_bool_j_36 = var_j_31 ~ int;
                m_match_cond_j_37 = m_match_bool_j_36 ? (
                        bool_j_38 = true
                    ) : (
                        m_match_cond_j_34 = m_match_bool_j_33 ? (
                                var_j_35 = fail_b_11
                            ) : (
                                void_j_32 = {}
                            )
                    ));
            flatten_fun_j_41 = fun bj_null_j_0 -> (
                input_j_40 = input);
            flatten_fun_j_43 = fun expr_b_12 -> (
                var_j_42 = expr_b_12);
            record_j_44 = {checker = flatten_fun_j_39, generator = flatten_fun_j_41, wrapper = flatten_fun_j_43};
            proj_j_45 = record_j_44.checker;
            var_j_46 = expr_b_13;
            appl_j_47 = proj_j_45 var_j_46;
            check_2_b_15 = appl_j_47;
            var_j_48 = check_2_b_15
        ) : (
            var_j_49 = check_1_b_14
        ));
flatten_fun_j_94 = fun bj_null_j_3 -> (
    bool_j_52 = false;
    fail_b_1 = bool_j_52;
    flatten_fun_j_61 = fun expr_b_0 -> (
        var_j_53 = expr_b_0;
        m_match_bool_j_55 = var_j_53 ~ any;
        m_match_bool_j_58 = var_j_53 ~ bool;
        m_match_cond_j_59 = m_match_bool_j_58 ? (
                bool_j_60 = true
            ) : (
                m_match_cond_j_56 = m_match_bool_j_55 ? (
                        var_j_57 = fail_b_1
                    ) : (
                        void_j_54 = {}
                    )
            ));
    flatten_fun_j_65 = fun bj_null_j_1 -> (
        int_j_62 = 0;
        input_j_63 = input;
        m_bl_i_207 = int_j_62 ~ int;
        m_br_i_208 = input_j_63 ~ int;
        m_b_i_209 = m_bl_i_207 and m_br_i_208;
        binop_j_64 = m_b_i_209 ? (
                c_binop_i_210 = int_j_62 <= input_j_63
            ) : (
                ab_i_211 = abort
            ));
    flatten_fun_j_67 = fun expr_b_2 -> (
        var_j_66 = expr_b_2);
    record_j_68 = {checker = flatten_fun_j_61, generator = flatten_fun_j_65, wrapper = flatten_fun_j_67};
    proj_j_69 = record_j_68.generator;
    int_j_70 = 0;
    appl_j_71 = proj_j_69 int_j_70;
    candidate_b_6 = appl_j_71;
    bool_j_72 = false;
    fail_b_4 = bool_j_72;
    flatten_fun_j_81 = fun expr_b_3 -> (
        var_j_73 = expr_b_3;
        m_match_bool_j_75 = var_j_73 ~ any;
        m_match_bool_j_78 = var_j_73 ~ int;
        m_match_cond_j_79 = m_match_bool_j_78 ? (
                bool_j_80 = true
            ) : (
                m_match_cond_j_76 = m_match_bool_j_75 ? (
                        var_j_77 = fail_b_4
                    ) : (
                        void_j_74 = {}
                    )
            ));
    flatten_fun_j_83 = fun bj_null_j_2 -> (
        input_j_82 = input);
    flatten_fun_j_85 = fun expr_b_5 -> (
        var_j_84 = expr_b_5);
    record_j_86 = {checker = flatten_fun_j_81, generator = flatten_fun_j_83, wrapper = flatten_fun_j_85};
    proj_j_87 = record_j_86.checker;
    var_j_88 = candidate_b_6;
    appl_j_89 = proj_j_87 var_j_88;
    if_j_93 = appl_j_89 ? (
            var_j_90 = candidate_b_6
        ) : (
            bool_j_91 = false;
            assume_j_92 = assume bool_j_91
        ));
flatten_fun_j_96 = fun expr_b_16 -> (
    var_j_95 = expr_b_16);
record_j_97 = {checker = flatten_fun_j_51, generator = flatten_fun_j_94, wrapper = flatten_fun_j_96};
proj_j_98 = record_j_97.wrapper;
bool_j_99 = true;
m_i_212 = proj_j_98 ~ fun;
appl_j_100 = m_i_212 ? (
        c_appl_i_213 = proj_j_98 bool_j_99
    ) : (
        ab_i_214 = abort
    );
x_b_34 = appl_j_100;
x = x_b_34;
flatten_fun_j_144 = fun expr_b_30 -> (
    bool_j_102 = false;
    fail_b_25 = bool_j_102;
    flatten_fun_j_111 = fun expr_b_24 -> (
        var_j_103 = expr_b_24;
        m_match_bool_j_105 = var_j_103 ~ any;
        m_match_bool_j_108 = var_j_103 ~ bool;
        m_match_cond_j_109 = m_match_bool_j_108 ? (
                bool_j_110 = true
            ) : (
                m_match_cond_j_106 = m_match_bool_j_105 ? (
                        var_j_107 = fail_b_25
                    ) : (
                        void_j_104 = {}
                    )
            ));
    flatten_fun_j_115 = fun bj_null_j_4 -> (
        int_j_112 = 0;
        input_j_113 = input;
        m_bl_i_215 = int_j_112 ~ int;
        m_br_i_216 = input_j_113 ~ int;
        m_b_i_217 = m_bl_i_215 and m_br_i_216;
        binop_j_114 = m_b_i_217 ? (
                c_binop_i_218 = int_j_112 <= input_j_113
            ) : (
                ab_i_219 = abort
            ));
    flatten_fun_j_117 = fun expr_b_26 -> (
        var_j_116 = expr_b_26);
    record_j_118 = {checker = flatten_fun_j_111, generator = flatten_fun_j_115, wrapper = flatten_fun_j_117};
    proj_j_119 = record_j_118.checker;
    var_j_120 = expr_b_30;
    appl_j_121 = proj_j_119 var_j_120;
    check_1_b_31 = appl_j_121;
    var_j_122 = check_1_b_31;
    if_j_143 = var_j_122 ? (
            bool_j_123 = false;
            fail_b_28 = bool_j_123;
            flatten_fun_j_132 = fun expr_b_27 -> (
                var_j_124 = expr_b_27;
                m_match_bool_j_126 = var_j_124 ~ any;
                m_match_bool_j_129 = var_j_124 ~ int;
                m_match_cond_j_130 = m_match_bool_j_129 ? (
                        bool_j_131 = true
                    ) : (
                        m_match_cond_j_127 = m_match_bool_j_126 ? (
                                var_j_128 = fail_b_28
                            ) : (
                                void_j_125 = {}
                            )
                    ));
            flatten_fun_j_134 = fun bj_null_j_5 -> (
                input_j_133 = input);
            flatten_fun_j_136 = fun expr_b_29 -> (
                var_j_135 = expr_b_29);
            record_j_137 = {checker = flatten_fun_j_132, generator = flatten_fun_j_134, wrapper = flatten_fun_j_136};
            proj_j_138 = record_j_137.checker;
            var_j_139 = expr_b_30;
            appl_j_140 = proj_j_138 var_j_139;
            check_2_b_32 = appl_j_140;
            var_j_141 = check_2_b_32
        ) : (
            var_j_142 = check_1_b_31
        ));
flatten_fun_j_187 = fun bj_null_j_8 -> (
    bool_j_145 = false;
    fail_b_18 = bool_j_145;
    flatten_fun_j_154 = fun expr_b_17 -> (
        var_j_146 = expr_b_17;
        m_match_bool_j_148 = var_j_146 ~ any;
        m_match_bool_j_151 = var_j_146 ~ bool;
        m_match_cond_j_152 = m_match_bool_j_151 ? (
                bool_j_153 = true
            ) : (
                m_match_cond_j_149 = m_match_bool_j_148 ? (
                        var_j_150 = fail_b_18
                    ) : (
                        void_j_147 = {}
                    )
            ));
    flatten_fun_j_158 = fun bj_null_j_6 -> (
        int_j_155 = 0;
        input_j_156 = input;
        m_bl_i_220 = int_j_155 ~ int;
        m_br_i_221 = input_j_156 ~ int;
        m_b_i_222 = m_bl_i_220 and m_br_i_221;
        binop_j_157 = m_b_i_222 ? (
                c_binop_i_223 = int_j_155 <= input_j_156
            ) : (
                ab_i_224 = abort
            ));
    flatten_fun_j_160 = fun expr_b_19 -> (
        var_j_159 = expr_b_19);
    record_j_161 = {checker = flatten_fun_j_154, generator = flatten_fun_j_158, wrapper = flatten_fun_j_160};
    proj_j_162 = record_j_161.generator;
    int_j_163 = 0;
    appl_j_164 = proj_j_162 int_j_163;
    candidate_b_23 = appl_j_164;
    bool_j_165 = false;
    fail_b_21 = bool_j_165;
    flatten_fun_j_174 = fun expr_b_20 -> (
        var_j_166 = expr_b_20;
        m_match_bool_j_168 = var_j_166 ~ any;
        m_match_bool_j_171 = var_j_166 ~ int;
        m_match_cond_j_172 = m_match_bool_j_171 ? (
                bool_j_173 = true
            ) : (
                m_match_cond_j_169 = m_match_bool_j_168 ? (
                        var_j_170 = fail_b_21
                    ) : (
                        void_j_167 = {}
                    )
            ));
    flatten_fun_j_176 = fun bj_null_j_7 -> (
        input_j_175 = input);
    flatten_fun_j_178 = fun expr_b_22 -> (
        var_j_177 = expr_b_22);
    record_j_179 = {checker = flatten_fun_j_174, generator = flatten_fun_j_176, wrapper = flatten_fun_j_178};
    proj_j_180 = record_j_179.checker;
    var_j_181 = candidate_b_23;
    appl_j_182 = proj_j_180 var_j_181;
    if_j_186 = appl_j_182 ? (
            var_j_183 = candidate_b_23
        ) : (
            bool_j_184 = false;
            assume_j_185 = assume bool_j_184
        ));
flatten_fun_j_189 = fun expr_b_33 -> (
    var_j_188 = expr_b_33);
record_j_190 = {checker = flatten_fun_j_144, generator = flatten_fun_j_187, wrapper = flatten_fun_j_189};
proj_j_191 = record_j_190.checker;
appl_j_193 = proj_j_191 x_b_34;
check_res_b_35 = appl_j_193;
if_j_201 = check_res_b_35 ? (
        var_j_195 = x
    ) : (
        error_var_j_196 = check_res_b_35;
        assert_pred_j_197 = error_var_j_196;
        assert_res_j_198 = assert_pred_j_197 ? (
                assert_res_true_j_199 = {}
            ) : (
                ab_j_200 = abort
            )
    );
i_result = if_j_201