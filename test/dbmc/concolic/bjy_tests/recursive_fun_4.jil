i_first = {};
flatten_fun_j_65 = fun f_j_0 -> (
    flatten_fun_j_64 = fun x -> (
        var_j_6 = f_j_0;
        var_j_7 = f_j_0;
        appl_j_8 = var_j_6 var_j_7;
        f = appl_j_8;
        flatten_fun_j_61 = fun x_b_0 -> (
            bool_j_9 = false;
            fail_b_6 = bool_j_9;
            flatten_fun_j_18 = fun expr_b_5 -> (
                var_j_10 = expr_b_5;
                m_match_bool_j_12 = var_j_10 ~ any;
                m_match_bool_j_15 = var_j_10 ~ int;
                m_match_cond_j_16 = m_match_bool_j_15 ? (
                        bool_j_17 = true
                    ) : (
                        m_match_cond_j_13 = m_match_bool_j_12 ? (
                                var_j_14 = fail_b_6
                            ) : (
                                void_j_11 = {}
                            )
                    ));
            flatten_fun_j_20 = fun bj_null -> (
                input_j_19 = input);
            flatten_fun_j_22 = fun expr_b_7 -> (
                var_j_21 = expr_b_7);
            record_j_23 = {checker = flatten_fun_j_18, generator = flatten_fun_j_20, wrapper = flatten_fun_j_22};
            proj_j_24 = record_j_23.checker;
            var_j_25 = x_b_0;
            appl_j_26 = proj_j_24 var_j_25;
            arg_check_b_1 = appl_j_26;
            var_j_27 = arg_check_b_1;
            if_j_60 = var_j_27 ? (
                    bool_j_28 = false;
                    fail_b_9 = bool_j_28;
                    flatten_fun_j_37 = fun expr_b_8 -> (
                        var_j_29 = expr_b_8;
                        m_match_bool_j_31 = var_j_29 ~ any;
                        m_match_bool_j_34 = var_j_29 ~ int;
                        m_match_cond_j_35 = m_match_bool_j_34 ? (
                                bool_j_36 = true
                            ) : (
                                m_match_cond_j_32 = m_match_bool_j_31 ? (
                                        var_j_33 = fail_b_9
                                    ) : (
                                        void_j_30 = {}
                                    )
                            ));
                    flatten_fun_j_39 = fun bj_null_j_1 -> (
                        input_j_38 = input);
                    flatten_fun_j_41 = fun expr_b_10 -> (
                        var_j_40 = expr_b_10);
                    record_j_42 = {checker = flatten_fun_j_37, generator = flatten_fun_j_39, wrapper = flatten_fun_j_41};
                    proj_j_43 = record_j_42.wrapper;
                    var_j_44 = x;
                    int_j_45 = 0;
                    m_bl_i_115 = var_j_44 ~ int;
                    m_br_i_116 = int_j_45 ~ int;
                    m_b_i_117 = m_bl_i_115 and m_br_i_116;
                    binop_j_46 = m_b_i_117 ? (
                            c_binop_i_118 = var_j_44 == int_j_45
                        ) : (
                            ab_i_119 = abort
                        );
                    m_i_120 = binop_j_46 ~ bool;
                    if_j_53 = m_i_120 ? (
                            c_cond_i_129 = binop_j_46 ? (
                                    bool_j_47 = false
                                ) : (
                                    var_j_48 = f;
                                    var_j_49 = x;
                                    int_j_50 = 1;
                                    m_bl_i_121 = var_j_49 ~ int;
                                    m_br_i_122 = int_j_50 ~ int;
                                    m_b_i_123 = m_bl_i_121 and m_br_i_122;
                                    binop_j_51 = m_b_i_123 ? (
                                            c_binop_i_124 = var_j_49 - int_j_50
                                        ) : (
                                            ab_i_125 = abort
                                        );
                                    m_i_126 = var_j_48 ~ fun;
                                    appl_j_52 = m_i_126 ? (
                                            c_appl_i_127 = var_j_48 binop_j_51
                                        ) : (
                                            ab_i_128 = abort
                                        )
                                )
                        ) : (
                            ab_i_130 = abort
                        );
                    m_i_131 = proj_j_43 ~ fun;
                    appl_j_54 = m_i_131 ? (
                            c_appl_i_132 = proj_j_43 if_j_53
                        ) : (
                            ab_i_133 = abort
                        )
                ) : (
                    var_j_55 = arg_check_b_1;
                    assert_pred_j_56 = var_j_55;
                    assert_res_j_57 = assert_pred_j_56 ? (
                            assert_res_true_j_58 = {}
                        ) : (
                            ab_j_59 = abort
                        )
                ));
        var_j_62 = x;
        appl_j_63 = flatten_fun_j_61 var_j_62));
appl_j_68 = flatten_fun_j_65 flatten_fun_j_65;
bool_j_69 = false;
fail_b_3 = bool_j_69;
flatten_fun_j_78 = fun expr_b_2 -> (
    var_j_70 = expr_b_2;
    m_match_bool_j_72 = var_j_70 ~ any;
    m_match_bool_j_75 = var_j_70 ~ int;
    m_match_cond_j_76 = m_match_bool_j_75 ? (
            bool_j_77 = true
        ) : (
            m_match_cond_j_73 = m_match_bool_j_72 ? (
                    var_j_74 = fail_b_3
                ) : (
                    void_j_71 = {}
                )
        ));
flatten_fun_j_80 = fun bj_null_j_2 -> (
    input_j_79 = input);
flatten_fun_j_82 = fun expr_b_4 -> (
    var_j_81 = expr_b_4);
record_j_83 = {checker = flatten_fun_j_78, generator = flatten_fun_j_80, wrapper = flatten_fun_j_82};
proj_j_84 = record_j_83.generator;
int_j_85 = 0;
appl_j_86 = proj_j_84 int_j_85;
x_b_15 = appl_j_86;
bool_j_87 = false;
fail_b_12 = bool_j_87;
flatten_fun_j_96 = fun expr_b_11 -> (
    var_j_88 = expr_b_11;
    m_match_bool_j_90 = var_j_88 ~ any;
    m_match_bool_j_93 = var_j_88 ~ int;
    m_match_cond_j_94 = m_match_bool_j_93 ? (
            bool_j_95 = true
        ) : (
            m_match_cond_j_91 = m_match_bool_j_90 ? (
                    var_j_92 = fail_b_12
                ) : (
                    void_j_89 = {}
                )
        ));
flatten_fun_j_98 = fun bj_null_j_3 -> (
    input_j_97 = input);
flatten_fun_j_100 = fun expr_b_13 -> (
    var_j_99 = expr_b_13);
record_j_101 = {checker = flatten_fun_j_96, generator = flatten_fun_j_98, wrapper = flatten_fun_j_100};
proj_j_102 = record_j_101.checker;
appl_j_105 = appl_j_68 x_b_15;
appl_j_106 = proj_j_102 appl_j_105;
check_res_b_14 = appl_j_106;
if_j_114 = check_res_b_14 ? (
        var_j_108 = appl_j_68
    ) : (
        error_var_j_109 = check_res_b_14;
        assert_pred_j_110 = error_var_j_109;
        assert_res_j_111 = assert_pred_j_110 ? (
                assert_res_true_j_112 = {}
            ) : (
                ab_j_113 = abort
            )
    );
i_result = if_j_114