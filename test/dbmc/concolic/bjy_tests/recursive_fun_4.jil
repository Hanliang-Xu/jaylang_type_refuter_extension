i_first = {};
flatten_fun_j_18 = fun f_j_0 -> (
    flatten_fun_j_17 = fun x -> (
        var_j_4 = f_j_0;
        var_j_5 = f_j_0;
        appl_j_6 = var_j_4 var_j_5;
        f = appl_j_6;
        var_j_7 = x;
        int_j_8 = 0;
        m_bl_i_64 = var_j_7 ~ int;
        m_br_i_65 = int_j_8 ~ int;
        m_b_i_66 = m_bl_i_64 and m_br_i_65;
        binop_j_9 = m_b_i_66 ? (
                c_binop_i_67 = var_j_7 == int_j_8
            ) : (
                ab_i_68 = abort
            );
        m_i_69 = binop_j_9 ~ bool;
        if_j_16 = m_i_69 ? (
                c_cond_i_78 = binop_j_9 ? (
                        bool_j_10 = false
                    ) : (
                        var_j_11 = f;
                        var_j_12 = x;
                        int_j_13 = 1;
                        m_bl_i_70 = var_j_12 ~ int;
                        m_br_i_71 = int_j_13 ~ int;
                        m_b_i_72 = m_bl_i_70 and m_br_i_71;
                        binop_j_14 = m_b_i_72 ? (
                                c_binop_i_73 = var_j_12 - int_j_13
                            ) : (
                                ab_i_74 = abort
                            );
                        m_i_75 = var_j_11 ~ fun;
                        appl_j_15 = m_i_75 ? (
                                c_appl_i_76 = var_j_11 binop_j_14
                            ) : (
                                ab_i_77 = abort
                            )
                    )
            ) : (
                ab_i_79 = abort
            )));
appl_j_21 = flatten_fun_j_18 flatten_fun_j_18;
bool_j_22 = false;
fail_b_1 = bool_j_22;
flatten_fun_j_31 = fun expr_b_0 -> (
    var_j_23 = expr_b_0;
    m_match_bool_j_25 = var_j_23 ~ any;
    m_match_bool_j_28 = var_j_23 ~ int;
    m_match_cond_j_29 = m_match_bool_j_28 ? (
            bool_j_30 = true
        ) : (
            m_match_cond_j_26 = m_match_bool_j_25 ? (
                    var_j_27 = fail_b_1
                ) : (
                    void_j_24 = {}
                )
        ));
flatten_fun_j_33 = fun bj_null -> (
    input_j_32 = input);
record_j_34 = {checker = flatten_fun_j_31, generator = flatten_fun_j_33};
proj_j_35 = record_j_34.generator;
int_j_36 = 0;
appl_j_37 = proj_j_35 int_j_36;
x_b_7 = appl_j_37;
bool_j_38 = false;
fail_b_4 = bool_j_38;
flatten_fun_j_47 = fun expr_b_3 -> (
    var_j_39 = expr_b_3;
    m_match_bool_j_41 = var_j_39 ~ any;
    m_match_bool_j_44 = var_j_39 ~ int;
    m_match_cond_j_45 = m_match_bool_j_44 ? (
            bool_j_46 = true
        ) : (
            m_match_cond_j_42 = m_match_bool_j_41 ? (
                    var_j_43 = fail_b_4
                ) : (
                    void_j_40 = {}
                )
        ));
flatten_fun_j_49 = fun bj_null_j_1 -> (
    input_j_48 = input);
record_j_50 = {checker = flatten_fun_j_47, generator = flatten_fun_j_49};
proj_j_51 = record_j_50.checker;
appl_j_54 = appl_j_21 x_b_7;
appl_j_55 = proj_j_51 appl_j_54;
check_res_b_6 = appl_j_55;
if_j_63 = check_res_b_6 ? (
        var_j_57 = appl_j_21
    ) : (
        error_var_j_58 = check_res_b_6;
        assert_pred_j_59 = error_var_j_58;
        assert_res_j_60 = assert_pred_j_59 ? (
                assert_res_true_j_61 = {}
            ) : (
                ab_j_62 = abort
            )
    );
i_result = if_j_63