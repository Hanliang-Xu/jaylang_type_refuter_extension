i_first = {};
id_j_55 = fun x -> (
    flatten_fun_j_52 = fun x_b_0 -> (
        bool_j_3 = false;
        fail_b_6 = bool_j_3;
        flatten_fun_j_12 = fun expr_b_5 -> (
            var_j_4 = expr_b_5;
            m_match_bool_j_6 = var_j_4 ~ any;
            m_match_bool_j_9 = var_j_4 ~ bool;
            m_match_cond_j_10 = m_match_bool_j_9 ? (
                    bool_j_11 = true
                ) : (
                    m_match_cond_j_7 = m_match_bool_j_6 ? (
                            var_j_8 = fail_b_6
                        ) : (
                            void_j_5 = {}
                        )
                ));
        flatten_fun_j_16 = fun bj_null_j_1 -> (
            int_j_13 = 0;
            input_j_14 = input;
            m_bl_i_106 = int_j_13 ~ int;
            m_br_i_107 = input_j_14 ~ int;
            m_b_i_108 = m_bl_i_106 and m_br_i_107;
            binop_j_15 = m_b_i_108 ? (
                    c_binop_i_109 = int_j_13 <= input_j_14
                ) : (
                    ab_i_110 = abort
                ));
        flatten_fun_j_18 = fun expr_b_7 -> (
            var_j_17 = expr_b_7);
        record_j_19 = {checker = flatten_fun_j_12, generator = flatten_fun_j_16, wrapper = flatten_fun_j_18};
        proj_j_20 = record_j_19.checker;
        var_j_21 = x_b_0;
        appl_j_22 = proj_j_20 var_j_21;
        arg_check_b_1 = appl_j_22;
        var_j_23 = arg_check_b_1;
        if_j_51 = var_j_23 ? (
                bool_j_24 = false;
                fail_b_9 = bool_j_24;
                flatten_fun_j_33 = fun expr_b_8 -> (
                    var_j_25 = expr_b_8;
                    m_match_bool_j_27 = var_j_25 ~ any;
                    m_match_bool_j_30 = var_j_25 ~ bool;
                    m_match_cond_j_31 = m_match_bool_j_30 ? (
                            bool_j_32 = true
                        ) : (
                            m_match_cond_j_28 = m_match_bool_j_27 ? (
                                    var_j_29 = fail_b_9
                                ) : (
                                    void_j_26 = {}
                                )
                        ));
                flatten_fun_j_37 = fun bj_null_j_2 -> (
                    int_j_34 = 0;
                    input_j_35 = input;
                    m_bl_i_111 = int_j_34 ~ int;
                    m_br_i_112 = input_j_35 ~ int;
                    m_b_i_113 = m_bl_i_111 and m_br_i_112;
                    binop_j_36 = m_b_i_113 ? (
                            c_binop_i_114 = int_j_34 <= input_j_35
                        ) : (
                            ab_i_115 = abort
                        ));
                flatten_fun_j_39 = fun expr_b_10 -> (
                    var_j_38 = expr_b_10);
                record_j_40 = {checker = flatten_fun_j_33, generator = flatten_fun_j_37, wrapper = flatten_fun_j_39};
                proj_j_41 = record_j_40.wrapper;
                int_j_42 = 1;
                int_j_43 = 1;
                m_bl_i_116 = int_j_42 ~ int;
                m_br_i_117 = int_j_43 ~ int;
                m_b_i_118 = m_bl_i_116 and m_br_i_117;
                binop_j_44 = m_b_i_118 ? (
                        c_binop_i_119 = int_j_42 + int_j_43
                    ) : (
                        ab_i_120 = abort
                    );
                m_i_121 = proj_j_41 ~ fun;
                appl_j_45 = m_i_121 ? (
                        c_appl_i_122 = proj_j_41 binop_j_44
                    ) : (
                        ab_i_123 = abort
                    )
            ) : (
                var_j_46 = arg_check_b_1;
                assert_pred_j_47 = var_j_46;
                assert_res_j_48 = assert_pred_j_47 ? (
                        assert_res_true_j_49 = {}
                    ) : (
                        ab_j_50 = abort
                    )
            ));
    var_j_53 = x;
    appl_j_54 = flatten_fun_j_52 var_j_53);
id = id_j_55;
bool_j_56 = false;
fail_b_3 = bool_j_56;
flatten_fun_j_65 = fun expr_b_2 -> (
    var_j_57 = expr_b_2;
    m_match_bool_j_59 = var_j_57 ~ any;
    m_match_bool_j_62 = var_j_57 ~ bool;
    m_match_cond_j_63 = m_match_bool_j_62 ? (
            bool_j_64 = true
        ) : (
            m_match_cond_j_60 = m_match_bool_j_59 ? (
                    var_j_61 = fail_b_3
                ) : (
                    void_j_58 = {}
                )
        ));
flatten_fun_j_69 = fun bj_null -> (
    int_j_66 = 0;
    input_j_67 = input;
    m_bl_i_124 = int_j_66 ~ int;
    m_br_i_125 = input_j_67 ~ int;
    m_b_i_126 = m_bl_i_124 and m_br_i_125;
    binop_j_68 = m_b_i_126 ? (
            c_binop_i_127 = int_j_66 <= input_j_67
        ) : (
            ab_i_128 = abort
        ));
flatten_fun_j_71 = fun expr_b_4 -> (
    var_j_70 = expr_b_4);
record_j_72 = {checker = flatten_fun_j_65, generator = flatten_fun_j_69, wrapper = flatten_fun_j_71};
proj_j_73 = record_j_72.generator;
int_j_74 = 0;
appl_j_75 = proj_j_73 int_j_74;
x_b_14 = appl_j_75;
bool_j_76 = false;
fail_b_12 = bool_j_76;
flatten_fun_j_85 = fun expr_b_11 -> (
    var_j_77 = expr_b_11;
    m_match_bool_j_79 = var_j_77 ~ any;
    m_match_bool_j_82 = var_j_77 ~ bool;
    m_match_cond_j_83 = m_match_bool_j_82 ? (
            bool_j_84 = true
        ) : (
            m_match_cond_j_80 = m_match_bool_j_79 ? (
                    var_j_81 = fail_b_12
                ) : (
                    void_j_78 = {}
                )
        ));
flatten_fun_j_89 = fun bj_null_j_0 -> (
    int_j_86 = 0;
    input_j_87 = input;
    m_bl_i_129 = int_j_86 ~ int;
    m_br_i_130 = input_j_87 ~ int;
    m_b_i_131 = m_bl_i_129 and m_br_i_130;
    binop_j_88 = m_b_i_131 ? (
            c_binop_i_132 = int_j_86 <= input_j_87
        ) : (
            ab_i_133 = abort
        ));
flatten_fun_j_91 = fun expr_b_13 -> (
    var_j_90 = expr_b_13);
record_j_92 = {checker = flatten_fun_j_85, generator = flatten_fun_j_89, wrapper = flatten_fun_j_91};
proj_j_93 = record_j_92.checker;
appl_j_96 = id x_b_14;
appl_j_97 = proj_j_93 appl_j_96;
check_res_b_15 = appl_j_97;
if_j_105 = check_res_b_15 ? (
        var_j_99 = id
    ) : (
        error_var_j_100 = check_res_b_15;
        assert_pred_j_101 = error_var_j_100;
        assert_res_j_102 = assert_pred_j_101 ? (
                assert_res_true_j_103 = {}
            ) : (
                ab_j_104 = abort
            )
    );
i_result = if_j_105