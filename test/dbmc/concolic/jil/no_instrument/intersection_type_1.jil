bool_j_4 = true;
x_b_17 = bool_j_4;
x = x_b_17;
flatten_fun_j_44 = fun expr_b_13 -> (
    bool_j_6 = false;
    fail_b_8 = bool_j_6;
    flatten_fun_j_15 = fun expr_b_7 -> (
        var_j_7 = expr_b_7;
        m_match_bool_j_9 = var_j_7 ~ any;
        m_match_bool_j_12 = var_j_7 ~ bool;
        m_match_cond_j_13 = m_match_bool_j_12 ? (
                bool_j_14 = true
            ) : (
                m_match_cond_j_10 = m_match_bool_j_9 ? (
                        var_j_11 = fail_b_8
                    ) : (
                        void_j_8 = {}
                    )
            ));
    flatten_fun_j_19 = fun bj_null -> (
        int_j_16 = 0;
        input_j_17 = input;
        binop_j_18 = int_j_16 <= input_j_17);
    record_j_20 = {checker = flatten_fun_j_15, generator = flatten_fun_j_19};
    proj_j_21 = record_j_20.checker;
    var_j_22 = expr_b_13;
    appl_j_23 = proj_j_21 var_j_22;
    check_1_b_14 = appl_j_23;
    var_j_24 = check_1_b_14;
    if_j_43 = var_j_24 ? (
            bool_j_25 = false;
            fail_b_11 = bool_j_25;
            flatten_fun_j_34 = fun expr_b_10 -> (
                var_j_26 = expr_b_10;
                m_match_bool_j_28 = var_j_26 ~ any;
                m_match_bool_j_31 = var_j_26 ~ int;
                m_match_cond_j_32 = m_match_bool_j_31 ? (
                        bool_j_33 = true
                    ) : (
                        m_match_cond_j_29 = m_match_bool_j_28 ? (
                                var_j_30 = fail_b_11
                            ) : (
                                void_j_27 = {}
                            )
                    ));
            flatten_fun_j_36 = fun bj_null_j_0 -> (
                input_j_35 = input);
            record_j_37 = {checker = flatten_fun_j_34, generator = flatten_fun_j_36};
            proj_j_38 = record_j_37.checker;
            var_j_39 = expr_b_13;
            appl_j_40 = proj_j_38 var_j_39;
            check_2_b_15 = appl_j_40;
            var_j_41 = check_2_b_15
        ) : (
            var_j_42 = check_1_b_14
        ));
flatten_fun_j_83 = fun bj_null_j_3 -> (
    bool_j_45 = false;
    fail_b_1 = bool_j_45;
    flatten_fun_j_54 = fun expr_b_0 -> (
        var_j_46 = expr_b_0;
        m_match_bool_j_48 = var_j_46 ~ any;
        m_match_bool_j_51 = var_j_46 ~ bool;
        m_match_cond_j_52 = m_match_bool_j_51 ? (
                bool_j_53 = true
            ) : (
                m_match_cond_j_49 = m_match_bool_j_48 ? (
                        var_j_50 = fail_b_1
                    ) : (
                        void_j_47 = {}
                    )
            ));
    flatten_fun_j_58 = fun bj_null_j_1 -> (
        int_j_55 = 0;
        input_j_56 = input;
        binop_j_57 = int_j_55 <= input_j_56);
    record_j_59 = {checker = flatten_fun_j_54, generator = flatten_fun_j_58};
    proj_j_60 = record_j_59.generator;
    int_j_61 = 0;
    appl_j_62 = proj_j_60 int_j_61;
    candidate_b_6 = appl_j_62;
    bool_j_63 = false;
    fail_b_4 = bool_j_63;
    flatten_fun_j_72 = fun expr_b_3 -> (
        var_j_64 = expr_b_3;
        m_match_bool_j_66 = var_j_64 ~ any;
        m_match_bool_j_69 = var_j_64 ~ int;
        m_match_cond_j_70 = m_match_bool_j_69 ? (
                bool_j_71 = true
            ) : (
                m_match_cond_j_67 = m_match_bool_j_66 ? (
                        var_j_68 = fail_b_4
                    ) : (
                        void_j_65 = {}
                    )
            ));
    flatten_fun_j_74 = fun bj_null_j_2 -> (
        input_j_73 = input);
    record_j_75 = {checker = flatten_fun_j_72, generator = flatten_fun_j_74};
    proj_j_76 = record_j_75.checker;
    var_j_77 = candidate_b_6;
    appl_j_78 = proj_j_76 var_j_77;
    if_j_82 = appl_j_78 ? (
            var_j_79 = candidate_b_6
        ) : (
            bool_j_80 = false;
            assume_j_81 = assume bool_j_80
        ));
record_j_84 = {checker = flatten_fun_j_44, generator = flatten_fun_j_83};
proj_j_85 = record_j_84.checker;
appl_j_87 = proj_j_85 x_b_17;
check_res_b_18 = appl_j_87;
if_j_95 = check_res_b_18 ? (
        var_j_89 = x
    ) : (
        error_var_j_90 = check_res_b_18;
        assert_pred_j_91 = error_var_j_90;
        assert_res_j_92 = assert_pred_j_91 ? (
                assert_res_true_j_93 = {}
            ) : (
                ab_j_94 = abort
            )
    );
i_result = if_j_95