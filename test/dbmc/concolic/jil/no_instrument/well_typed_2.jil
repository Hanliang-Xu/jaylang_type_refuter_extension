int_j_0 = 5;
x_b_3 = int_j_0;
x = x_b_3;
bool_j_2 = false;
fail_b_1 = bool_j_2;
flatten_fun_j_11 = fun expr_b_0 -> (
    var_j_3 = expr_b_0;
    m_match_bool_j_5 = var_j_3 ~ any;
    m_match_bool_j_8 = var_j_3 ~ int;
    m_match_cond_j_9 = m_match_bool_j_8 ? (
            bool_j_10 = true
        ) : (
            m_match_cond_j_6 = m_match_bool_j_5 ? (
                    var_j_7 = fail_b_1
                ) : (
                    void_j_4 = {}
                )
        ));
flatten_fun_j_13 = fun bj_null -> (
    input_j_12 = input);
record_j_14 = {checker = flatten_fun_j_11, generator = flatten_fun_j_13};
proj_j_15 = record_j_14.checker;
appl_j_17 = proj_j_15 x_b_3;
check_res_b_4 = appl_j_17;
if_j_25 = check_res_b_4 ? (
        var_j_19 = x
    ) : (
        error_var_j_20 = check_res_b_4;
        assert_pred_j_21 = error_var_j_20;
        assert_res_j_22 = assert_pred_j_21 ? (
                assert_res_true_j_23 = {}
            ) : (
                ab_j_24 = abort
            )
    );
i_result = if_j_25