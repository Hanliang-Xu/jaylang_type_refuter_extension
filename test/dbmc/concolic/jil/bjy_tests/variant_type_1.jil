i_first = {};
flatten_fun_j_31 = fun expr_b_5 -> (
    bool_j_5 = false;
    variant_fail_b_4 = bool_j_5;
    var_j_6 = expr_b_5;
    m_match_bool_j_8 = var_j_6 ~ any;
    m_match_bool_j_11 = var_j_6 ~ {j_value, j_variant_A, _};
    m_match_cond_j_12 = m_match_bool_j_11 ? (
            v_expr_b_6 = var_j_6.j_value;
            bool_j_13 = false;
            fail_b_8 = bool_j_13;
            flatten_fun_j_22 = fun expr_b_7 -> (
                var_j_14 = expr_b_7;
                m_match_bool_j_16 = var_j_14 ~ any;
                m_match_bool_j_19 = var_j_14 ~ int;
                m_match_cond_j_20 = m_match_bool_j_19 ? (
                        bool_j_21 = true
                    ) : (
                        m_match_cond_j_17 = m_match_bool_j_16 ? (
                                var_j_18 = fail_b_8
                            ) : (
                                void_j_15 = {}
                            )
                    ));
            flatten_fun_j_24 = fun bj_null -> (
                input_j_23 = input);
            flatten_fun_j_26 = fun expr_b_9 -> (
                var_j_25 = expr_b_9);
            record_j_27 = {checker = flatten_fun_j_22, generator = flatten_fun_j_24, wrapper = flatten_fun_j_26};
            proj_j_28 = record_j_27.checker;
            var_j_29 = v_expr_b_6;
            appl_j_30 = proj_j_28 var_j_29
        ) : (
            m_match_cond_j_9 = m_match_bool_j_8 ? (
                    var_j_10 = variant_fail_b_4
                ) : (
                    void_j_7 = {}
                )
        ));
bool_j_32 = false;
fail_b_1 = bool_j_32;
flatten_fun_j_41 = fun expr_b_0 -> (
    var_j_33 = expr_b_0;
    m_match_bool_j_35 = var_j_33 ~ any;
    m_match_bool_j_38 = var_j_33 ~ int;
    m_match_cond_j_39 = m_match_bool_j_38 ? (
            bool_j_40 = true
        ) : (
            m_match_cond_j_36 = m_match_bool_j_35 ? (
                    var_j_37 = fail_b_1
                ) : (
                    void_j_34 = {}
                )
        ));
flatten_fun_j_43 = fun bj_null_j_0 -> (
    input_j_42 = input);
flatten_fun_j_45 = fun expr_b_2 -> (
    var_j_44 = expr_b_2);
record_j_46 = {checker = flatten_fun_j_41, generator = flatten_fun_j_43, wrapper = flatten_fun_j_45};
proj_j_47 = record_j_46.generator;
int_j_48 = 0;
appl_j_49 = proj_j_47 int_j_48;
record_j_50 = {};
record_j_51 = {j_value = appl_j_49, j_variant_A = record_j_50};
v_expr_b_3 = record_j_51;
flatten_fun_j_53 = fun bj_null_j_1 -> (
    var_j_52 = v_expr_b_3);
flatten_fun_j_55 = fun expr_b_10 -> (
    var_j_54 = expr_b_10);
record_j_56 = {checker = flatten_fun_j_31, generator = flatten_fun_j_53, wrapper = flatten_fun_j_55};
proj_j_57 = record_j_56.wrapper;
bool_j_58 = true;
record_j_59 = {};
record_j_60 = {j_value = bool_j_58, j_variant_A = record_j_59};
m_i_126 = proj_j_57 ~ fun;
appl_j_61 = m_i_126 ? (
        c_appl_i_127 = proj_j_57 record_j_60
    ) : (
        ab_i_128 = abort
    );
x_b_22 = appl_j_61;
x = x_b_22;
flatten_fun_j_89 = fun expr_b_16 -> (
    bool_j_63 = false;
    variant_fail_b_15 = bool_j_63;
    var_j_64 = expr_b_16;
    m_match_bool_j_66 = var_j_64 ~ any;
    m_match_bool_j_69 = var_j_64 ~ {j_value, j_variant_A, _};
    m_match_cond_j_70 = m_match_bool_j_69 ? (
            v_expr_b_17 = var_j_64.j_value;
            bool_j_71 = false;
            fail_b_19 = bool_j_71;
            flatten_fun_j_80 = fun expr_b_18 -> (
                var_j_72 = expr_b_18;
                m_match_bool_j_74 = var_j_72 ~ any;
                m_match_bool_j_77 = var_j_72 ~ int;
                m_match_cond_j_78 = m_match_bool_j_77 ? (
                        bool_j_79 = true
                    ) : (
                        m_match_cond_j_75 = m_match_bool_j_74 ? (
                                var_j_76 = fail_b_19
                            ) : (
                                void_j_73 = {}
                            )
                    ));
            flatten_fun_j_82 = fun bj_null_j_2 -> (
                input_j_81 = input);
            flatten_fun_j_84 = fun expr_b_20 -> (
                var_j_83 = expr_b_20);
            record_j_85 = {checker = flatten_fun_j_80, generator = flatten_fun_j_82, wrapper = flatten_fun_j_84};
            proj_j_86 = record_j_85.checker;
            var_j_87 = v_expr_b_17;
            appl_j_88 = proj_j_86 var_j_87
        ) : (
            m_match_cond_j_67 = m_match_bool_j_66 ? (
                    var_j_68 = variant_fail_b_15
                ) : (
                    void_j_65 = {}
                )
        ));
bool_j_90 = false;
fail_b_12 = bool_j_90;
flatten_fun_j_99 = fun expr_b_11 -> (
    var_j_91 = expr_b_11;
    m_match_bool_j_93 = var_j_91 ~ any;
    m_match_bool_j_96 = var_j_91 ~ int;
    m_match_cond_j_97 = m_match_bool_j_96 ? (
            bool_j_98 = true
        ) : (
            m_match_cond_j_94 = m_match_bool_j_93 ? (
                    var_j_95 = fail_b_12
                ) : (
                    void_j_92 = {}
                )
        ));
flatten_fun_j_101 = fun bj_null_j_3 -> (
    input_j_100 = input);
flatten_fun_j_103 = fun expr_b_13 -> (
    var_j_102 = expr_b_13);
record_j_104 = {checker = flatten_fun_j_99, generator = flatten_fun_j_101, wrapper = flatten_fun_j_103};
proj_j_105 = record_j_104.generator;
int_j_106 = 0;
appl_j_107 = proj_j_105 int_j_106;
record_j_108 = {};
record_j_109 = {j_value = appl_j_107, j_variant_A = record_j_108};
v_expr_b_14 = record_j_109;
flatten_fun_j_111 = fun bj_null_j_4 -> (
    var_j_110 = v_expr_b_14);
flatten_fun_j_113 = fun expr_b_21 -> (
    var_j_112 = expr_b_21);
record_j_114 = {checker = flatten_fun_j_89, generator = flatten_fun_j_111, wrapper = flatten_fun_j_113};
proj_j_115 = record_j_114.checker;
appl_j_117 = proj_j_115 x_b_22;
check_res_b_23 = appl_j_117;
if_j_125 = check_res_b_23 ? (
        var_j_119 = x
    ) : (
        error_var_j_120 = check_res_b_23;
        assert_pred_j_121 = error_var_j_120;
        assert_res_j_122 = assert_pred_j_121 ? (
                assert_res_true_j_123 = {}
            ) : (
                ab_j_124 = abort
            )
    );
i_result = if_j_125