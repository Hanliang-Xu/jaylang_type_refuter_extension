i_first = {};
f_j_109 = fun n -> (
    flatten_fun_j_106 = fun n_b_0 -> (
        int_j_7 = 0;
        input_j_8 = input;
        m_bl_i_193 = int_j_7 ~ int;
        m_br_i_194 = input_j_8 ~ int;
        m_b_i_195 = m_bl_i_193 and m_br_i_194;
        binop_j_9 = m_b_i_195 ? (
                c_binop_i_196 = int_j_7 < input_j_8
            ) : (
                ab_i_197 = abort
            );
        if_j_66 = binop_j_9 ? (
                flatten_fun_j_36 = fun expr_b_18 -> (
                    bool_j_10 = false;
                    variant_fail_b_17 = bool_j_10;
                    var_j_11 = expr_b_18;
                    m_match_bool_j_13 = var_j_11 ~ any;
                    m_match_bool_j_16 = var_j_11 ~ {j_value, j_variant_A, _};
                    m_match_cond_j_17 = m_match_bool_j_16 ? (
                            v_expr_b_19 = var_j_11.j_value;
                            bool_j_18 = false;
                            fail_b_21 = bool_j_18;
                            flatten_fun_j_27 = fun expr_b_20 -> (
                                var_j_19 = expr_b_20;
                                m_match_bool_j_21 = var_j_19 ~ any;
                                m_match_bool_j_24 = var_j_19 ~ int;
                                m_match_cond_j_25 = m_match_bool_j_24 ? (
                                        bool_j_26 = true
                                    ) : (
                                        m_match_cond_j_22 = m_match_bool_j_21 ? (
                                                var_j_23 = fail_b_21
                                            ) : (
                                                void_j_20 = {}
                                            )
                                    ));
                            flatten_fun_j_29 = fun bj_null_j_3 -> (
                                input_j_28 = input);
                            flatten_fun_j_31 = fun expr_b_22 -> (
                                var_j_30 = expr_b_22);
                            record_j_32 = {checker = flatten_fun_j_27, generator = flatten_fun_j_29, wrapper = flatten_fun_j_31};
                            proj_j_33 = record_j_32.checker;
                            var_j_34 = v_expr_b_19;
                            appl_j_35 = proj_j_33 var_j_34
                        ) : (
                            m_match_cond_j_14 = m_match_bool_j_13 ? (
                                    var_j_15 = variant_fail_b_17
                                ) : (
                                    void_j_12 = {}
                                )
                        ));
                bool_j_37 = false;
                fail_b_14 = bool_j_37;
                flatten_fun_j_46 = fun expr_b_13 -> (
                    var_j_38 = expr_b_13;
                    m_match_bool_j_40 = var_j_38 ~ any;
                    m_match_bool_j_43 = var_j_38 ~ int;
                    m_match_cond_j_44 = m_match_bool_j_43 ? (
                            bool_j_45 = true
                        ) : (
                            m_match_cond_j_41 = m_match_bool_j_40 ? (
                                    var_j_42 = fail_b_14
                                ) : (
                                    void_j_39 = {}
                                )
                        ));
                flatten_fun_j_48 = fun bj_null_j_4 -> (
                    input_j_47 = input);
                flatten_fun_j_50 = fun expr_b_15 -> (
                    var_j_49 = expr_b_15);
                record_j_51 = {checker = flatten_fun_j_46, generator = flatten_fun_j_48, wrapper = flatten_fun_j_50};
                proj_j_52 = record_j_51.generator;
                int_j_53 = 0;
                appl_j_54 = proj_j_52 int_j_53;
                record_j_55 = {};
                record_j_56 = {j_value = appl_j_54, j_variant_A = record_j_55};
                v_expr_b_16 = record_j_56;
                flatten_fun_j_58 = fun bj_null_j_5 -> (
                    var_j_57 = v_expr_b_16);
                flatten_fun_j_60 = fun expr_b_23 -> (
                    var_j_59 = expr_b_23);
                record_j_61 = {checker = flatten_fun_j_36, generator = flatten_fun_j_58, wrapper = flatten_fun_j_60};
                proj_j_62 = record_j_61.checker;
                var_j_63 = n_b_0;
                m_i_198 = proj_j_62 ~ fun;
                appl_j_64 = m_i_198 ? (
                        c_appl_i_199 = proj_j_62 var_j_63
                    ) : (
                        ab_i_200 = abort
                    )
            ) : (
                bool_j_65 = true
            );
        arg_check_b_1 = if_j_66;
        var_j_67 = arg_check_b_1;
        if_j_105 = var_j_67 ? (
                bool_j_68 = false;
                fail_b_25 = bool_j_68;
                flatten_fun_j_77 = fun expr_b_24 -> (
                    var_j_69 = expr_b_24;
                    m_match_bool_j_71 = var_j_69 ~ any;
                    m_match_bool_j_74 = var_j_69 ~ int;
                    m_match_cond_j_75 = m_match_bool_j_74 ? (
                            bool_j_76 = true
                        ) : (
                            m_match_cond_j_72 = m_match_bool_j_71 ? (
                                    var_j_73 = fail_b_25
                                ) : (
                                    void_j_70 = {}
                                )
                        ));
                flatten_fun_j_79 = fun bj_null_j_6 -> (
                    input_j_78 = input);
                flatten_fun_j_81 = fun expr_b_26 -> (
                    var_j_80 = expr_b_26);
                record_j_82 = {checker = flatten_fun_j_77, generator = flatten_fun_j_79, wrapper = flatten_fun_j_81};
                proj_j_83 = record_j_82.wrapper;
                bool_j_84 = false;
                fail_b_27 = bool_j_84;
                var_j_85 = n;
                m_match_bool_j_87 = var_j_85 ~ {j_value, j_variant_A, _};
                m_match_bool_j_92 = var_j_85 ~ {bj_untouched, _};
                m_match_cond_j_93 = m_match_bool_j_92 ? (
                        var_j_94 = fail_b_27;
                        assert_pred_j_95 = var_j_94;
                        assert_res_j_96 = assert_pred_j_95 ? (
                                assert_res_true_j_97 = {}
                            ) : (
                                ab_j_98 = abort
                            )
                    ) : (
                        m_match_cond_j_88 = m_match_bool_j_87 ? (
                                x = var_j_85.j_value;
                                int_j_89 = 0;
                                var_j_90 = x;
                                m_bl_i_201 = int_j_89 ~ int;
                                m_br_i_202 = var_j_90 ~ int;
                                m_b_i_203 = m_bl_i_201 and m_br_i_202;
                                binop_j_91 = m_b_i_203 ? (
                                        c_binop_i_204 = int_j_89 <= var_j_90
                                    ) : (
                                        ab_i_205 = abort
                                    )
                            ) : (
                                ab_j_86 = abort
                            )
                    );
                m_i_206 = proj_j_83 ~ fun;
                appl_j_99 = m_i_206 ? (
                        c_appl_i_207 = proj_j_83 m_match_cond_j_93
                    ) : (
                        ab_i_208 = abort
                    )
            ) : (
                var_j_100 = arg_check_b_1;
                assert_pred_j_101 = var_j_100;
                assert_res_j_102 = assert_pred_j_101 ? (
                        assert_res_true_j_103 = {}
                    ) : (
                        ab_j_104 = abort
                    )
            ));
    var_j_107 = n;
    appl_j_108 = flatten_fun_j_106 var_j_107);
f = f_j_109;
flatten_fun_j_136 = fun expr_b_7 -> (
    bool_j_110 = false;
    variant_fail_b_6 = bool_j_110;
    var_j_111 = expr_b_7;
    m_match_bool_j_113 = var_j_111 ~ any;
    m_match_bool_j_116 = var_j_111 ~ {j_value, j_variant_A, _};
    m_match_cond_j_117 = m_match_bool_j_116 ? (
            v_expr_b_8 = var_j_111.j_value;
            bool_j_118 = false;
            fail_b_10 = bool_j_118;
            flatten_fun_j_127 = fun expr_b_9 -> (
                var_j_119 = expr_b_9;
                m_match_bool_j_121 = var_j_119 ~ any;
                m_match_bool_j_124 = var_j_119 ~ int;
                m_match_cond_j_125 = m_match_bool_j_124 ? (
                        bool_j_126 = true
                    ) : (
                        m_match_cond_j_122 = m_match_bool_j_121 ? (
                                var_j_123 = fail_b_10
                            ) : (
                                void_j_120 = {}
                            )
                    ));
            flatten_fun_j_129 = fun bj_null -> (
                input_j_128 = input);
            flatten_fun_j_131 = fun expr_b_11 -> (
                var_j_130 = expr_b_11);
            record_j_132 = {checker = flatten_fun_j_127, generator = flatten_fun_j_129, wrapper = flatten_fun_j_131};
            proj_j_133 = record_j_132.checker;
            var_j_134 = v_expr_b_8;
            appl_j_135 = proj_j_133 var_j_134
        ) : (
            m_match_cond_j_114 = m_match_bool_j_113 ? (
                    var_j_115 = variant_fail_b_6
                ) : (
                    void_j_112 = {}
                )
        ));
bool_j_137 = false;
fail_b_3 = bool_j_137;
flatten_fun_j_146 = fun expr_b_2 -> (
    var_j_138 = expr_b_2;
    m_match_bool_j_140 = var_j_138 ~ any;
    m_match_bool_j_143 = var_j_138 ~ int;
    m_match_cond_j_144 = m_match_bool_j_143 ? (
            bool_j_145 = true
        ) : (
            m_match_cond_j_141 = m_match_bool_j_140 ? (
                    var_j_142 = fail_b_3
                ) : (
                    void_j_139 = {}
                )
        ));
flatten_fun_j_148 = fun bj_null_j_0 -> (
    input_j_147 = input);
flatten_fun_j_150 = fun expr_b_4 -> (
    var_j_149 = expr_b_4);
record_j_151 = {checker = flatten_fun_j_146, generator = flatten_fun_j_148, wrapper = flatten_fun_j_150};
proj_j_152 = record_j_151.generator;
int_j_153 = 0;
appl_j_154 = proj_j_152 int_j_153;
record_j_155 = {};
record_j_156 = {j_value = appl_j_154, j_variant_A = record_j_155};
v_expr_b_5 = record_j_156;
flatten_fun_j_158 = fun bj_null_j_1 -> (
    var_j_157 = v_expr_b_5);
flatten_fun_j_160 = fun expr_b_12 -> (
    var_j_159 = expr_b_12);
record_j_161 = {checker = flatten_fun_j_136, generator = flatten_fun_j_158, wrapper = flatten_fun_j_160};
proj_j_162 = record_j_161.generator;
int_j_163 = 0;
appl_j_164 = proj_j_162 int_j_163;
n_b_31 = appl_j_164;
bool_j_165 = false;
fail_b_29 = bool_j_165;
flatten_fun_j_174 = fun expr_b_28 -> (
    var_j_166 = expr_b_28;
    m_match_bool_j_168 = var_j_166 ~ any;
    m_match_bool_j_171 = var_j_166 ~ int;
    m_match_cond_j_172 = m_match_bool_j_171 ? (
            bool_j_173 = true
        ) : (
            m_match_cond_j_169 = m_match_bool_j_168 ? (
                    var_j_170 = fail_b_29
                ) : (
                    void_j_167 = {}
                )
        ));
flatten_fun_j_176 = fun bj_null_j_2 -> (
    input_j_175 = input);
flatten_fun_j_178 = fun expr_b_30 -> (
    var_j_177 = expr_b_30);
record_j_179 = {checker = flatten_fun_j_174, generator = flatten_fun_j_176, wrapper = flatten_fun_j_178};
proj_j_180 = record_j_179.checker;
appl_j_183 = f n_b_31;
appl_j_184 = proj_j_180 appl_j_183;
check_res_b_32 = appl_j_184;
if_j_192 = check_res_b_32 ? (
        var_j_186 = f
    ) : (
        error_var_j_187 = check_res_b_32;
        assert_pred_j_188 = error_var_j_187;
        assert_res_j_189 = assert_pred_j_188 ? (
                assert_res_true_j_190 = {}
            ) : (
                ab_j_191 = abort
            )
    );
i_result = if_j_192