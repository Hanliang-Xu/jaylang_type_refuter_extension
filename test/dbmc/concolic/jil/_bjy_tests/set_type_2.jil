i_first = {};
appl_inc_j_221 = fun inc -> (
    appl_inc_j_220 = fun x -> (
        flatten_fun_j_217 = fun inc_b_2 -> (
            int_j_17 = 0;
            input_j_18 = input;
            m_bl_i_405 = int_j_17 ~ int;
            m_br_i_406 = input_j_18 ~ int;
            m_b_i_407 = m_bl_i_405 and m_br_i_406;
            binop_j_19 = m_b_i_407 ? (
                    c_binop_i_408 = int_j_17 < input_j_18
                ) : (
                    ab_i_409 = abort
                );
            if_j_156 = binop_j_19 ? (
                    flatten_fun_j_59 = fun expr_b_46 -> (
                        bool_j_20 = false;
                        fail_b_41 = bool_j_20;
                        flatten_fun_j_29 = fun expr_b_40 -> (
                            var_j_21 = expr_b_40;
                            m_match_bool_j_23 = var_j_21 ~ any;
                            m_match_bool_j_26 = var_j_21 ~ int;
                            m_match_cond_j_27 = m_match_bool_j_26 ? (
                                    bool_j_28 = true
                                ) : (
                                    m_match_cond_j_24 = m_match_bool_j_23 ? (
                                            var_j_25 = fail_b_41
                                        ) : (
                                            void_j_22 = {}
                                        )
                                ));
                        flatten_fun_j_31 = fun bj_null_j_8 -> (
                            input_j_30 = input);
                        flatten_fun_j_33 = fun expr_b_42 -> (
                            var_j_32 = expr_b_42);
                        record_j_34 = {checker = flatten_fun_j_29, generator = flatten_fun_j_31, wrapper = flatten_fun_j_33};
                        proj_j_35 = record_j_34.generator;
                        int_j_36 = 0;
                        appl_j_37 = proj_j_35 int_j_36;
                        arg_assert_b_47 = appl_j_37;
                        var_j_38 = expr_b_46;
                        var_j_39 = arg_assert_b_47;
                        appl_j_40 = var_j_38 var_j_39;
                        fun_ret_b_48 = appl_j_40;
                        bool_j_41 = false;
                        fail_b_44 = bool_j_41;
                        flatten_fun_j_50 = fun expr_b_43 -> (
                            var_j_42 = expr_b_43;
                            m_match_bool_j_44 = var_j_42 ~ any;
                            m_match_bool_j_47 = var_j_42 ~ int;
                            m_match_cond_j_48 = m_match_bool_j_47 ? (
                                    bool_j_49 = true
                                ) : (
                                    m_match_cond_j_45 = m_match_bool_j_44 ? (
                                            var_j_46 = fail_b_44
                                        ) : (
                                            void_j_43 = {}
                                        )
                                ));
                        flatten_fun_j_52 = fun bj_null_j_9 -> (
                            input_j_51 = input);
                        flatten_fun_j_54 = fun expr_b_45 -> (
                            var_j_53 = expr_b_45);
                        record_j_55 = {checker = flatten_fun_j_50, generator = flatten_fun_j_52, wrapper = flatten_fun_j_54};
                        proj_j_56 = record_j_55.checker;
                        var_j_57 = fun_ret_b_48;
                        appl_j_58 = proj_j_56 var_j_57);
                    flatten_fun_j_104 = fun bj_null_j_12 -> (
                        flatten_fun_j_103 = fun arg_assume_b_38 -> (
                            bool_j_60 = false;
                            fail_b_33 = bool_j_60;
                            flatten_fun_j_69 = fun expr_b_32 -> (
                                var_j_61 = expr_b_32;
                                m_match_bool_j_63 = var_j_61 ~ any;
                                m_match_bool_j_66 = var_j_61 ~ int;
                                m_match_cond_j_67 = m_match_bool_j_66 ? (
                                        bool_j_68 = true
                                    ) : (
                                        m_match_cond_j_64 = m_match_bool_j_63 ? (
                                                var_j_65 = fail_b_33
                                            ) : (
                                                void_j_62 = {}
                                            )
                                    ));
                            flatten_fun_j_71 = fun bj_null_j_10 -> (
                                input_j_70 = input);
                            flatten_fun_j_73 = fun expr_b_34 -> (
                                var_j_72 = expr_b_34);
                            record_j_74 = {checker = flatten_fun_j_69, generator = flatten_fun_j_71, wrapper = flatten_fun_j_73};
                            proj_j_75 = record_j_74.checker;
                            var_j_76 = arg_assume_b_38;
                            appl_j_77 = proj_j_75 var_j_76;
                            if_j_102 = appl_j_77 ? (
                                    bool_j_78 = false;
                                    fail_b_36 = bool_j_78;
                                    flatten_fun_j_87 = fun expr_b_35 -> (
                                        var_j_79 = expr_b_35;
                                        m_match_bool_j_81 = var_j_79 ~ any;
                                        m_match_bool_j_84 = var_j_79 ~ int;
                                        m_match_cond_j_85 = m_match_bool_j_84 ? (
                                                bool_j_86 = true
                                            ) : (
                                                m_match_cond_j_82 = m_match_bool_j_81 ? (
                                                        var_j_83 = fail_b_36
                                                    ) : (
                                                        void_j_80 = {}
                                                    )
                                            ));
                                    flatten_fun_j_89 = fun bj_null_j_11 -> (
                                        input_j_88 = input);
                                    flatten_fun_j_91 = fun expr_b_37 -> (
                                        var_j_90 = expr_b_37);
                                    record_j_92 = {checker = flatten_fun_j_87, generator = flatten_fun_j_89, wrapper = flatten_fun_j_91};
                                    proj_j_93 = record_j_92.generator;
                                    int_j_94 = 0;
                                    appl_j_95 = proj_j_93 int_j_94
                                ) : (
                                    bool_j_96 = false;
                                    fail_b_39 = bool_j_96;
                                    var_j_97 = fail_b_39;
                                    assert_pred_j_98 = var_j_97;
                                    assert_res_j_99 = assert_pred_j_98 ? (
                                            assert_res_true_j_100 = {}
                                        ) : (
                                            ab_j_101 = abort
                                        )
                                )));
                    flatten_fun_j_150 = fun expr_b_55 -> (
                        flatten_fun_j_149 = fun arg_b_56 -> (
                            bool_j_105 = false;
                            fail_b_50 = bool_j_105;
                            flatten_fun_j_114 = fun expr_b_49 -> (
                                var_j_106 = expr_b_49;
                                m_match_bool_j_108 = var_j_106 ~ any;
                                m_match_bool_j_111 = var_j_106 ~ int;
                                m_match_cond_j_112 = m_match_bool_j_111 ? (
                                        bool_j_113 = true
                                    ) : (
                                        m_match_cond_j_109 = m_match_bool_j_108 ? (
                                                var_j_110 = fail_b_50
                                            ) : (
                                                void_j_107 = {}
                                            )
                                    ));
                            flatten_fun_j_116 = fun bj_null_j_13 -> (
                                input_j_115 = input);
                            flatten_fun_j_118 = fun expr_b_51 -> (
                                var_j_117 = expr_b_51);
                            record_j_119 = {checker = flatten_fun_j_114, generator = flatten_fun_j_116, wrapper = flatten_fun_j_118};
                            proj_j_120 = record_j_119.checker;
                            var_j_121 = arg_b_56;
                            m_i_410 = proj_j_120 ~ fun;
                            appl_j_122 = m_i_410 ? (
                                    c_appl_i_411 = proj_j_120 var_j_121
                                ) : (
                                    ab_i_412 = abort
                                );
                            m_i_413 = appl_j_122 ~ bool;
                            if_j_148 = m_i_413 ? (
                                    c_cond_i_420 = appl_j_122 ? (
                                            bool_j_123 = false;
                                            fail_b_53 = bool_j_123;
                                            flatten_fun_j_132 = fun expr_b_52 -> (
                                                var_j_124 = expr_b_52;
                                                m_match_bool_j_126 = var_j_124 ~ any;
                                                m_match_bool_j_129 = var_j_124 ~ int;
                                                m_match_cond_j_130 = m_match_bool_j_129 ? (
                                                        bool_j_131 = true
                                                    ) : (
                                                        m_match_cond_j_127 = m_match_bool_j_126 ? (
                                                                var_j_128 = fail_b_53
                                                            ) : (
                                                                void_j_125 = 
                                                                    {}
                                                            )
                                                    ));
                                            flatten_fun_j_134 = fun bj_null_j_14 -> (
                                                input_j_133 = input);
                                            flatten_fun_j_136 = fun expr_b_54 -> (
                                                var_j_135 = expr_b_54);
                                            record_j_137 = {checker = flatten_fun_j_132, generator = flatten_fun_j_134, wrapper = flatten_fun_j_136};
                                            proj_j_138 = record_j_137.wrapper;
                                            var_j_139 = expr_b_55;
                                            var_j_140 = arg_b_56;
                                            m_i_414 = var_j_139 ~ fun;
                                            appl_j_141 = m_i_414 ? (
                                                    c_appl_i_415 = var_j_139 var_j_140
                                                ) : (
                                                    ab_i_416 = abort
                                                );
                                            m_i_417 = proj_j_138 ~ fun;
                                            appl_j_142 = m_i_417 ? (
                                                    c_appl_i_418 = proj_j_138 appl_j_141
                                                ) : (
                                                    ab_i_419 = abort
                                                )
                                        ) : (
                                            bool_j_143 = false;
                                            assert_pred_j_144 = bool_j_143;
                                            assert_res_j_145 = assert_pred_j_144 ? (
                                                    assert_res_true_j_146 = 
                                                        {}
                                                ) : (
                                                    ab_j_147 = abort
                                                )
                                        )
                                ) : (
                                    ab_i_421 = abort
                                )));
                    record_j_151 = {checker = flatten_fun_j_59, generator = flatten_fun_j_104, wrapper = flatten_fun_j_150};
                    proj_j_152 = record_j_151.checker;
                    var_j_153 = inc_b_2;
                    m_i_422 = proj_j_152 ~ fun;
                    appl_j_154 = m_i_422 ? (
                            c_appl_i_423 = proj_j_152 var_j_153
                        ) : (
                            ab_i_424 = abort
                        )
                ) : (
                    bool_j_155 = true
                );
            arg_check_b_3 = if_j_156;
            var_j_157 = arg_check_b_3;
            if_j_216 = var_j_157 ? (
                    flatten_fun_j_208 = fun x_b_0 -> (
                        int_j_158 = 0;
                        input_j_159 = input;
                        m_bl_i_425 = int_j_158 ~ int;
                        m_br_i_426 = input_j_159 ~ int;
                        m_b_i_427 = m_bl_i_425 and m_br_i_426;
                        binop_j_160 = m_b_i_427 ? (
                                c_binop_i_428 = int_j_158 < input_j_159
                            ) : (
                                ab_i_429 = abort
                            );
                        if_j_180 = binop_j_160 ? (
                                bool_j_161 = false;
                                fail_b_58 = bool_j_161;
                                flatten_fun_j_170 = fun expr_b_57 -> (
                                    var_j_162 = expr_b_57;
                                    m_match_bool_j_164 = var_j_162 ~ any;
                                    m_match_bool_j_167 = var_j_162 ~ int;
                                    m_match_cond_j_168 = m_match_bool_j_167 ? (
                                            bool_j_169 = true
                                        ) : (
                                            m_match_cond_j_165 = m_match_bool_j_164 ? (
                                                    var_j_166 = fail_b_58
                                                ) : (
                                                    void_j_163 = {}
                                                )
                                        ));
                                flatten_fun_j_172 = fun bj_null_j_15 -> (
                                    input_j_171 = input);
                                flatten_fun_j_174 = fun expr_b_59 -> (
                                    var_j_173 = expr_b_59);
                                record_j_175 = {checker = flatten_fun_j_170, generator = flatten_fun_j_172, wrapper = flatten_fun_j_174};
                                proj_j_176 = record_j_175.checker;
                                var_j_177 = x_b_0;
                                m_i_430 = proj_j_176 ~ fun;
                                appl_j_178 = m_i_430 ? (
                                        c_appl_i_431 = proj_j_176 var_j_177
                                    ) : (
                                        ab_i_432 = abort
                                    )
                            ) : (
                                bool_j_179 = true
                            );
                        arg_check_b_1 = if_j_180;
                        var_j_181 = arg_check_b_1;
                        if_j_207 = var_j_181 ? (
                                bool_j_182 = false;
                                fail_b_61 = bool_j_182;
                                flatten_fun_j_191 = fun expr_b_60 -> (
                                    var_j_183 = expr_b_60;
                                    m_match_bool_j_185 = var_j_183 ~ any;
                                    m_match_bool_j_188 = var_j_183 ~ int;
                                    m_match_cond_j_189 = m_match_bool_j_188 ? (
                                            bool_j_190 = true
                                        ) : (
                                            m_match_cond_j_186 = m_match_bool_j_185 ? (
                                                    var_j_187 = fail_b_61
                                                ) : (
                                                    void_j_184 = {}
                                                )
                                        ));
                                flatten_fun_j_193 = fun bj_null_j_16 -> (
                                    input_j_192 = input);
                                flatten_fun_j_195 = fun expr_b_62 -> (
                                    var_j_194 = expr_b_62);
                                record_j_196 = {checker = flatten_fun_j_191, generator = flatten_fun_j_193, wrapper = flatten_fun_j_195};
                                proj_j_197 = record_j_196.wrapper;
                                var_j_198 = inc;
                                var_j_199 = x;
                                m_i_433 = var_j_198 ~ fun;
                                appl_j_200 = m_i_433 ? (
                                        c_appl_i_434 = var_j_198 var_j_199
                                    ) : (
                                        ab_i_435 = abort
                                    );
                                m_i_436 = proj_j_197 ~ fun;
                                appl_j_201 = m_i_436 ? (
                                        c_appl_i_437 = proj_j_197 appl_j_200
                                    ) : (
                                        ab_i_438 = abort
                                    )
                            ) : (
                                var_j_202 = arg_check_b_1;
                                assert_pred_j_203 = var_j_202;
                                assert_res_j_204 = assert_pred_j_203 ? (
                                        assert_res_true_j_205 = {}
                                    ) : (
                                        ab_j_206 = abort
                                    )
                            ));
                    var_j_209 = x;
                    appl_j_210 = flatten_fun_j_208 var_j_209
                ) : (
                    var_j_211 = arg_check_b_3;
                    assert_pred_j_212 = var_j_211;
                    assert_res_j_213 = assert_pred_j_212 ? (
                            assert_res_true_j_214 = {}
                        ) : (
                            ab_j_215 = abort
                        )
                ));
        var_j_218 = inc;
        appl_j_219 = flatten_fun_j_217 var_j_218));
appl_inc = appl_inc_j_221;
flatten_fun_j_261 = fun expr_b_18 -> (
    bool_j_222 = false;
    fail_b_13 = bool_j_222;
    flatten_fun_j_231 = fun expr_b_12 -> (
        var_j_223 = expr_b_12;
        m_match_bool_j_225 = var_j_223 ~ any;
        m_match_bool_j_228 = var_j_223 ~ int;
        m_match_cond_j_229 = m_match_bool_j_228 ? (
                bool_j_230 = true
            ) : (
                m_match_cond_j_226 = m_match_bool_j_225 ? (
                        var_j_227 = fail_b_13
                    ) : (
                        void_j_224 = {}
                    )
            ));
    flatten_fun_j_233 = fun bj_null -> (
        input_j_232 = input);
    flatten_fun_j_235 = fun expr_b_14 -> (
        var_j_234 = expr_b_14);
    record_j_236 = {checker = flatten_fun_j_231, generator = flatten_fun_j_233, wrapper = flatten_fun_j_235};
    proj_j_237 = record_j_236.generator;
    int_j_238 = 0;
    appl_j_239 = proj_j_237 int_j_238;
    arg_assert_b_19 = appl_j_239;
    var_j_240 = expr_b_18;
    var_j_241 = arg_assert_b_19;
    appl_j_242 = var_j_240 var_j_241;
    fun_ret_b_20 = appl_j_242;
    bool_j_243 = false;
    fail_b_16 = bool_j_243;
    flatten_fun_j_252 = fun expr_b_15 -> (
        var_j_244 = expr_b_15;
        m_match_bool_j_246 = var_j_244 ~ any;
        m_match_bool_j_249 = var_j_244 ~ int;
        m_match_cond_j_250 = m_match_bool_j_249 ? (
                bool_j_251 = true
            ) : (
                m_match_cond_j_247 = m_match_bool_j_246 ? (
                        var_j_248 = fail_b_16
                    ) : (
                        void_j_245 = {}
                    )
            ));
    flatten_fun_j_254 = fun bj_null_j_0 -> (
        input_j_253 = input);
    flatten_fun_j_256 = fun expr_b_17 -> (
        var_j_255 = expr_b_17);
    record_j_257 = {checker = flatten_fun_j_252, generator = flatten_fun_j_254, wrapper = flatten_fun_j_256};
    proj_j_258 = record_j_257.checker;
    var_j_259 = fun_ret_b_20;
    appl_j_260 = proj_j_258 var_j_259);
flatten_fun_j_306 = fun bj_null_j_3 -> (
    flatten_fun_j_305 = fun arg_assume_b_10 -> (
        bool_j_262 = false;
        fail_b_5 = bool_j_262;
        flatten_fun_j_271 = fun expr_b_4 -> (
            var_j_263 = expr_b_4;
            m_match_bool_j_265 = var_j_263 ~ any;
            m_match_bool_j_268 = var_j_263 ~ int;
            m_match_cond_j_269 = m_match_bool_j_268 ? (
                    bool_j_270 = true
                ) : (
                    m_match_cond_j_266 = m_match_bool_j_265 ? (
                            var_j_267 = fail_b_5
                        ) : (
                            void_j_264 = {}
                        )
                ));
        flatten_fun_j_273 = fun bj_null_j_1 -> (
            input_j_272 = input);
        flatten_fun_j_275 = fun expr_b_6 -> (
            var_j_274 = expr_b_6);
        record_j_276 = {checker = flatten_fun_j_271, generator = flatten_fun_j_273, wrapper = flatten_fun_j_275};
        proj_j_277 = record_j_276.checker;
        var_j_278 = arg_assume_b_10;
        appl_j_279 = proj_j_277 var_j_278;
        if_j_304 = appl_j_279 ? (
                bool_j_280 = false;
                fail_b_8 = bool_j_280;
                flatten_fun_j_289 = fun expr_b_7 -> (
                    var_j_281 = expr_b_7;
                    m_match_bool_j_283 = var_j_281 ~ any;
                    m_match_bool_j_286 = var_j_281 ~ int;
                    m_match_cond_j_287 = m_match_bool_j_286 ? (
                            bool_j_288 = true
                        ) : (
                            m_match_cond_j_284 = m_match_bool_j_283 ? (
                                    var_j_285 = fail_b_8
                                ) : (
                                    void_j_282 = {}
                                )
                        ));
                flatten_fun_j_291 = fun bj_null_j_2 -> (
                    input_j_290 = input);
                flatten_fun_j_293 = fun expr_b_9 -> (
                    var_j_292 = expr_b_9);
                record_j_294 = {checker = flatten_fun_j_289, generator = flatten_fun_j_291, wrapper = flatten_fun_j_293};
                proj_j_295 = record_j_294.generator;
                int_j_296 = 0;
                appl_j_297 = proj_j_295 int_j_296
            ) : (
                bool_j_298 = false;
                fail_b_11 = bool_j_298;
                var_j_299 = fail_b_11;
                assert_pred_j_300 = var_j_299;
                assert_res_j_301 = assert_pred_j_300 ? (
                        assert_res_true_j_302 = {}
                    ) : (
                        ab_j_303 = abort
                    )
            )));
flatten_fun_j_352 = fun expr_b_27 -> (
    flatten_fun_j_351 = fun arg_b_28 -> (
        bool_j_307 = false;
        fail_b_22 = bool_j_307;
        flatten_fun_j_316 = fun expr_b_21 -> (
            var_j_308 = expr_b_21;
            m_match_bool_j_310 = var_j_308 ~ any;
            m_match_bool_j_313 = var_j_308 ~ int;
            m_match_cond_j_314 = m_match_bool_j_313 ? (
                    bool_j_315 = true
                ) : (
                    m_match_cond_j_311 = m_match_bool_j_310 ? (
                            var_j_312 = fail_b_22
                        ) : (
                            void_j_309 = {}
                        )
                ));
        flatten_fun_j_318 = fun bj_null_j_4 -> (
            input_j_317 = input);
        flatten_fun_j_320 = fun expr_b_23 -> (
            var_j_319 = expr_b_23);
        record_j_321 = {checker = flatten_fun_j_316, generator = flatten_fun_j_318, wrapper = flatten_fun_j_320};
        proj_j_322 = record_j_321.checker;
        var_j_323 = arg_b_28;
        m_i_439 = proj_j_322 ~ fun;
        appl_j_324 = m_i_439 ? (
                c_appl_i_440 = proj_j_322 var_j_323
            ) : (
                ab_i_441 = abort
            );
        m_i_442 = appl_j_324 ~ bool;
        if_j_350 = m_i_442 ? (
                c_cond_i_449 = appl_j_324 ? (
                        bool_j_325 = false;
                        fail_b_25 = bool_j_325;
                        flatten_fun_j_334 = fun expr_b_24 -> (
                            var_j_326 = expr_b_24;
                            m_match_bool_j_328 = var_j_326 ~ any;
                            m_match_bool_j_331 = var_j_326 ~ int;
                            m_match_cond_j_332 = m_match_bool_j_331 ? (
                                    bool_j_333 = true
                                ) : (
                                    m_match_cond_j_329 = m_match_bool_j_328 ? (
                                            var_j_330 = fail_b_25
                                        ) : (
                                            void_j_327 = {}
                                        )
                                ));
                        flatten_fun_j_336 = fun bj_null_j_5 -> (
                            input_j_335 = input);
                        flatten_fun_j_338 = fun expr_b_26 -> (
                            var_j_337 = expr_b_26);
                        record_j_339 = {checker = flatten_fun_j_334, generator = flatten_fun_j_336, wrapper = flatten_fun_j_338};
                        proj_j_340 = record_j_339.wrapper;
                        var_j_341 = expr_b_27;
                        var_j_342 = arg_b_28;
                        m_i_443 = var_j_341 ~ fun;
                        appl_j_343 = m_i_443 ? (
                                c_appl_i_444 = var_j_341 var_j_342
                            ) : (
                                ab_i_445 = abort
                            );
                        m_i_446 = proj_j_340 ~ fun;
                        appl_j_344 = m_i_446 ? (
                                c_appl_i_447 = proj_j_340 appl_j_343
                            ) : (
                                ab_i_448 = abort
                            )
                    ) : (
                        bool_j_345 = false;
                        assert_pred_j_346 = bool_j_345;
                        assert_res_j_347 = assert_pred_j_346 ? (
                                assert_res_true_j_348 = {}
                            ) : (
                                ab_j_349 = abort
                            )
                    )
            ) : (
                ab_i_450 = abort
            )));
record_j_353 = {checker = flatten_fun_j_261, generator = flatten_fun_j_306, wrapper = flatten_fun_j_352};
proj_j_354 = record_j_353.generator;
int_j_355 = 0;
appl_j_356 = proj_j_354 int_j_355;
inc_b_67 = appl_j_356;
bool_j_357 = false;
fail_b_30 = bool_j_357;
flatten_fun_j_366 = fun expr_b_29 -> (
    var_j_358 = expr_b_29;
    m_match_bool_j_360 = var_j_358 ~ any;
    m_match_bool_j_363 = var_j_358 ~ int;
    m_match_cond_j_364 = m_match_bool_j_363 ? (
            bool_j_365 = true
        ) : (
            m_match_cond_j_361 = m_match_bool_j_360 ? (
                    var_j_362 = fail_b_30
                ) : (
                    void_j_359 = {}
                )
        ));
flatten_fun_j_368 = fun bj_null_j_6 -> (
    input_j_367 = input);
flatten_fun_j_370 = fun expr_b_31 -> (
    var_j_369 = expr_b_31);
record_j_371 = {checker = flatten_fun_j_366, generator = flatten_fun_j_368, wrapper = flatten_fun_j_370};
proj_j_372 = record_j_371.generator;
int_j_373 = 0;
appl_j_374 = proj_j_372 int_j_373;
x_b_66 = appl_j_374;
bool_j_375 = false;
fail_b_64 = bool_j_375;
flatten_fun_j_384 = fun expr_b_63 -> (
    var_j_376 = expr_b_63;
    m_match_bool_j_378 = var_j_376 ~ any;
    m_match_bool_j_381 = var_j_376 ~ int;
    m_match_cond_j_382 = m_match_bool_j_381 ? (
            bool_j_383 = true
        ) : (
            m_match_cond_j_379 = m_match_bool_j_378 ? (
                    var_j_380 = fail_b_64
                ) : (
                    void_j_377 = {}
                )
        ));
flatten_fun_j_386 = fun bj_null_j_7 -> (
    input_j_385 = input);
flatten_fun_j_388 = fun expr_b_65 -> (
    var_j_387 = expr_b_65);
record_j_389 = {checker = flatten_fun_j_384, generator = flatten_fun_j_386, wrapper = flatten_fun_j_388};
proj_j_390 = record_j_389.checker;
appl_j_393 = appl_inc inc_b_67;
appl_j_395 = appl_j_393 x_b_66;
appl_j_396 = proj_j_390 appl_j_395;
check_res_b_68 = appl_j_396;
if_j_404 = check_res_b_68 ? (
        var_j_398 = appl_inc
    ) : (
        error_var_j_399 = check_res_b_68;
        assert_pred_j_400 = error_var_j_399;
        assert_res_j_401 = assert_pred_j_400 ? (
                assert_res_true_j_402 = {}
            ) : (
                ab_j_403 = abort
            )
    );
i_result = if_j_404