
x = input;

one = 1;
r_expected_pattern = { b = one };

x_is_one = one == x;
x_is_one_branch = x_is_one ? (
  r_matching_pattern = { b = two }
) : (
  r_not_matching_pattern = { a = one }
);

r_actual_pattern = x_is_one_branch;

pattern_match_cond = r_actual_pattern ~ { b };
pattern_match_branch = pattern_match_cond ? (
  hit_when_x_is_one = 0
) : (
  hit_when_x_not_one = 1
);

# This is last branch hit, so it helps us target x = 1 or not
v = x_is_one ? (
  a = 0
) : (
  b = 1
)