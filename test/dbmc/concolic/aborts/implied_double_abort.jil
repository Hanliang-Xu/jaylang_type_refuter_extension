# This is to check what happens if both lines of a branches imply
# that the program will hit an abort, so neither side should be
# ever hit, and therefore the parent branch of that branch needs to
# be avoided.

x = input;

f = fun y -> (
  y_is_x_cond = x == y;
  y_is_x_branch = y_is_x_cond ? (
    abort_y_is_x = abort
  ) : (
    no_abort0 = 0
  );

  y_is_not_x_cond = not y_is_x_cond;
  y_is_not_x_branch = y_is_not_x_cond ? (
    abort_y_is_not_x = abort
  ) : (
    # unsatisfiable because of abort
    no_abort1 = 1
  );

  unreachable_return = 0
);

y0 = 0;

neg_11 = -11;

x_gt_neg_11 = neg_11 < x; # always true on first run

x_gt_neg_11_branch = x_gt_neg_11 ? (
  # always reaches abort, and always hit on first run
  always_aborts = f y0
) : (
  res = 42
);

last_cond = x_gt_neg_11_branch == y0;

last_branch = last_cond ? (
  # unsatisfiable because of aborts
  unsatisfiable = -42 
) : (
  # satisfiable
  satisfiable = 84
)