bool_j_4 = true;
x = bool_j_4;
flatten_fun_j_43 = fun expr_b_13 -> (
    bool_j_5 = false;
    fail_b_8 = bool_j_5;
    flatten_fun_j_14 = fun expr_b_7 -> (
        var_j_6 = expr_b_7;
        m_match_bool_j_8 = var_j_6 ~ any;
        m_match_bool_j_11 = var_j_6 ~ bool;
        m_match_cond_j_12 = m_match_bool_j_11 ? (
                bool_j_13 = true
            ) : (
                m_match_cond_j_9 = m_match_bool_j_8 ? (
                        var_j_10 = fail_b_8
                    ) : (
                        void_j_7 = {}
                    )
            ));
    flatten_fun_j_18 = fun bj_null -> (
        int_j_15 = 0;
        input_j_16 = input;
        binop_j_17 = int_j_15 <= input_j_16);
    record_j_19 = {checker = flatten_fun_j_14, generator = flatten_fun_j_18};
    proj_j_20 = record_j_19.checker;
    var_j_21 = expr_b_13;
    appl_j_22 = proj_j_20 var_j_21;
    check_1_b_14 = appl_j_22;
    var_j_23 = check_1_b_14;
    if_j_42 = var_j_23 ? (
            bool_j_24 = false;
            fail_b_11 = bool_j_24;
            flatten_fun_j_33 = fun expr_b_10 -> (
                var_j_25 = expr_b_10;
                m_match_bool_j_27 = var_j_25 ~ any;
                m_match_bool_j_30 = var_j_25 ~ int;
                m_match_cond_j_31 = m_match_bool_j_30 ? (
                        bool_j_32 = true
                    ) : (
                        m_match_cond_j_28 = m_match_bool_j_27 ? (
                                var_j_29 = fail_b_11
                            ) : (
                                void_j_26 = {}
                            )
                    ));
            flatten_fun_j_35 = fun bj_null_j_0 -> (
                input_j_34 = input);
            record_j_36 = {checker = flatten_fun_j_33, generator = flatten_fun_j_35};
            proj_j_37 = record_j_36.checker;
            var_j_38 = expr_b_13;
            appl_j_39 = proj_j_37 var_j_38;
            check_2_b_15 = appl_j_39;
            var_j_40 = check_2_b_15
        ) : (
            var_j_41 = check_1_b_14
        ));
flatten_fun_j_82 = fun bj_null_j_3 -> (
    bool_j_44 = false;
    fail_b_1 = bool_j_44;
    flatten_fun_j_53 = fun expr_b_0 -> (
        var_j_45 = expr_b_0;
        m_match_bool_j_47 = var_j_45 ~ any;
        m_match_bool_j_50 = var_j_45 ~ bool;
        m_match_cond_j_51 = m_match_bool_j_50 ? (
                bool_j_52 = true
            ) : (
                m_match_cond_j_48 = m_match_bool_j_47 ? (
                        var_j_49 = fail_b_1
                    ) : (
                        void_j_46 = {}
                    )
            ));
    flatten_fun_j_57 = fun bj_null_j_1 -> (
        int_j_54 = 0;
        input_j_55 = input;
        binop_j_56 = int_j_54 <= input_j_55);
    record_j_58 = {checker = flatten_fun_j_53, generator = flatten_fun_j_57};
    proj_j_59 = record_j_58.generator;
    int_j_60 = 0;
    appl_j_61 = proj_j_59 int_j_60;
    candidate_b_6 = appl_j_61;
    bool_j_62 = false;
    fail_b_4 = bool_j_62;
    flatten_fun_j_71 = fun expr_b_3 -> (
        var_j_63 = expr_b_3;
        m_match_bool_j_65 = var_j_63 ~ any;
        m_match_bool_j_68 = var_j_63 ~ int;
        m_match_cond_j_69 = m_match_bool_j_68 ? (
                bool_j_70 = true
            ) : (
                m_match_cond_j_66 = m_match_bool_j_65 ? (
                        var_j_67 = fail_b_4
                    ) : (
                        void_j_64 = {}
                    )
            ));
    flatten_fun_j_73 = fun bj_null_j_2 -> (
        input_j_72 = input);
    record_j_74 = {checker = flatten_fun_j_71, generator = flatten_fun_j_73};
    proj_j_75 = record_j_74.checker;
    var_j_76 = candidate_b_6;
    appl_j_77 = proj_j_75 var_j_76;
    if_j_81 = appl_j_77 ? (
            var_j_78 = candidate_b_6
        ) : (
            bool_j_79 = false;
            assume_j_80 = assume bool_j_79
        ));
record_j_83 = {checker = flatten_fun_j_43, generator = flatten_fun_j_82};
proj_j_84 = record_j_83.checker;
bool_j_85 = true;
appl_j_86 = proj_j_84 bool_j_85;
check_res_b_17 = appl_j_86;
if_j_94 = check_res_b_17 ? (
        var_j_88 = x
    ) : (
        error_var_j_89 = check_res_b_17;
        assert_pred_j_90 = error_var_j_89;
        assert_res_j_91 = assert_pred_j_90 ? (
                assert_res_true_j_92 = {}
            ) : (
                ab_j_93 = abort
            )
    );
i_result = if_j_94