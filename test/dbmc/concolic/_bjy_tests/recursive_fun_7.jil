i_first = {};
flatten_fun_j_61 = fun fold_j_2 -> (
    flatten_fun_j_60 = fun acc -> (
        flatten_fun_j_59 = fun foldf -> (
            flatten_fun_j_58 = fun lst -> (
                var_j_29 = fold_j_2;
                var_j_30 = fold_j_2;
                appl_j_31 = var_j_29 var_j_30;
                fold = appl_j_31;
                bool_j_32 = false;
                fail_b_109 = bool_j_32;
                var_j_33 = lst;
                m_match_bool_j_35 = var_j_33 ~ {j_head, j_tail, _};
                m_match_bool_j_48 = var_j_33 ~ {j_empty, _};
                m_match_bool_j_51 = var_j_33 ~ {bj_untouched, _};
                m_match_cond_j_52 = m_match_bool_j_51 ? (
                        var_j_53 = fail_b_109;
                        assert_pred_j_54 = var_j_53;
                        assert_res_j_55 = assert_pred_j_54 ? (
                                assert_res_true_j_56 = {}
                            ) : (
                                ab_j_57 = abort
                            )
                    ) : (
                        m_match_cond_j_49 = m_match_bool_j_48 ? (
                                var_j_50 = acc
                            ) : (
                                m_match_cond_j_36 = m_match_bool_j_35 ? (
                                        hd = var_j_33.j_head;
                                        tl = var_j_33.j_tail;
                                        var_j_37 = fold;
                                        var_j_38 = foldf;
                                        var_j_39 = acc;
                                        appl_j_40 = var_j_38 var_j_39;
                                        var_j_41 = hd;
                                        appl_j_42 = appl_j_40 var_j_41;
                                        appl_j_43 = var_j_37 appl_j_42;
                                        var_j_44 = foldf;
                                        appl_j_45 = appl_j_43 var_j_44;
                                        var_j_46 = tl;
                                        appl_j_47 = appl_j_45 var_j_46
                                    ) : (
                                        ab_j_34 = abort
                                    )
                            )
                    )))));
appl_j_64 = flatten_fun_j_61 flatten_fun_j_61;
bool_j_65 = false;
fail_b_1 = bool_j_65;
flatten_fun_j_74 = fun expr_b_0 -> (
    var_j_66 = expr_b_0;
    m_match_bool_j_68 = var_j_66 ~ any;
    m_match_bool_j_71 = var_j_66 ~ bool;
    m_match_cond_j_72 = m_match_bool_j_71 ? (
            bool_j_73 = true
        ) : (
            m_match_cond_j_69 = m_match_bool_j_68 ? (
                    var_j_70 = fail_b_1
                ) : (
                    void_j_67 = {}
                )
        ));
flatten_fun_j_78 = fun bj_null -> (
    int_j_75 = 0;
    input_j_76 = input;
    binop_j_77 = int_j_75 <= input_j_76);
record_j_79 = {checker = flatten_fun_j_74, generator = flatten_fun_j_78};
proj_j_80 = record_j_79.generator;
int_j_81 = 0;
appl_j_82 = proj_j_80 int_j_81;
acc_b_116 = appl_j_82;
flatten_fun_j_189 = fun expr_b_61 -> (
    bool_j_83 = false;
    fail_b_34 = bool_j_83;
    flatten_fun_j_92 = fun expr_b_33 -> (
        var_j_84 = expr_b_33;
        m_match_bool_j_86 = var_j_84 ~ any;
        m_match_bool_j_89 = var_j_84 ~ bool;
        m_match_cond_j_90 = m_match_bool_j_89 ? (
                bool_j_91 = true
            ) : (
                m_match_cond_j_87 = m_match_bool_j_86 ? (
                        var_j_88 = fail_b_34
                    ) : (
                        void_j_85 = {}
                    )
            ));
    flatten_fun_j_96 = fun bj_null_j_3 -> (
        int_j_93 = 0;
        input_j_94 = input;
        binop_j_95 = int_j_93 <= input_j_94);
    record_j_97 = {checker = flatten_fun_j_92, generator = flatten_fun_j_96};
    proj_j_98 = record_j_97.generator;
    int_j_99 = 0;
    appl_j_100 = proj_j_98 int_j_99;
    arg_assert_b_62 = appl_j_100;
    var_j_101 = expr_b_61;
    var_j_102 = arg_assert_b_62;
    appl_j_103 = var_j_101 var_j_102;
    fun_ret_b_63 = appl_j_103;
    flatten_fun_j_141 = fun expr_b_50 -> (
        bool_j_104 = false;
        fail_b_45 = bool_j_104;
        flatten_fun_j_113 = fun expr_b_44 -> (
            var_j_105 = expr_b_44;
            m_match_bool_j_107 = var_j_105 ~ any;
            m_match_bool_j_110 = var_j_105 ~ int;
            m_match_cond_j_111 = m_match_bool_j_110 ? (
                    bool_j_112 = true
                ) : (
                    m_match_cond_j_108 = m_match_bool_j_107 ? (
                            var_j_109 = fail_b_45
                        ) : (
                            void_j_106 = {}
                        )
                ));
        flatten_fun_j_115 = fun bj_null_j_4 -> (
            input_j_114 = input);
        record_j_116 = {checker = flatten_fun_j_113, generator = flatten_fun_j_115};
        proj_j_117 = record_j_116.generator;
        int_j_118 = 0;
        appl_j_119 = proj_j_117 int_j_118;
        arg_assert_b_51 = appl_j_119;
        var_j_120 = expr_b_50;
        var_j_121 = arg_assert_b_51;
        appl_j_122 = var_j_120 var_j_121;
        fun_ret_b_52 = appl_j_122;
        bool_j_123 = false;
        fail_b_48 = bool_j_123;
        flatten_fun_j_132 = fun expr_b_47 -> (
            var_j_124 = expr_b_47;
            m_match_bool_j_126 = var_j_124 ~ any;
            m_match_bool_j_129 = var_j_124 ~ bool;
            m_match_cond_j_130 = m_match_bool_j_129 ? (
                    bool_j_131 = true
                ) : (
                    m_match_cond_j_127 = m_match_bool_j_126 ? (
                            var_j_128 = fail_b_48
                        ) : (
                            void_j_125 = {}
                        )
                ));
        flatten_fun_j_136 = fun bj_null_j_5 -> (
            int_j_133 = 0;
            input_j_134 = input;
            binop_j_135 = int_j_133 <= input_j_134);
        record_j_137 = {checker = flatten_fun_j_132, generator = flatten_fun_j_136};
        proj_j_138 = record_j_137.checker;
        var_j_139 = fun_ret_b_52;
        appl_j_140 = proj_j_138 var_j_139);
    flatten_fun_j_184 = fun bj_null_j_8 -> (
        flatten_fun_j_183 = fun arg_assume_b_42 -> (
            bool_j_142 = false;
            fail_b_37 = bool_j_142;
            flatten_fun_j_151 = fun expr_b_36 -> (
                var_j_143 = expr_b_36;
                m_match_bool_j_145 = var_j_143 ~ any;
                m_match_bool_j_148 = var_j_143 ~ int;
                m_match_cond_j_149 = m_match_bool_j_148 ? (
                        bool_j_150 = true
                    ) : (
                        m_match_cond_j_146 = m_match_bool_j_145 ? (
                                var_j_147 = fail_b_37
                            ) : (
                                void_j_144 = {}
                            )
                    ));
            flatten_fun_j_153 = fun bj_null_j_6 -> (
                input_j_152 = input);
            record_j_154 = {checker = flatten_fun_j_151, generator = flatten_fun_j_153};
            proj_j_155 = record_j_154.checker;
            var_j_156 = arg_assume_b_42;
            appl_j_157 = proj_j_155 var_j_156;
            if_j_182 = appl_j_157 ? (
                    bool_j_158 = false;
                    fail_b_40 = bool_j_158;
                    flatten_fun_j_167 = fun expr_b_39 -> (
                        var_j_159 = expr_b_39;
                        m_match_bool_j_161 = var_j_159 ~ any;
                        m_match_bool_j_164 = var_j_159 ~ bool;
                        m_match_cond_j_165 = m_match_bool_j_164 ? (
                                bool_j_166 = true
                            ) : (
                                m_match_cond_j_162 = m_match_bool_j_161 ? (
                                        var_j_163 = fail_b_40
                                    ) : (
                                        void_j_160 = {}
                                    )
                            ));
                    flatten_fun_j_171 = fun bj_null_j_7 -> (
                        int_j_168 = 0;
                        input_j_169 = input;
                        binop_j_170 = int_j_168 <= input_j_169);
                    record_j_172 = {checker = flatten_fun_j_167, generator = flatten_fun_j_171};
                    proj_j_173 = record_j_172.generator;
                    int_j_174 = 0;
                    appl_j_175 = proj_j_173 int_j_174
                ) : (
                    bool_j_176 = false;
                    fail_b_43 = bool_j_176;
                    var_j_177 = fail_b_43;
                    assert_pred_j_178 = var_j_177;
                    assert_res_j_179 = assert_pred_j_178 ? (
                            assert_res_true_j_180 = {}
                        ) : (
                            ab_j_181 = abort
                        )
                )));
    record_j_185 = {checker = flatten_fun_j_141, generator = flatten_fun_j_184};
    proj_j_186 = record_j_185.checker;
    var_j_187 = fun_ret_b_63;
    appl_j_188 = proj_j_186 var_j_187);
flatten_fun_j_301 = fun bj_null_j_15 -> (
    flatten_fun_j_300 = fun arg_assume_b_31 -> (
        bool_j_190 = false;
        fail_b_4 = bool_j_190;
        flatten_fun_j_199 = fun expr_b_3 -> (
            var_j_191 = expr_b_3;
            m_match_bool_j_193 = var_j_191 ~ any;
            m_match_bool_j_196 = var_j_191 ~ bool;
            m_match_cond_j_197 = m_match_bool_j_196 ? (
                    bool_j_198 = true
                ) : (
                    m_match_cond_j_194 = m_match_bool_j_193 ? (
                            var_j_195 = fail_b_4
                        ) : (
                            void_j_192 = {}
                        )
                ));
        flatten_fun_j_203 = fun bj_null_j_9 -> (
            int_j_200 = 0;
            input_j_201 = input;
            binop_j_202 = int_j_200 <= input_j_201);
        record_j_204 = {checker = flatten_fun_j_199, generator = flatten_fun_j_203};
        proj_j_205 = record_j_204.checker;
        var_j_206 = arg_assume_b_31;
        appl_j_207 = proj_j_205 var_j_206;
        if_j_299 = appl_j_207 ? (
                flatten_fun_j_245 = fun expr_b_20 -> (
                    bool_j_208 = false;
                    fail_b_15 = bool_j_208;
                    flatten_fun_j_217 = fun expr_b_14 -> (
                        var_j_209 = expr_b_14;
                        m_match_bool_j_211 = var_j_209 ~ any;
                        m_match_bool_j_214 = var_j_209 ~ int;
                        m_match_cond_j_215 = m_match_bool_j_214 ? (
                                bool_j_216 = true
                            ) : (
                                m_match_cond_j_212 = m_match_bool_j_211 ? (
                                        var_j_213 = fail_b_15
                                    ) : (
                                        void_j_210 = {}
                                    )
                            ));
                    flatten_fun_j_219 = fun bj_null_j_10 -> (
                        input_j_218 = input);
                    record_j_220 = {checker = flatten_fun_j_217, generator = flatten_fun_j_219};
                    proj_j_221 = record_j_220.generator;
                    int_j_222 = 0;
                    appl_j_223 = proj_j_221 int_j_222;
                    arg_assert_b_21 = appl_j_223;
                    var_j_224 = expr_b_20;
                    var_j_225 = arg_assert_b_21;
                    appl_j_226 = var_j_224 var_j_225;
                    fun_ret_b_22 = appl_j_226;
                    bool_j_227 = false;
                    fail_b_18 = bool_j_227;
                    flatten_fun_j_236 = fun expr_b_17 -> (
                        var_j_228 = expr_b_17;
                        m_match_bool_j_230 = var_j_228 ~ any;
                        m_match_bool_j_233 = var_j_228 ~ bool;
                        m_match_cond_j_234 = m_match_bool_j_233 ? (
                                bool_j_235 = true
                            ) : (
                                m_match_cond_j_231 = m_match_bool_j_230 ? (
                                        var_j_232 = fail_b_18
                                    ) : (
                                        void_j_229 = {}
                                    )
                            ));
                    flatten_fun_j_240 = fun bj_null_j_11 -> (
                        int_j_237 = 0;
                        input_j_238 = input;
                        binop_j_239 = int_j_237 <= input_j_238);
                    record_j_241 = {checker = flatten_fun_j_236, generator = flatten_fun_j_240};
                    proj_j_242 = record_j_241.checker;
                    var_j_243 = fun_ret_b_22;
                    appl_j_244 = proj_j_242 var_j_243);
                flatten_fun_j_288 = fun bj_null_j_14 -> (
                    flatten_fun_j_287 = fun arg_assume_b_12 -> (
                        bool_j_246 = false;
                        fail_b_7 = bool_j_246;
                        flatten_fun_j_255 = fun expr_b_6 -> (
                            var_j_247 = expr_b_6;
                            m_match_bool_j_249 = var_j_247 ~ any;
                            m_match_bool_j_252 = var_j_247 ~ int;
                            m_match_cond_j_253 = m_match_bool_j_252 ? (
                                    bool_j_254 = true
                                ) : (
                                    m_match_cond_j_250 = m_match_bool_j_249 ? (
                                            var_j_251 = fail_b_7
                                        ) : (
                                            void_j_248 = {}
                                        )
                                ));
                        flatten_fun_j_257 = fun bj_null_j_12 -> (
                            input_j_256 = input);
                        record_j_258 = {checker = flatten_fun_j_255, generator = flatten_fun_j_257};
                        proj_j_259 = record_j_258.checker;
                        var_j_260 = arg_assume_b_12;
                        appl_j_261 = proj_j_259 var_j_260;
                        if_j_286 = appl_j_261 ? (
                                bool_j_262 = false;
                                fail_b_10 = bool_j_262;
                                flatten_fun_j_271 = fun expr_b_9 -> (
                                    var_j_263 = expr_b_9;
                                    m_match_bool_j_265 = var_j_263 ~ any;
                                    m_match_bool_j_268 = var_j_263 ~ bool;
                                    m_match_cond_j_269 = m_match_bool_j_268 ? (
                                            bool_j_270 = true
                                        ) : (
                                            m_match_cond_j_266 = m_match_bool_j_265 ? (
                                                    var_j_267 = fail_b_10
                                                ) : (
                                                    void_j_264 = {}
                                                )
                                        ));
                                flatten_fun_j_275 = fun bj_null_j_13 -> (
                                    int_j_272 = 0;
                                    input_j_273 = input;
                                    binop_j_274 = int_j_272 <= input_j_273);
                                record_j_276 = {checker = flatten_fun_j_271, generator = flatten_fun_j_275};
                                proj_j_277 = record_j_276.generator;
                                int_j_278 = 0;
                                appl_j_279 = proj_j_277 int_j_278
                            ) : (
                                bool_j_280 = false;
                                fail_b_13 = bool_j_280;
                                var_j_281 = fail_b_13;
                                assert_pred_j_282 = var_j_281;
                                assert_res_j_283 = assert_pred_j_282 ? (
                                        assert_res_true_j_284 = {}
                                    ) : (
                                        ab_j_285 = abort
                                    )
                            )));
                record_j_289 = {checker = flatten_fun_j_245, generator = flatten_fun_j_288};
                proj_j_290 = record_j_289.generator;
                int_j_291 = 0;
                appl_j_292 = proj_j_290 int_j_291
            ) : (
                bool_j_293 = false;
                fail_b_32 = bool_j_293;
                var_j_294 = fail_b_32;
                assert_pred_j_295 = var_j_294;
                assert_res_j_296 = assert_pred_j_295 ? (
                        assert_res_true_j_297 = {}
                    ) : (
                        ab_j_298 = abort
                    )
            )));
record_j_302 = {checker = flatten_fun_j_189, generator = flatten_fun_j_301};
proj_j_303 = record_j_302.generator;
int_j_304 = 0;
appl_j_305 = proj_j_303 int_j_304;
foldf_b_115 = appl_j_305;
flatten_fun_j_357 = fun expr_b_106 -> (
    bool_j_306 = false;
    lst_fail_b_107 = bool_j_306;
    var_j_307 = expr_b_106;
    m_match_bool_j_309 = var_j_307 ~ any;
    m_match_bool_j_312 = var_j_307 ~ {j_head, j_tail, _};
    m_match_bool_j_354 = var_j_307 ~ {j_empty, _};
    m_match_cond_j_355 = m_match_bool_j_354 ? (
            bool_j_356 = true
        ) : (
            m_match_cond_j_313 = m_match_bool_j_312 ? (
                    bj_underscore = var_j_307.j_head;
                    bj_underscore2 = var_j_307.j_tail;
                    flatten_fun_j_347 = fun test_fun_b_103_j_0 -> (
                        flatten_fun_j_346 = fun test_list_b_104 -> (
                            var_j_314 = test_fun_b_103_j_0;
                            var_j_315 = test_fun_b_103_j_0;
                            appl_j_316 = var_j_314 var_j_315;
                            test_fun_b_103 = appl_j_316;
                            var_j_317 = test_list_b_104;
                            m_match_bool_j_319 = var_j_317 ~ {j_head, j_tail, _};
                            m_match_bool_j_343 = var_j_317 ~ {j_empty, _};
                            m_match_cond_j_344 = m_match_bool_j_343 ? (
                                    bool_j_345 = true
                                ) : (
                                    m_match_cond_j_320 = m_match_bool_j_319 ? (
                                            hd_j_18 = var_j_317.j_head;
                                            tl_j_17 = var_j_317.j_tail;
                                            bool_j_321 = false;
                                            fail_b_101 = bool_j_321;
                                            flatten_fun_j_330 = fun expr_b_100 -> (
                                                var_j_322 = expr_b_100;
                                                m_match_bool_j_324 = var_j_322 ~ any;
                                                m_match_bool_j_327 = var_j_322 ~ int;
                                                m_match_cond_j_328 = m_match_bool_j_327 ? (
                                                        bool_j_329 = true
                                                    ) : (
                                                        m_match_cond_j_325 = m_match_bool_j_324 ? (
                                                                var_j_326 = fail_b_101
                                                            ) : (
                                                                void_j_323 = 
                                                                    {}
                                                            )
                                                    ));
                                            flatten_fun_j_332 = fun bj_null_j_16 -> (
                                                input_j_331 = input);
                                            record_j_333 = {checker = flatten_fun_j_330, generator = flatten_fun_j_332};
                                            proj_j_334 = record_j_333.checker;
                                            var_j_335 = hd_j_18;
                                            appl_j_336 = proj_j_334 var_j_335;
                                            elm_check_b_105 = appl_j_336;
                                            var_j_337 = elm_check_b_105;
                                            if_j_342 = var_j_337 ? (
                                                    var_j_338 = test_fun_b_103;
                                                    var_j_339 = tl_j_17;
                                                    appl_j_340 = var_j_338 var_j_339
                                                ) : (
                                                    var_j_341 = elm_check_b_105
                                                )
                                        ) : (
                                            void_j_318 = {}
                                        )
                                )));
                    test_fun_b_103_j_0_j_20 = flatten_fun_j_347;
                    var_j_348 = test_fun_b_103_j_0_j_20;
                    var_j_349 = test_fun_b_103_j_0_j_20;
                    appl_j_350 = var_j_348 var_j_349;
                    test_fun_b_103_j_19 = appl_j_350;
                    var_j_351 = test_fun_b_103_j_19;
                    var_j_352 = expr_b_106;
                    appl_j_353 = var_j_351 var_j_352
                ) : (
                    m_match_cond_j_310 = m_match_bool_j_309 ? (
                            var_j_311 = lst_fail_b_107
                        ) : (
                            void_j_308 = {}
                        )
                )
        ));
flatten_fun_j_406 = fun bj_null_j_25 -> (
    flatten_fun_j_392 = fun list_maker_b_98_j_1 -> (
        flatten_fun_j_391 = fun len_b_97 -> (
            var_j_358 = list_maker_b_98_j_1;
            var_j_359 = list_maker_b_98_j_1;
            appl_j_360 = var_j_358 var_j_359;
            list_maker_b_98 = appl_j_360;
            var_j_361 = len_b_97;
            int_j_362 = 0;
            binop_j_363 = var_j_361 == int_j_362;
            if_j_390 = binop_j_363 ? (
                    record_j_364 = {};
                    record_j_365 = {j_empty = record_j_364}
                ) : (
                    bool_j_366 = false;
                    fail_b_95 = bool_j_366;
                    flatten_fun_j_375 = fun expr_b_94 -> (
                        var_j_367 = expr_b_94;
                        m_match_bool_j_369 = var_j_367 ~ any;
                        m_match_bool_j_372 = var_j_367 ~ int;
                        m_match_cond_j_373 = m_match_bool_j_372 ? (
                                bool_j_374 = true
                            ) : (
                                m_match_cond_j_370 = m_match_bool_j_369 ? (
                                        var_j_371 = fail_b_95
                                    ) : (
                                        void_j_368 = {}
                                    )
                            ));
                    flatten_fun_j_377 = fun bj_null_j_21 -> (
                        input_j_376 = input);
                    record_j_378 = {checker = flatten_fun_j_375, generator = flatten_fun_j_377};
                    proj_j_379 = record_j_378.generator;
                    int_j_380 = 0;
                    appl_j_381 = proj_j_379 int_j_380;
                    elm_b_99 = appl_j_381;
                    record_j_382 = {};
                    var_j_383 = elm_b_99;
                    var_j_384 = list_maker_b_98;
                    var_j_385 = len_b_97;
                    int_j_386 = 1;
                    binop_j_387 = var_j_385 - int_j_386;
                    appl_j_388 = var_j_384 binop_j_387;
                    record_j_389 = {j_cons = record_j_382, j_head = var_j_383, j_tail = appl_j_388}
                )));
    list_maker_b_98_j_1_j_24 = flatten_fun_j_392;
    var_j_393 = list_maker_b_98_j_1_j_24;
    var_j_394 = list_maker_b_98_j_1_j_24;
    appl_j_395 = var_j_393 var_j_394;
    list_maker_b_98_j_23 = appl_j_395;
    input_j_396 = input;
    len_b_97_j_22 = input_j_396;
    int_j_397 = 0;
    var_j_398 = len_b_97_j_22;
    binop_j_399 = int_j_397 <= var_j_398;
    if_j_405 = binop_j_399 ? (
            var_j_400 = list_maker_b_98_j_23;
            var_j_401 = len_b_97_j_22;
            appl_j_402 = var_j_400 var_j_401
        ) : (
            bool_j_403 = false;
            assume_j_404 = assume bool_j_403
        ));
record_j_407 = {checker = flatten_fun_j_357, generator = flatten_fun_j_406};
proj_j_408 = record_j_407.generator;
int_j_409 = 0;
appl_j_410 = proj_j_408 int_j_409;
lst_b_114 = appl_j_410;
bool_j_411 = false;
fail_b_111 = bool_j_411;
flatten_fun_j_420 = fun expr_b_110 -> (
    var_j_412 = expr_b_110;
    m_match_bool_j_414 = var_j_412 ~ any;
    m_match_bool_j_417 = var_j_412 ~ int;
    m_match_cond_j_418 = m_match_bool_j_417 ? (
            bool_j_419 = true
        ) : (
            m_match_cond_j_415 = m_match_bool_j_414 ? (
                    var_j_416 = fail_b_111
                ) : (
                    void_j_413 = {}
                )
        ));
flatten_fun_j_422 = fun bj_null_j_26 -> (
    input_j_421 = input);
record_j_423 = {checker = flatten_fun_j_420, generator = flatten_fun_j_422};
proj_j_424 = record_j_423.checker;
appl_j_427 = appl_j_64 acc_b_116;
appl_j_429 = appl_j_427 foldf_b_115;
appl_j_431 = appl_j_429 lst_b_114;
appl_j_432 = proj_j_424 appl_j_431;
check_res_b_113 = appl_j_432;
if_j_440 = check_res_b_113 ? (
        var_j_434 = appl_j_64
    ) : (
        error_var_j_435 = check_res_b_113;
        assert_pred_j_436 = error_var_j_435;
        assert_res_j_437 = assert_pred_j_436 ? (
                assert_res_true_j_438 = {}
            ) : (
                ab_j_439 = abort
            )
    );
i_result = if_j_440