i_first = {};
id_j_54 = fun x -> (
    flatten_fun_j_51 = fun x_b_0 -> (
        int_j_3 = 0;
        input_j_4 = input;
        m_bl_i_103 = int_j_3 ~ int;
        m_br_i_104 = input_j_4 ~ int;
        m_b_i_105 = m_bl_i_103 and m_br_i_104;
        binop_j_5 = m_b_i_105 ? (
                c_binop_i_106 = int_j_3 < input_j_4
            ) : (
                ab_i_107 = abort
            );
        if_j_25 = binop_j_5 ? (
                bool_j_6 = false;
                fail_b_6 = bool_j_6;
                flatten_fun_j_15 = fun expr_b_5 -> (
                    var_j_7 = expr_b_5;
                    m_match_bool_j_9 = var_j_7 ~ any;
                    m_match_bool_j_12 = var_j_7 ~ int;
                    m_match_cond_j_13 = m_match_bool_j_12 ? (
                            bool_j_14 = true
                        ) : (
                            m_match_cond_j_10 = m_match_bool_j_9 ? (
                                    var_j_11 = fail_b_6
                                ) : (
                                    void_j_8 = {}
                                )
                        ));
                flatten_fun_j_17 = fun bj_null_j_1 -> (
                    input_j_16 = input);
                flatten_fun_j_19 = fun expr_b_7 -> (
                    var_j_18 = expr_b_7);
                record_j_20 = {checker = flatten_fun_j_15, generator = flatten_fun_j_17, wrapper = flatten_fun_j_19};
                proj_j_21 = record_j_20.checker;
                var_j_22 = x_b_0;
                m_i_108 = proj_j_21 ~ fun;
                appl_j_23 = m_i_108 ? (
                        c_appl_i_109 = proj_j_21 var_j_22
                    ) : (
                        ab_i_110 = abort
                    )
            ) : (
                bool_j_24 = true
            );
        arg_check_b_1 = if_j_25;
        var_j_26 = arg_check_b_1;
        if_j_50 = var_j_26 ? (
                bool_j_27 = false;
                fail_b_9 = bool_j_27;
                flatten_fun_j_36 = fun expr_b_8 -> (
                    var_j_28 = expr_b_8;
                    m_match_bool_j_30 = var_j_28 ~ any;
                    m_match_bool_j_33 = var_j_28 ~ int;
                    m_match_cond_j_34 = m_match_bool_j_33 ? (
                            bool_j_35 = true
                        ) : (
                            m_match_cond_j_31 = m_match_bool_j_30 ? (
                                    var_j_32 = fail_b_9
                                ) : (
                                    void_j_29 = {}
                                )
                        ));
                flatten_fun_j_38 = fun bj_null_j_2 -> (
                    input_j_37 = input);
                flatten_fun_j_40 = fun expr_b_10 -> (
                    var_j_39 = expr_b_10);
                record_j_41 = {checker = flatten_fun_j_36, generator = flatten_fun_j_38, wrapper = flatten_fun_j_40};
                proj_j_42 = record_j_41.wrapper;
                var_j_43 = x;
                m_i_111 = proj_j_42 ~ fun;
                appl_j_44 = m_i_111 ? (
                        c_appl_i_112 = proj_j_42 var_j_43
                    ) : (
                        ab_i_113 = abort
                    )
            ) : (
                var_j_45 = arg_check_b_1;
                assert_pred_j_46 = var_j_45;
                assert_res_j_47 = assert_pred_j_46 ? (
                        assert_res_true_j_48 = {}
                    ) : (
                        ab_j_49 = abort
                    )
            ));
    var_j_52 = x;
    appl_j_53 = flatten_fun_j_51 var_j_52);
id = id_j_54;
bool_j_55 = false;
fail_b_3 = bool_j_55;
flatten_fun_j_64 = fun expr_b_2 -> (
    var_j_56 = expr_b_2;
    m_match_bool_j_58 = var_j_56 ~ any;
    m_match_bool_j_61 = var_j_56 ~ int;
    m_match_cond_j_62 = m_match_bool_j_61 ? (
            bool_j_63 = true
        ) : (
            m_match_cond_j_59 = m_match_bool_j_58 ? (
                    var_j_60 = fail_b_3
                ) : (
                    void_j_57 = {}
                )
        ));
flatten_fun_j_66 = fun bj_null -> (
    input_j_65 = input);
flatten_fun_j_68 = fun expr_b_4 -> (
    var_j_67 = expr_b_4);
record_j_69 = {checker = flatten_fun_j_64, generator = flatten_fun_j_66, wrapper = flatten_fun_j_68};
proj_j_70 = record_j_69.generator;
int_j_71 = 0;
appl_j_72 = proj_j_70 int_j_71;
x_b_14 = appl_j_72;
bool_j_73 = false;
fail_b_12 = bool_j_73;
flatten_fun_j_82 = fun expr_b_11 -> (
    var_j_74 = expr_b_11;
    m_match_bool_j_76 = var_j_74 ~ any;
    m_match_bool_j_79 = var_j_74 ~ int;
    m_match_cond_j_80 = m_match_bool_j_79 ? (
            bool_j_81 = true
        ) : (
            m_match_cond_j_77 = m_match_bool_j_76 ? (
                    var_j_78 = fail_b_12
                ) : (
                    void_j_75 = {}
                )
        ));
flatten_fun_j_84 = fun bj_null_j_0 -> (
    input_j_83 = input);
flatten_fun_j_86 = fun expr_b_13 -> (
    var_j_85 = expr_b_13);
record_j_87 = {checker = flatten_fun_j_82, generator = flatten_fun_j_84, wrapper = flatten_fun_j_86};
proj_j_88 = record_j_87.checker;
appl_j_91 = id x_b_14;
appl_j_92 = proj_j_88 appl_j_91;
check_res_b_15 = appl_j_92;
if_j_102 = check_res_b_15 ? (
        var_j_94 = id;
        bool_j_95 = true;
        m_i_114 = var_j_94 ~ fun;
        appl_j_96 = m_i_114 ? (
                c_appl_i_115 = var_j_94 bool_j_95
            ) : (
                ab_i_116 = abort
            )
    ) : (
        error_var_j_97 = check_res_b_15;
        assert_pred_j_98 = error_var_j_97;
        assert_res_j_99 = assert_pred_j_98 ? (
                assert_res_true_j_100 = {}
            ) : (
                ab_j_101 = abort
            )
    );
i_result = if_j_102