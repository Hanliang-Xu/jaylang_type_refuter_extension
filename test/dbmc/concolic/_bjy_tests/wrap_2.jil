i_first = {};
test_j_4 = fun x -> (
    var_j_1 = x;
    var_j_2 = x;
    m_bl_i_49 = var_j_1 ~ int;
    m_br_i_50 = var_j_2 ~ int;
    m_b_i_51 = m_bl_i_49 and m_br_i_50;
    binop_j_3 = m_b_i_51 ? (
            c_binop_i_52 = var_j_1 + var_j_2
        ) : (
            ab_i_53 = abort
        ));
test = test_j_4;
bool_j_5 = false;
fail_b_1 = bool_j_5;
flatten_fun_j_14 = fun expr_b_0 -> (
    var_j_6 = expr_b_0;
    m_match_bool_j_8 = var_j_6 ~ any;
    m_match_bool_j_11 = var_j_6 ~ int;
    m_match_cond_j_12 = m_match_bool_j_11 ? (
            bool_j_13 = true
        ) : (
            m_match_cond_j_9 = m_match_bool_j_8 ? (
                    var_j_10 = fail_b_1
                ) : (
                    void_j_7 = {}
                )
        ));
flatten_fun_j_16 = fun bj_null -> (
    input_j_15 = input);
record_j_17 = {checker = flatten_fun_j_14, generator = flatten_fun_j_16};
proj_j_18 = record_j_17.generator;
int_j_19 = 0;
appl_j_20 = proj_j_18 int_j_19;
x_b_6 = appl_j_20;
bool_j_21 = false;
fail_b_4 = bool_j_21;
flatten_fun_j_30 = fun expr_b_3 -> (
    var_j_22 = expr_b_3;
    m_match_bool_j_24 = var_j_22 ~ any;
    m_match_bool_j_27 = var_j_22 ~ int;
    m_match_cond_j_28 = m_match_bool_j_27 ? (
            bool_j_29 = true
        ) : (
            m_match_cond_j_25 = m_match_bool_j_24 ? (
                    var_j_26 = fail_b_4
                ) : (
                    void_j_23 = {}
                )
        ));
flatten_fun_j_32 = fun bj_null_j_0 -> (
    input_j_31 = input);
record_j_33 = {checker = flatten_fun_j_30, generator = flatten_fun_j_32};
proj_j_34 = record_j_33.checker;
appl_j_37 = test x_b_6;
appl_j_38 = proj_j_34 appl_j_37;
check_res_b_7 = appl_j_38;
if_j_48 = check_res_b_7 ? (
        var_j_40 = test;
        bool_j_41 = true;
        m_i_54 = var_j_40 ~ fun;
        appl_j_42 = m_i_54 ? (
                c_appl_i_55 = var_j_40 bool_j_41
            ) : (
                ab_i_56 = abort
            )
    ) : (
        error_var_j_43 = check_res_b_7;
        assert_pred_j_44 = error_var_j_43;
        assert_res_j_45 = assert_pred_j_44 ? (
                assert_res_true_j_46 = {}
            ) : (
                ab_j_47 = abort
            )
    );
i_result = if_j_48