i_first = {};
test_j_51 = fun x -> (
    flatten_fun_j_48 = fun x_b_0 -> (
        bool_j_3 = false;
        fail_b_6 = bool_j_3;
        flatten_fun_j_12 = fun expr_b_5 -> (
            var_j_4 = expr_b_5;
            m_match_bool_j_6 = var_j_4 ~ any;
            m_match_bool_j_9 = var_j_4 ~ int;
            m_match_cond_j_10 = m_match_bool_j_9 ? (
                    bool_j_11 = true
                ) : (
                    m_match_cond_j_7 = m_match_bool_j_6 ? (
                            var_j_8 = fail_b_6
                        ) : (
                            void_j_5 = {}
                        )
                ));
        flatten_fun_j_14 = fun bj_null_j_1 -> (
            input_j_13 = input);
        flatten_fun_j_16 = fun expr_b_7 -> (
            var_j_15 = expr_b_7);
        record_j_17 = {checker = flatten_fun_j_12, generator = flatten_fun_j_14, wrapper = flatten_fun_j_16};
        proj_j_18 = record_j_17.checker;
        var_j_19 = x_b_0;
        appl_j_20 = proj_j_18 var_j_19;
        arg_check_b_1 = appl_j_20;
        var_j_21 = arg_check_b_1;
        if_j_47 = var_j_21 ? (
                bool_j_22 = false;
                fail_b_9 = bool_j_22;
                flatten_fun_j_31 = fun expr_b_8 -> (
                    var_j_23 = expr_b_8;
                    m_match_bool_j_25 = var_j_23 ~ any;
                    m_match_bool_j_28 = var_j_23 ~ int;
                    m_match_cond_j_29 = m_match_bool_j_28 ? (
                            bool_j_30 = true
                        ) : (
                            m_match_cond_j_26 = m_match_bool_j_25 ? (
                                    var_j_27 = fail_b_9
                                ) : (
                                    void_j_24 = {}
                                )
                        ));
                flatten_fun_j_33 = fun bj_null_j_2 -> (
                    input_j_32 = input);
                flatten_fun_j_35 = fun expr_b_10 -> (
                    var_j_34 = expr_b_10);
                record_j_36 = {checker = flatten_fun_j_31, generator = flatten_fun_j_33, wrapper = flatten_fun_j_35};
                proj_j_37 = record_j_36.wrapper;
                var_j_38 = x;
                var_j_39 = x;
                m_bl_i_100 = var_j_38 ~ int;
                m_br_i_101 = var_j_39 ~ int;
                m_b_i_102 = m_bl_i_100 and m_br_i_101;
                binop_j_40 = m_b_i_102 ? (
                        c_binop_i_103 = var_j_38 + var_j_39
                    ) : (
                        ab_i_104 = abort
                    );
                m_i_105 = proj_j_37 ~ fun;
                appl_j_41 = m_i_105 ? (
                        c_appl_i_106 = proj_j_37 binop_j_40
                    ) : (
                        ab_i_107 = abort
                    )
            ) : (
                var_j_42 = arg_check_b_1;
                assert_pred_j_43 = var_j_42;
                assert_res_j_44 = assert_pred_j_43 ? (
                        assert_res_true_j_45 = {}
                    ) : (
                        ab_j_46 = abort
                    )
            ));
    var_j_49 = x;
    appl_j_50 = flatten_fun_j_48 var_j_49);
test = test_j_51;
bool_j_52 = false;
fail_b_3 = bool_j_52;
flatten_fun_j_61 = fun expr_b_2 -> (
    var_j_53 = expr_b_2;
    m_match_bool_j_55 = var_j_53 ~ any;
    m_match_bool_j_58 = var_j_53 ~ int;
    m_match_cond_j_59 = m_match_bool_j_58 ? (
            bool_j_60 = true
        ) : (
            m_match_cond_j_56 = m_match_bool_j_55 ? (
                    var_j_57 = fail_b_3
                ) : (
                    void_j_54 = {}
                )
        ));
flatten_fun_j_63 = fun bj_null -> (
    input_j_62 = input);
flatten_fun_j_65 = fun expr_b_4 -> (
    var_j_64 = expr_b_4);
record_j_66 = {checker = flatten_fun_j_61, generator = flatten_fun_j_63, wrapper = flatten_fun_j_65};
proj_j_67 = record_j_66.generator;
int_j_68 = 0;
appl_j_69 = proj_j_67 int_j_68;
x_b_14 = appl_j_69;
bool_j_70 = false;
fail_b_12 = bool_j_70;
flatten_fun_j_79 = fun expr_b_11 -> (
    var_j_71 = expr_b_11;
    m_match_bool_j_73 = var_j_71 ~ any;
    m_match_bool_j_76 = var_j_71 ~ int;
    m_match_cond_j_77 = m_match_bool_j_76 ? (
            bool_j_78 = true
        ) : (
            m_match_cond_j_74 = m_match_bool_j_73 ? (
                    var_j_75 = fail_b_12
                ) : (
                    void_j_72 = {}
                )
        ));
flatten_fun_j_81 = fun bj_null_j_0 -> (
    input_j_80 = input);
flatten_fun_j_83 = fun expr_b_13 -> (
    var_j_82 = expr_b_13);
record_j_84 = {checker = flatten_fun_j_79, generator = flatten_fun_j_81, wrapper = flatten_fun_j_83};
proj_j_85 = record_j_84.checker;
appl_j_88 = test x_b_14;
appl_j_89 = proj_j_85 appl_j_88;
check_res_b_15 = appl_j_89;
if_j_99 = check_res_b_15 ? (
        var_j_91 = test;
        bool_j_92 = true;
        m_i_108 = var_j_91 ~ fun;
        appl_j_93 = m_i_108 ? (
                c_appl_i_109 = var_j_91 bool_j_92
            ) : (
                ab_i_110 = abort
            )
    ) : (
        error_var_j_94 = check_res_b_15;
        assert_pred_j_95 = error_var_j_94;
        assert_res_j_96 = assert_pred_j_95 ? (
                assert_res_true_j_97 = {}
            ) : (
                ab_j_98 = abort
            )
    );
i_result = if_j_99