i_first = {};
intId_j_6 = fun x -> (
    intId2_j_2 = fun y -> (
        var_j_1 = y);
    intId2 = intId2_j_2;
    var_j_3 = intId2;
    var_j_4 = x;
    m_i_51 = var_j_3 ~ fun;
    appl_j_5 = m_i_51 ? (
            c_appl_i_52 = var_j_3 var_j_4
        ) : (
            ab_i_53 = abort
        ));
intId = intId_j_6;
bool_j_7 = false;
fail_b_1 = bool_j_7;
flatten_fun_j_16 = fun expr_b_0 -> (
    var_j_8 = expr_b_0;
    m_match_bool_j_10 = var_j_8 ~ any;
    m_match_bool_j_13 = var_j_8 ~ int;
    m_match_cond_j_14 = m_match_bool_j_13 ? (
            bool_j_15 = true
        ) : (
            m_match_cond_j_11 = m_match_bool_j_10 ? (
                    var_j_12 = fail_b_1
                ) : (
                    void_j_9 = {}
                )
        ));
flatten_fun_j_18 = fun bj_null -> (
    input_j_17 = input);
record_j_19 = {checker = flatten_fun_j_16, generator = flatten_fun_j_18};
proj_j_20 = record_j_19.generator;
int_j_21 = 0;
appl_j_22 = proj_j_20 int_j_21;
x_b_6 = appl_j_22;
bool_j_23 = false;
fail_b_4 = bool_j_23;
flatten_fun_j_32 = fun expr_b_3 -> (
    var_j_24 = expr_b_3;
    m_match_bool_j_26 = var_j_24 ~ any;
    m_match_bool_j_29 = var_j_24 ~ int;
    m_match_cond_j_30 = m_match_bool_j_29 ? (
            bool_j_31 = true
        ) : (
            m_match_cond_j_27 = m_match_bool_j_26 ? (
                    var_j_28 = fail_b_4
                ) : (
                    void_j_25 = {}
                )
        ));
flatten_fun_j_34 = fun bj_null_j_0 -> (
    input_j_33 = input);
record_j_35 = {checker = flatten_fun_j_32, generator = flatten_fun_j_34};
proj_j_36 = record_j_35.checker;
appl_j_39 = intId x_b_6;
appl_j_40 = proj_j_36 appl_j_39;
check_res_b_7 = appl_j_40;
if_j_50 = check_res_b_7 ? (
        var_j_42 = intId;
        int_j_43 = 5;
        m_i_54 = var_j_42 ~ fun;
        appl_j_44 = m_i_54 ? (
                c_appl_i_55 = var_j_42 int_j_43
            ) : (
                ab_i_56 = abort
            )
    ) : (
        error_var_j_45 = check_res_b_7;
        assert_pred_j_46 = error_var_j_45;
        assert_res_j_47 = assert_pred_j_46 ? (
                assert_res_true_j_48 = {}
            ) : (
                ab_j_49 = abort
            )
    );
i_result = if_j_50