i_first = {};
B_j_293 = fun x_j_18 -> (
    int_j_19 = 0;
    var_j_20 = x_j_18;
    m_bl_i_380 = int_j_19 ~ int;
    m_br_i_381 = var_j_20 ~ int;
    m_b_i_382 = m_bl_i_380 and m_br_i_381;
    binop_j_21 = m_b_i_382 ? (
            c_binop_i_383 = int_j_19 < var_j_20
        ) : (
            ab_i_384 = abort
        );
    m_i_385 = binop_j_21 ~ bool;
    if_j_292 = m_i_385 ? (
            c_cond_i_425 = binop_j_21 ? (
                    flatten_fun_j_61 = fun expr_b_16 -> (
                        bool_j_22 = false;
                        fail_b_11 = bool_j_22;
                        flatten_fun_j_31 = fun expr_b_10 -> (
                            var_j_23 = expr_b_10;
                            m_match_bool_j_25 = var_j_23 ~ any;
                            m_match_bool_j_28 = var_j_23 ~ int;
                            m_match_cond_j_29 = m_match_bool_j_28 ? (
                                    bool_j_30 = true
                                ) : (
                                    m_match_cond_j_26 = m_match_bool_j_25 ? (
                                            var_j_27 = fail_b_11
                                        ) : (
                                            void_j_24 = {}
                                        )
                                ));
                        flatten_fun_j_33 = fun bj_null_j_4 -> (
                            input_j_32 = input);
                        flatten_fun_j_35 = fun expr_b_12 -> (
                            var_j_34 = expr_b_12);
                        record_j_36 = {checker = flatten_fun_j_31, generator = flatten_fun_j_33, wrapper = flatten_fun_j_35};
                        proj_j_37 = record_j_36.generator;
                        int_j_38 = 0;
                        appl_j_39 = proj_j_37 int_j_38;
                        arg_assert_b_17 = appl_j_39;
                        var_j_40 = expr_b_16;
                        var_j_41 = arg_assert_b_17;
                        appl_j_42 = var_j_40 var_j_41;
                        fun_ret_b_18 = appl_j_42;
                        bool_j_43 = false;
                        fail_b_14 = bool_j_43;
                        flatten_fun_j_52 = fun expr_b_13 -> (
                            var_j_44 = expr_b_13;
                            m_match_bool_j_46 = var_j_44 ~ any;
                            m_match_bool_j_49 = var_j_44 ~ int;
                            m_match_cond_j_50 = m_match_bool_j_49 ? (
                                    bool_j_51 = true
                                ) : (
                                    m_match_cond_j_47 = m_match_bool_j_46 ? (
                                            var_j_48 = fail_b_14
                                        ) : (
                                            void_j_45 = {}
                                        )
                                ));
                        flatten_fun_j_54 = fun bj_null_j_5 -> (
                            input_j_53 = input);
                        flatten_fun_j_56 = fun expr_b_15 -> (
                            var_j_55 = expr_b_15);
                        record_j_57 = {checker = flatten_fun_j_52, generator = flatten_fun_j_54, wrapper = flatten_fun_j_56};
                        proj_j_58 = record_j_57.checker;
                        var_j_59 = fun_ret_b_18;
                        appl_j_60 = proj_j_58 var_j_59);
                    flatten_fun_j_106 = fun bj_null_j_8 -> (
                        flatten_fun_j_105 = fun arg_assume_b_8 -> (
                            bool_j_62 = false;
                            fail_b_3 = bool_j_62;
                            flatten_fun_j_71 = fun expr_b_2 -> (
                                var_j_63 = expr_b_2;
                                m_match_bool_j_65 = var_j_63 ~ any;
                                m_match_bool_j_68 = var_j_63 ~ int;
                                m_match_cond_j_69 = m_match_bool_j_68 ? (
                                        bool_j_70 = true
                                    ) : (
                                        m_match_cond_j_66 = m_match_bool_j_65 ? (
                                                var_j_67 = fail_b_3
                                            ) : (
                                                void_j_64 = {}
                                            )
                                    ));
                            flatten_fun_j_73 = fun bj_null_j_6 -> (
                                input_j_72 = input);
                            flatten_fun_j_75 = fun expr_b_4 -> (
                                var_j_74 = expr_b_4);
                            record_j_76 = {checker = flatten_fun_j_71, generator = flatten_fun_j_73, wrapper = flatten_fun_j_75};
                            proj_j_77 = record_j_76.checker;
                            var_j_78 = arg_assume_b_8;
                            appl_j_79 = proj_j_77 var_j_78;
                            if_j_104 = appl_j_79 ? (
                                    bool_j_80 = false;
                                    fail_b_6 = bool_j_80;
                                    flatten_fun_j_89 = fun expr_b_5 -> (
                                        var_j_81 = expr_b_5;
                                        m_match_bool_j_83 = var_j_81 ~ any;
                                        m_match_bool_j_86 = var_j_81 ~ int;
                                        m_match_cond_j_87 = m_match_bool_j_86 ? (
                                                bool_j_88 = true
                                            ) : (
                                                m_match_cond_j_84 = m_match_bool_j_83 ? (
                                                        var_j_85 = fail_b_6
                                                    ) : (
                                                        void_j_82 = {}
                                                    )
                                            ));
                                    flatten_fun_j_91 = fun bj_null_j_7 -> (
                                        input_j_90 = input);
                                    flatten_fun_j_93 = fun expr_b_7 -> (
                                        var_j_92 = expr_b_7);
                                    record_j_94 = {checker = flatten_fun_j_89, generator = flatten_fun_j_91, wrapper = flatten_fun_j_93};
                                    proj_j_95 = record_j_94.generator;
                                    int_j_96 = 0;
                                    appl_j_97 = proj_j_95 int_j_96
                                ) : (
                                    bool_j_98 = false;
                                    fail_b_9 = bool_j_98;
                                    var_j_99 = fail_b_9;
                                    assert_pred_j_100 = var_j_99;
                                    assert_res_j_101 = assert_pred_j_100 ? (
                                            assert_res_true_j_102 = {}
                                        ) : (
                                            ab_j_103 = abort
                                        )
                                )));
                    flatten_fun_j_152 = fun expr_b_25 -> (
                        flatten_fun_j_151 = fun arg_b_26 -> (
                            bool_j_107 = false;
                            fail_b_20 = bool_j_107;
                            flatten_fun_j_116 = fun expr_b_19 -> (
                                var_j_108 = expr_b_19;
                                m_match_bool_j_110 = var_j_108 ~ any;
                                m_match_bool_j_113 = var_j_108 ~ int;
                                m_match_cond_j_114 = m_match_bool_j_113 ? (
                                        bool_j_115 = true
                                    ) : (
                                        m_match_cond_j_111 = m_match_bool_j_110 ? (
                                                var_j_112 = fail_b_20
                                            ) : (
                                                void_j_109 = {}
                                            )
                                    ));
                            flatten_fun_j_118 = fun bj_null_j_9 -> (
                                input_j_117 = input);
                            flatten_fun_j_120 = fun expr_b_21 -> (
                                var_j_119 = expr_b_21);
                            record_j_121 = {checker = flatten_fun_j_116, generator = flatten_fun_j_118, wrapper = flatten_fun_j_120};
                            proj_j_122 = record_j_121.checker;
                            var_j_123 = arg_b_26;
                            m_i_386 = proj_j_122 ~ fun;
                            appl_j_124 = m_i_386 ? (
                                    c_appl_i_387 = proj_j_122 var_j_123
                                ) : (
                                    ab_i_388 = abort
                                );
                            m_i_389 = appl_j_124 ~ bool;
                            if_j_150 = m_i_389 ? (
                                    c_cond_i_396 = appl_j_124 ? (
                                            bool_j_125 = false;
                                            fail_b_23 = bool_j_125;
                                            flatten_fun_j_134 = fun expr_b_22 -> (
                                                var_j_126 = expr_b_22;
                                                m_match_bool_j_128 = var_j_126 ~ any;
                                                m_match_bool_j_131 = var_j_126 ~ int;
                                                m_match_cond_j_132 = m_match_bool_j_131 ? (
                                                        bool_j_133 = true
                                                    ) : (
                                                        m_match_cond_j_129 = m_match_bool_j_128 ? (
                                                                var_j_130 = fail_b_23
                                                            ) : (
                                                                void_j_127 = 
                                                                    {}
                                                            )
                                                    ));
                                            flatten_fun_j_136 = fun bj_null_j_10 -> (
                                                input_j_135 = input);
                                            flatten_fun_j_138 = fun expr_b_24 -> (
                                                var_j_137 = expr_b_24);
                                            record_j_139 = {checker = flatten_fun_j_134, generator = flatten_fun_j_136, wrapper = flatten_fun_j_138};
                                            proj_j_140 = record_j_139.wrapper;
                                            var_j_141 = expr_b_25;
                                            var_j_142 = arg_b_26;
                                            m_i_390 = var_j_141 ~ fun;
                                            appl_j_143 = m_i_390 ? (
                                                    c_appl_i_391 = var_j_141 var_j_142
                                                ) : (
                                                    ab_i_392 = abort
                                                );
                                            m_i_393 = proj_j_140 ~ fun;
                                            appl_j_144 = m_i_393 ? (
                                                    c_appl_i_394 = proj_j_140 appl_j_143
                                                ) : (
                                                    ab_i_395 = abort
                                                )
                                        ) : (
                                            bool_j_145 = false;
                                            assert_pred_j_146 = bool_j_145;
                                            assert_res_j_147 = assert_pred_j_146 ? (
                                                    assert_res_true_j_148 = 
                                                        {}
                                                ) : (
                                                    ab_j_149 = abort
                                                )
                                        )
                                ) : (
                                    ab_i_397 = abort
                                )));
                    record_j_153 = {checker = flatten_fun_j_61, generator = flatten_fun_j_106, wrapper = flatten_fun_j_152}
                ) : (
                    flatten_fun_j_195 = fun expr_b_41 -> (
                        bool_j_154 = false;
                        fail_b_36 = bool_j_154;
                        flatten_fun_j_163 = fun expr_b_35 -> (
                            var_j_155 = expr_b_35;
                            m_match_bool_j_157 = var_j_155 ~ any;
                            m_match_bool_j_160 = var_j_155 ~ int;
                            m_match_cond_j_161 = m_match_bool_j_160 ? (
                                    bool_j_162 = true
                                ) : (
                                    m_match_cond_j_158 = m_match_bool_j_157 ? (
                                            var_j_159 = fail_b_36
                                        ) : (
                                            void_j_156 = {}
                                        )
                                ));
                        flatten_fun_j_165 = fun bj_null_j_11 -> (
                            input_j_164 = input);
                        flatten_fun_j_167 = fun expr_b_37 -> (
                            var_j_166 = expr_b_37);
                        record_j_168 = {checker = flatten_fun_j_163, generator = flatten_fun_j_165, wrapper = flatten_fun_j_167};
                        proj_j_169 = record_j_168.generator;
                        int_j_170 = 0;
                        appl_j_171 = proj_j_169 int_j_170;
                        arg_assert_b_42 = appl_j_171;
                        var_j_172 = expr_b_41;
                        var_j_173 = arg_assert_b_42;
                        appl_j_174 = var_j_172 var_j_173;
                        fun_ret_b_43 = appl_j_174;
                        bool_j_175 = false;
                        fail_b_39 = bool_j_175;
                        flatten_fun_j_184 = fun expr_b_38 -> (
                            var_j_176 = expr_b_38;
                            m_match_bool_j_178 = var_j_176 ~ any;
                            m_match_bool_j_181 = var_j_176 ~ bool;
                            m_match_cond_j_182 = m_match_bool_j_181 ? (
                                    bool_j_183 = true
                                ) : (
                                    m_match_cond_j_179 = m_match_bool_j_178 ? (
                                            var_j_180 = fail_b_39
                                        ) : (
                                            void_j_177 = {}
                                        )
                                ));
                        flatten_fun_j_188 = fun bj_null_j_12 -> (
                            int_j_185 = 0;
                            input_j_186 = input;
                            m_bl_i_398 = int_j_185 ~ int;
                            m_br_i_399 = input_j_186 ~ int;
                            m_b_i_400 = m_bl_i_398 and m_br_i_399;
                            binop_j_187 = m_b_i_400 ? (
                                    c_binop_i_401 = int_j_185 <= input_j_186
                                ) : (
                                    ab_i_402 = abort
                                ));
                        flatten_fun_j_190 = fun expr_b_40 -> (
                            var_j_189 = expr_b_40);
                        record_j_191 = {checker = flatten_fun_j_184, generator = flatten_fun_j_188, wrapper = flatten_fun_j_190};
                        proj_j_192 = record_j_191.checker;
                        var_j_193 = fun_ret_b_43;
                        appl_j_194 = proj_j_192 var_j_193);
                    flatten_fun_j_242 = fun bj_null_j_15 -> (
                        flatten_fun_j_241 = fun arg_assume_b_33 -> (
                            bool_j_196 = false;
                            fail_b_28 = bool_j_196;
                            flatten_fun_j_205 = fun expr_b_27 -> (
                                var_j_197 = expr_b_27;
                                m_match_bool_j_199 = var_j_197 ~ any;
                                m_match_bool_j_202 = var_j_197 ~ int;
                                m_match_cond_j_203 = m_match_bool_j_202 ? (
                                        bool_j_204 = true
                                    ) : (
                                        m_match_cond_j_200 = m_match_bool_j_199 ? (
                                                var_j_201 = fail_b_28
                                            ) : (
                                                void_j_198 = {}
                                            )
                                    ));
                            flatten_fun_j_207 = fun bj_null_j_13 -> (
                                input_j_206 = input);
                            flatten_fun_j_209 = fun expr_b_29 -> (
                                var_j_208 = expr_b_29);
                            record_j_210 = {checker = flatten_fun_j_205, generator = flatten_fun_j_207, wrapper = flatten_fun_j_209};
                            proj_j_211 = record_j_210.checker;
                            var_j_212 = arg_assume_b_33;
                            appl_j_213 = proj_j_211 var_j_212;
                            if_j_240 = appl_j_213 ? (
                                    bool_j_214 = false;
                                    fail_b_31 = bool_j_214;
                                    flatten_fun_j_223 = fun expr_b_30 -> (
                                        var_j_215 = expr_b_30;
                                        m_match_bool_j_217 = var_j_215 ~ any;
                                        m_match_bool_j_220 = var_j_215 ~ bool;
                                        m_match_cond_j_221 = m_match_bool_j_220 ? (
                                                bool_j_222 = true
                                            ) : (
                                                m_match_cond_j_218 = m_match_bool_j_217 ? (
                                                        var_j_219 = fail_b_31
                                                    ) : (
                                                        void_j_216 = 
                                                            {}
                                                    )
                                            ));
                                    flatten_fun_j_227 = fun bj_null_j_14 -> (
                                        int_j_224 = 0;
                                        input_j_225 = input;
                                        m_bl_i_403 = int_j_224 ~ int;
                                        m_br_i_404 = input_j_225 ~ int;
                                        m_b_i_405 = m_bl_i_403 and m_br_i_404;
                                        binop_j_226 = m_b_i_405 ? (
                                                c_binop_i_406 = int_j_224 <= input_j_225
                                            ) : (
                                                ab_i_407 = abort
                                            ));
                                    flatten_fun_j_229 = fun expr_b_32 -> (
                                        var_j_228 = expr_b_32);
                                    record_j_230 = {checker = flatten_fun_j_223, generator = flatten_fun_j_227, wrapper = flatten_fun_j_229};
                                    proj_j_231 = record_j_230.generator;
                                    int_j_232 = 0;
                                    appl_j_233 = proj_j_231 int_j_232
                                ) : (
                                    bool_j_234 = false;
                                    fail_b_34 = bool_j_234;
                                    var_j_235 = fail_b_34;
                                    assert_pred_j_236 = var_j_235;
                                    assert_res_j_237 = assert_pred_j_236 ? (
                                            assert_res_true_j_238 = {}
                                        ) : (
                                            ab_j_239 = abort
                                        )
                                )));
                    flatten_fun_j_290 = fun expr_b_50 -> (
                        flatten_fun_j_289 = fun arg_b_51 -> (
                            bool_j_243 = false;
                            fail_b_45 = bool_j_243;
                            flatten_fun_j_252 = fun expr_b_44 -> (
                                var_j_244 = expr_b_44;
                                m_match_bool_j_246 = var_j_244 ~ any;
                                m_match_bool_j_249 = var_j_244 ~ int;
                                m_match_cond_j_250 = m_match_bool_j_249 ? (
                                        bool_j_251 = true
                                    ) : (
                                        m_match_cond_j_247 = m_match_bool_j_246 ? (
                                                var_j_248 = fail_b_45
                                            ) : (
                                                void_j_245 = {}
                                            )
                                    ));
                            flatten_fun_j_254 = fun bj_null_j_16 -> (
                                input_j_253 = input);
                            flatten_fun_j_256 = fun expr_b_46 -> (
                                var_j_255 = expr_b_46);
                            record_j_257 = {checker = flatten_fun_j_252, generator = flatten_fun_j_254, wrapper = flatten_fun_j_256};
                            proj_j_258 = record_j_257.checker;
                            var_j_259 = arg_b_51;
                            m_i_408 = proj_j_258 ~ fun;
                            appl_j_260 = m_i_408 ? (
                                    c_appl_i_409 = proj_j_258 var_j_259
                                ) : (
                                    ab_i_410 = abort
                                );
                            m_i_411 = appl_j_260 ~ bool;
                            if_j_288 = m_i_411 ? (
                                    c_cond_i_423 = appl_j_260 ? (
                                            bool_j_261 = false;
                                            fail_b_48 = bool_j_261;
                                            flatten_fun_j_270 = fun expr_b_47 -> (
                                                var_j_262 = expr_b_47;
                                                m_match_bool_j_264 = var_j_262 ~ any;
                                                m_match_bool_j_267 = var_j_262 ~ bool;
                                                m_match_cond_j_268 = m_match_bool_j_267 ? (
                                                        bool_j_269 = true
                                                    ) : (
                                                        m_match_cond_j_265 = m_match_bool_j_264 ? (
                                                                var_j_266 = fail_b_48
                                                            ) : (
                                                                void_j_263 = 
                                                                    {}
                                                            )
                                                    ));
                                            flatten_fun_j_274 = fun bj_null_j_17 -> (
                                                int_j_271 = 0;
                                                input_j_272 = input;
                                                m_bl_i_412 = int_j_271 ~ int;
                                                m_br_i_413 = input_j_272 ~ int;
                                                m_b_i_414 = m_bl_i_412 and m_br_i_413;
                                                binop_j_273 = m_b_i_414 ? (
                                                        c_binop_i_415 = int_j_271 <= input_j_272
                                                    ) : (
                                                        ab_i_416 = abort
                                                    ));
                                            flatten_fun_j_276 = fun expr_b_49 -> (
                                                var_j_275 = expr_b_49);
                                            record_j_277 = {checker = flatten_fun_j_270, generator = flatten_fun_j_274, wrapper = flatten_fun_j_276};
                                            proj_j_278 = record_j_277.wrapper;
                                            var_j_279 = expr_b_50;
                                            var_j_280 = arg_b_51;
                                            m_i_417 = var_j_279 ~ fun;
                                            appl_j_281 = m_i_417 ? (
                                                    c_appl_i_418 = var_j_279 var_j_280
                                                ) : (
                                                    ab_i_419 = abort
                                                );
                                            m_i_420 = proj_j_278 ~ fun;
                                            appl_j_282 = m_i_420 ? (
                                                    c_appl_i_421 = proj_j_278 appl_j_281
                                                ) : (
                                                    ab_i_422 = abort
                                                )
                                        ) : (
                                            bool_j_283 = false;
                                            assert_pred_j_284 = bool_j_283;
                                            assert_res_j_285 = assert_pred_j_284 ? (
                                                    assert_res_true_j_286 = 
                                                        {}
                                                ) : (
                                                    ab_j_287 = abort
                                                )
                                        )
                                ) : (
                                    ab_i_424 = abort
                                )));
                    record_j_291 = {checker = flatten_fun_j_195, generator = flatten_fun_j_242, wrapper = flatten_fun_j_290}
                )
        ) : (
            ab_i_426 = abort
        ));
B = B_j_293;
id_j_295 = fun x_j_3 -> (
    var_j_294 = x_j_3);
id = id_j_295;
addone_j_299 = fun x -> (
    var_j_296 = x;
    int_j_297 = 1;
    m_bl_i_427 = var_j_296 ~ int;
    m_br_i_428 = int_j_297 ~ int;
    m_b_i_429 = m_bl_i_427 and m_br_i_428;
    binop_j_298 = m_b_i_429 ? (
            c_binop_i_430 = var_j_296 + int_j_297
        ) : (
            ab_i_431 = abort
        ));
addone = addone_j_299;
f_j_342 = fun a_j_2 -> (
    flatten_fun_j_339 = fun a_b_0 -> (
        bool_j_300 = false;
        fail_b_56 = bool_j_300;
        flatten_fun_j_309 = fun expr_b_55 -> (
            var_j_301 = expr_b_55;
            m_match_bool_j_303 = var_j_301 ~ any;
            m_match_bool_j_306 = var_j_301 ~ int;
            m_match_cond_j_307 = m_match_bool_j_306 ? (
                    bool_j_308 = true
                ) : (
                    m_match_cond_j_304 = m_match_bool_j_303 ? (
                            var_j_305 = fail_b_56
                        ) : (
                            void_j_302 = {}
                        )
                ));
        flatten_fun_j_311 = fun bj_null_j_0 -> (
            input_j_310 = input);
        flatten_fun_j_313 = fun expr_b_57 -> (
            var_j_312 = expr_b_57);
        record_j_314 = {checker = flatten_fun_j_309, generator = flatten_fun_j_311, wrapper = flatten_fun_j_313};
        proj_j_315 = record_j_314.checker;
        var_j_316 = a_b_0;
        appl_j_317 = proj_j_315 var_j_316;
        arg_check_b_1 = appl_j_317;
        var_j_318 = arg_check_b_1;
        if_j_338 = var_j_318 ? (
                flatten_fun_j_322 = fun a_j_1 -> (
                    var_j_319 = B;
                    var_j_320 = a_j_1;
                    m_i_432 = var_j_319 ~ fun;
                    appl_j_321 = m_i_432 ? (
                            c_appl_i_433 = var_j_319 var_j_320
                        ) : (
                            ab_i_434 = abort
                        ));
                var_j_323 = a_b_0;
                appl_j_324 = flatten_fun_j_322 var_j_323;
                proj_j_325 = appl_j_324.wrapper;
                int_j_326 = 0;
                var_j_327 = a_j_2;
                m_bl_i_435 = int_j_326 ~ int;
                m_br_i_436 = var_j_327 ~ int;
                m_b_i_437 = m_bl_i_435 and m_br_i_436;
                binop_j_328 = m_b_i_437 ? (
                        c_binop_i_438 = int_j_326 < var_j_327
                    ) : (
                        ab_i_439 = abort
                    );
                m_i_440 = binop_j_328 ~ bool;
                if_j_331 = m_i_440 ? (
                        c_cond_i_441 = binop_j_328 ? (
                                var_j_329 = id
                            ) : (
                                var_j_330 = addone
                            )
                    ) : (
                        ab_i_442 = abort
                    );
                m_i_443 = proj_j_325 ~ fun;
                appl_j_332 = m_i_443 ? (
                        c_appl_i_444 = proj_j_325 if_j_331
                    ) : (
                        ab_i_445 = abort
                    )
            ) : (
                bool_j_333 = false;
                assert_pred_j_334 = bool_j_333;
                assert_res_j_335 = assert_pred_j_334 ? (
                        assert_res_true_j_336 = {}
                    ) : (
                        ab_j_337 = abort
                    )
            ));
    var_j_340 = a_j_2;
    appl_j_341 = flatten_fun_j_339 var_j_340);
f = f_j_342;
bool_j_343 = false;
fail_b_53 = bool_j_343;
flatten_fun_j_352 = fun expr_b_52 -> (
    var_j_344 = expr_b_52;
    m_match_bool_j_346 = var_j_344 ~ any;
    m_match_bool_j_349 = var_j_344 ~ int;
    m_match_cond_j_350 = m_match_bool_j_349 ? (
            bool_j_351 = true
        ) : (
            m_match_cond_j_347 = m_match_bool_j_346 ? (
                    var_j_348 = fail_b_53
                ) : (
                    void_j_345 = {}
                )
        ));
flatten_fun_j_354 = fun bj_null -> (
    input_j_353 = input);
flatten_fun_j_356 = fun expr_b_54 -> (
    var_j_355 = expr_b_54);
record_j_357 = {checker = flatten_fun_j_352, generator = flatten_fun_j_354, wrapper = flatten_fun_j_356};
proj_j_358 = record_j_357.generator;
int_j_359 = 0;
appl_j_360 = proj_j_358 int_j_359;
a_b_58 = appl_j_360;
flatten_fun_j_365 = fun a -> (
    var_j_361 = B;
    var_j_362 = a;
    m_i_446 = var_j_361 ~ fun;
    appl_j_363 = m_i_446 ? (
            c_appl_i_447 = var_j_361 var_j_362
        ) : (
            ab_i_448 = abort
        );
    proj_j_364 = appl_j_363.checker);
appl_j_367 = flatten_fun_j_365 a_b_58;
appl_j_370 = f a_b_58;
appl_j_371 = appl_j_367 appl_j_370;
check_res_b_59 = appl_j_371;
if_j_379 = check_res_b_59 ? (
        var_j_373 = f
    ) : (
        error_var_j_374 = check_res_b_59;
        assert_pred_j_375 = error_var_j_374;
        assert_res_j_376 = assert_pred_j_375 ? (
                assert_res_true_j_377 = {}
            ) : (
                ab_j_378 = abort
            )
    );
i_result = if_j_379