_i_first = {};
flatten_fun_j_56 = fun testFun_j_4 -> (
    flatten_fun_j_55 = fun l -> (
        var_j_29 = testFun_j_4;
        var_j_30 = testFun_j_4;
        appl_j_31 = var_j_29 var_j_30;
        testFun = appl_j_31;
        bool_j_32 = false;
        fail_b_0 = bool_j_32;
        var_j_33 = l;
        m_match_bool_j_35 = var_j_33 ~ {_j_head, _j_tail, _};
        m_match_bool_j_45 = var_j_33 ~ {_j_empty, _};
        m_match_bool_j_48 = var_j_33 ~ {~untouched, _};
        m_match_cond_j_49 = m_match_bool_j_48 ? (
                var_j_50 = fail_b_0;
                assert_pred_j_51 = var_j_50;
                assert_res_j_52 = assert_pred_j_51 ? (
                        assert_res_true_j_53 = {}
                    ) : (
                        ab_j_54 = abort
                    )
            ) : (
                m_match_cond_j_46 = m_match_bool_j_45 ? (
                        bool_j_47 = true
                    ) : (
                        m_match_cond_j_36 = m_match_bool_j_35 ? (
                                hd = var_j_33._j_head;
                                tl = var_j_33._j_tail;
                                int_j_37 = 10;
                                var_j_38 = hd;
                                binop_j_39 = int_j_37 < var_j_38;
                                if_j_44 = binop_j_39 ? (
                                        var_j_40 = testFun;
                                        var_j_41 = tl;
                                        appl_j_42 = var_j_40 var_j_41
                                    ) : (
                                        bool_j_43 = false
                                    )
                            ) : (
                                ab_j_34 = abort
                            )
                    )
            )));
appl_j_59 = flatten_fun_j_56 flatten_fun_j_56;
input_j_60 = input;
userinput = input_j_60;
val = userinput;
record_j_64 = {};
record_j_65 = {_j_empty = record_j_64};
record_j_66 = {_j_head = val, _j_tail = record_j_65};
record_j_67 = {_j_head = val, _j_tail = record_j_66};
x = record_j_67;
flatten_fun_j_183 = fun expr_b_32 -> (
    flatten_fun_j_119 = fun expr_b_29 -> (
        bool_j_68 = false;
        lst_fail_b_30 = bool_j_68;
        var_j_69 = expr_b_29;
        m_match_bool_j_71 = var_j_69 ~ any;
        m_match_bool_j_74 = var_j_69 ~ {_j_head, _j_tail, _};
        m_match_bool_j_116 = var_j_69 ~ {_j_empty, _};
        m_match_cond_j_117 = m_match_bool_j_116 ? (
                bool_j_118 = true
            ) : (
                m_match_cond_j_75 = m_match_bool_j_74 ? (
                        ~underscore = var_j_69._j_head;
                        ~underscore2 = var_j_69._j_tail;
                        flatten_fun_j_109 = fun test_fun_b_26_j_0 -> (
                            flatten_fun_j_108 = fun test_list_b_27 -> (
                                var_j_76 = test_fun_b_26_j_0;
                                var_j_77 = test_fun_b_26_j_0;
                                appl_j_78 = var_j_76 var_j_77;
                                test_fun_b_26 = appl_j_78;
                                var_j_79 = test_list_b_27;
                                m_match_bool_j_81 = var_j_79 ~ {_j_head, _j_tail, _};
                                m_match_bool_j_105 = var_j_79 ~ {_j_empty, _};
                                m_match_cond_j_106 = m_match_bool_j_105 ? (
                                        bool_j_107 = true
                                    ) : (
                                        m_match_cond_j_82 = m_match_bool_j_81 ? (
                                                hd_j_6 = var_j_79._j_head;
                                                tl_j_5 = var_j_79._j_tail;
                                                bool_j_83 = false;
                                                fail_b_24 = bool_j_83;
                                                flatten_fun_j_92 = fun expr_b_23 -> (
                                                    var_j_84 = expr_b_23;
                                                    m_match_bool_j_86 = var_j_84 ~ any;
                                                    m_match_bool_j_89 = var_j_84 ~ int;
                                                    m_match_cond_j_90 = m_match_bool_j_89 ? (
                                                            bool_j_91 = true
                                                        ) : (
                                                            m_match_cond_j_87 = m_match_bool_j_86 ? (
                                                                    var_j_88 = fail_b_24
                                                                ) : (
                                                                    void_j_85 = 
                                                                    {}
                                                                )
                                                        ));
                                                flatten_fun_j_94 = fun ~null -> (
                                                    input_j_93 = input);
                                                record_j_95 = {checker = flatten_fun_j_92, generator = flatten_fun_j_94};
                                                proj_j_96 = record_j_95.checker;
                                                var_j_97 = hd_j_6;
                                                appl_j_98 = proj_j_96 var_j_97;
                                                elm_check_b_28 = appl_j_98;
                                                var_j_99 = elm_check_b_28;
                                                if_j_104 = var_j_99 ? (
                                                        var_j_100 = test_fun_b_26;
                                                        var_j_101 = tl_j_5;
                                                        appl_j_102 = var_j_100 var_j_101
                                                    ) : (
                                                        var_j_103 = elm_check_b_28
                                                    )
                                            ) : (
                                                void_j_80 = {}
                                            )
                                    )));
                        test_fun_b_26_j_0_j_8 = flatten_fun_j_109;
                        var_j_110 = test_fun_b_26_j_0_j_8;
                        var_j_111 = test_fun_b_26_j_0_j_8;
                        appl_j_112 = var_j_110 var_j_111;
                        test_fun_b_26_j_7 = appl_j_112;
                        var_j_113 = test_fun_b_26_j_7;
                        var_j_114 = expr_b_29;
                        appl_j_115 = var_j_113 var_j_114
                    ) : (
                        m_match_cond_j_72 = m_match_bool_j_71 ? (
                                var_j_73 = lst_fail_b_30
                            ) : (
                                void_j_70 = {}
                            )
                    )
            ));
    flatten_fun_j_168 = fun ~null_j_13 -> (
        flatten_fun_j_154 = fun list_maker_b_21_j_1 -> (
            flatten_fun_j_153 = fun len_b_20 -> (
                var_j_120 = list_maker_b_21_j_1;
                var_j_121 = list_maker_b_21_j_1;
                appl_j_122 = var_j_120 var_j_121;
                list_maker_b_21 = appl_j_122;
                var_j_123 = len_b_20;
                int_j_124 = 0;
                binop_j_125 = var_j_123 == int_j_124;
                if_j_152 = binop_j_125 ? (
                        record_j_126 = {};
                        record_j_127 = {_j_empty = record_j_126}
                    ) : (
                        bool_j_128 = false;
                        fail_b_18 = bool_j_128;
                        flatten_fun_j_137 = fun expr_b_17 -> (
                            var_j_129 = expr_b_17;
                            m_match_bool_j_131 = var_j_129 ~ any;
                            m_match_bool_j_134 = var_j_129 ~ int;
                            m_match_cond_j_135 = m_match_bool_j_134 ? (
                                    bool_j_136 = true
                                ) : (
                                    m_match_cond_j_132 = m_match_bool_j_131 ? (
                                            var_j_133 = fail_b_18
                                        ) : (
                                            void_j_130 = {}
                                        )
                                ));
                        flatten_fun_j_139 = fun ~null_j_9 -> (
                            input_j_138 = input);
                        record_j_140 = {checker = flatten_fun_j_137, generator = flatten_fun_j_139};
                        proj_j_141 = record_j_140.generator;
                        int_j_142 = 0;
                        appl_j_143 = proj_j_141 int_j_142;
                        elm_b_22 = appl_j_143;
                        record_j_144 = {};
                        var_j_145 = elm_b_22;
                        var_j_146 = list_maker_b_21;
                        var_j_147 = len_b_20;
                        int_j_148 = 1;
                        binop_j_149 = var_j_147 - int_j_148;
                        appl_j_150 = var_j_146 binop_j_149;
                        record_j_151 = {_j_cons = record_j_144, _j_head = var_j_145, _j_tail = appl_j_150}
                    )));
        list_maker_b_21_j_1_j_12 = flatten_fun_j_154;
        var_j_155 = list_maker_b_21_j_1_j_12;
        var_j_156 = list_maker_b_21_j_1_j_12;
        appl_j_157 = var_j_155 var_j_156;
        list_maker_b_21_j_11 = appl_j_157;
        input_j_158 = input;
        len_b_20_j_10 = input_j_158;
        int_j_159 = 0;
        var_j_160 = len_b_20_j_10;
        binop_j_161 = int_j_159 <= var_j_160;
        if_j_167 = binop_j_161 ? (
                var_j_162 = list_maker_b_21_j_11;
                var_j_163 = len_b_20_j_10;
                appl_j_164 = var_j_162 var_j_163
            ) : (
                bool_j_165 = false;
                assume_j_166 = assume bool_j_165
            ));
    record_j_169 = {checker = flatten_fun_j_119, generator = flatten_fun_j_168};
    proj_j_170 = record_j_169.checker;
    var_j_171 = expr_b_32;
    appl_j_172 = proj_j_170 var_j_171;
    t_check_b_33 = appl_j_172;
    var_j_173 = t_check_b_33;
    if_j_182 = var_j_173 ? (
            bool_j_174 = false;
            pred_check_b_34 = bool_j_174;
            var_j_175 = appl_j_59;
            var_j_176 = expr_b_32;
            appl_j_177 = var_j_175 var_j_176;
            if_j_180 = appl_j_177 ? (
                    bool_j_178 = true
                ) : (
                    var_j_179 = pred_check_b_34
                )
        ) : (
            var_j_181 = t_check_b_33
        ));
flatten_fun_j_296 = fun ~null_j_26 -> (
    flatten_fun_j_235 = fun expr_b_13 -> (
        bool_j_184 = false;
        lst_fail_b_14 = bool_j_184;
        var_j_185 = expr_b_13;
        m_match_bool_j_187 = var_j_185 ~ any;
        m_match_bool_j_190 = var_j_185 ~ {_j_head, _j_tail, _};
        m_match_bool_j_232 = var_j_185 ~ {_j_empty, _};
        m_match_cond_j_233 = m_match_bool_j_232 ? (
                bool_j_234 = true
            ) : (
                m_match_cond_j_191 = m_match_bool_j_190 ? (
                        ~underscore_j_20 = var_j_185._j_head;
                        ~underscore2_j_19 = var_j_185._j_tail;
                        flatten_fun_j_225 = fun test_fun_b_10_j_2 -> (
                            flatten_fun_j_224 = fun test_list_b_11 -> (
                                var_j_192 = test_fun_b_10_j_2;
                                var_j_193 = test_fun_b_10_j_2;
                                appl_j_194 = var_j_192 var_j_193;
                                test_fun_b_10 = appl_j_194;
                                var_j_195 = test_list_b_11;
                                m_match_bool_j_197 = var_j_195 ~ {_j_head, _j_tail, _};
                                m_match_bool_j_221 = var_j_195 ~ {_j_empty, _};
                                m_match_cond_j_222 = m_match_bool_j_221 ? (
                                        bool_j_223 = true
                                    ) : (
                                        m_match_cond_j_198 = m_match_bool_j_197 ? (
                                                hd_j_16 = var_j_195._j_head;
                                                tl_j_15 = var_j_195._j_tail;
                                                bool_j_199 = false;
                                                fail_b_8 = bool_j_199;
                                                flatten_fun_j_208 = fun expr_b_7 -> (
                                                    var_j_200 = expr_b_7;
                                                    m_match_bool_j_202 = var_j_200 ~ any;
                                                    m_match_bool_j_205 = var_j_200 ~ int;
                                                    m_match_cond_j_206 = m_match_bool_j_205 ? (
                                                            bool_j_207 = true
                                                        ) : (
                                                            m_match_cond_j_203 = m_match_bool_j_202 ? (
                                                                    var_j_204 = fail_b_8
                                                                ) : (
                                                                    void_j_201 = 
                                                                    {}
                                                                )
                                                        ));
                                                flatten_fun_j_210 = fun ~null_j_14 -> (
                                                    input_j_209 = input);
                                                record_j_211 = {checker = flatten_fun_j_208, generator = flatten_fun_j_210};
                                                proj_j_212 = record_j_211.checker;
                                                var_j_213 = hd_j_16;
                                                appl_j_214 = proj_j_212 var_j_213;
                                                elm_check_b_12 = appl_j_214;
                                                var_j_215 = elm_check_b_12;
                                                if_j_220 = var_j_215 ? (
                                                        var_j_216 = test_fun_b_10;
                                                        var_j_217 = tl_j_15;
                                                        appl_j_218 = var_j_216 var_j_217
                                                    ) : (
                                                        var_j_219 = elm_check_b_12
                                                    )
                                            ) : (
                                                void_j_196 = {}
                                            )
                                    )));
                        test_fun_b_10_j_2_j_18 = flatten_fun_j_225;
                        var_j_226 = test_fun_b_10_j_2_j_18;
                        var_j_227 = test_fun_b_10_j_2_j_18;
                        appl_j_228 = var_j_226 var_j_227;
                        test_fun_b_10_j_17 = appl_j_228;
                        var_j_229 = test_fun_b_10_j_17;
                        var_j_230 = expr_b_13;
                        appl_j_231 = var_j_229 var_j_230
                    ) : (
                        m_match_cond_j_188 = m_match_bool_j_187 ? (
                                var_j_189 = lst_fail_b_14
                            ) : (
                                void_j_186 = {}
                            )
                    )
            ));
    flatten_fun_j_284 = fun ~null_j_25 -> (
        flatten_fun_j_270 = fun list_maker_b_5_j_3 -> (
            flatten_fun_j_269 = fun len_b_4 -> (
                var_j_236 = list_maker_b_5_j_3;
                var_j_237 = list_maker_b_5_j_3;
                appl_j_238 = var_j_236 var_j_237;
                list_maker_b_5 = appl_j_238;
                var_j_239 = len_b_4;
                int_j_240 = 0;
                binop_j_241 = var_j_239 == int_j_240;
                if_j_268 = binop_j_241 ? (
                        record_j_242 = {};
                        record_j_243 = {_j_empty = record_j_242}
                    ) : (
                        bool_j_244 = false;
                        fail_b_2 = bool_j_244;
                        flatten_fun_j_253 = fun expr_b_1 -> (
                            var_j_245 = expr_b_1;
                            m_match_bool_j_247 = var_j_245 ~ any;
                            m_match_bool_j_250 = var_j_245 ~ int;
                            m_match_cond_j_251 = m_match_bool_j_250 ? (
                                    bool_j_252 = true
                                ) : (
                                    m_match_cond_j_248 = m_match_bool_j_247 ? (
                                            var_j_249 = fail_b_2
                                        ) : (
                                            void_j_246 = {}
                                        )
                                ));
                        flatten_fun_j_255 = fun ~null_j_21 -> (
                            input_j_254 = input);
                        record_j_256 = {checker = flatten_fun_j_253, generator = flatten_fun_j_255};
                        proj_j_257 = record_j_256.generator;
                        int_j_258 = 0;
                        appl_j_259 = proj_j_257 int_j_258;
                        elm_b_6 = appl_j_259;
                        record_j_260 = {};
                        var_j_261 = elm_b_6;
                        var_j_262 = list_maker_b_5;
                        var_j_263 = len_b_4;
                        int_j_264 = 1;
                        binop_j_265 = var_j_263 - int_j_264;
                        appl_j_266 = var_j_262 binop_j_265;
                        record_j_267 = {_j_cons = record_j_260, _j_head = var_j_261, _j_tail = appl_j_266}
                    )));
        list_maker_b_5_j_3_j_24 = flatten_fun_j_270;
        var_j_271 = list_maker_b_5_j_3_j_24;
        var_j_272 = list_maker_b_5_j_3_j_24;
        appl_j_273 = var_j_271 var_j_272;
        list_maker_b_5_j_23 = appl_j_273;
        input_j_274 = input;
        len_b_4_j_22 = input_j_274;
        int_j_275 = 0;
        var_j_276 = len_b_4_j_22;
        binop_j_277 = int_j_275 <= var_j_276;
        if_j_283 = binop_j_277 ? (
                var_j_278 = list_maker_b_5_j_23;
                var_j_279 = len_b_4_j_22;
                appl_j_280 = var_j_278 var_j_279
            ) : (
                bool_j_281 = false;
                assume_j_282 = assume bool_j_281
            ));
    record_j_285 = {checker = flatten_fun_j_235, generator = flatten_fun_j_284};
    proj_j_286 = record_j_285.generator;
    int_j_287 = 0;
    appl_j_288 = proj_j_286 int_j_287;
    candidate_b_16 = appl_j_288;
    var_j_289 = appl_j_59;
    var_j_290 = candidate_b_16;
    appl_j_291 = var_j_289 var_j_290;
    if_j_295 = appl_j_291 ? (
            var_j_292 = candidate_b_16
        ) : (
            bool_j_293 = false;
            assume_j_294 = assume bool_j_293
        ));
record_j_297 = {checker = flatten_fun_j_183, generator = flatten_fun_j_296};
proj_j_298 = record_j_297.checker;
record_j_301 = {};
record_j_302 = {_j_empty = record_j_301};
record_j_303 = {_j_head = val, _j_tail = record_j_302};
record_j_304 = {_j_head = val, _j_tail = record_j_303};
appl_j_305 = proj_j_298 record_j_304;
check_res_b_36 = appl_j_305;
if_j_313 = check_res_b_36 ? (
        var_j_307 = x
    ) : (
        error_var_j_308 = check_res_b_36;
        assert_pred_j_309 = error_var_j_308;
        assert_res_j_310 = assert_pred_j_309 ? (
                assert_res_true_j_311 = {}
            ) : (
                ab_j_312 = abort
            )
    );
_i_result = if_j_313