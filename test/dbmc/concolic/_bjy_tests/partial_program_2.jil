i_first = {};
g_j_281 = fun f -> (
    g_j_280 = fun x -> (
        flatten_fun_j_277 = fun f_b_2 -> (
            int_j_24 = 0;
            input_j_25 = input;
            m_bl_i_514 = int_j_24 ~ int;
            m_br_i_515 = input_j_25 ~ int;
            m_b_i_516 = m_bl_i_514 and m_br_i_515;
            binop_j_26 = m_b_i_516 ? (
                    c_binop_i_517 = int_j_24 < input_j_25
                ) : (
                    ab_i_518 = abort
                );
            if_j_163 = binop_j_26 ? (
                    flatten_fun_j_66 = fun expr_b_46 -> (
                        bool_j_27 = false;
                        fail_b_41 = bool_j_27;
                        flatten_fun_j_36 = fun expr_b_40 -> (
                            var_j_28 = expr_b_40;
                            m_match_bool_j_30 = var_j_28 ~ any;
                            m_match_bool_j_33 = var_j_28 ~ int;
                            m_match_cond_j_34 = m_match_bool_j_33 ? (
                                    bool_j_35 = true
                                ) : (
                                    m_match_cond_j_31 = m_match_bool_j_30 ? (
                                            var_j_32 = fail_b_41
                                        ) : (
                                            void_j_29 = {}
                                        )
                                ));
                        flatten_fun_j_38 = fun bj_null_j_11 -> (
                            input_j_37 = input);
                        flatten_fun_j_40 = fun expr_b_42 -> (
                            var_j_39 = expr_b_42);
                        record_j_41 = {checker = flatten_fun_j_36, generator = flatten_fun_j_38, wrapper = flatten_fun_j_40};
                        proj_j_42 = record_j_41.generator;
                        int_j_43 = 0;
                        appl_j_44 = proj_j_42 int_j_43;
                        arg_assert_b_47 = appl_j_44;
                        var_j_45 = expr_b_46;
                        var_j_46 = arg_assert_b_47;
                        appl_j_47 = var_j_45 var_j_46;
                        fun_ret_b_48 = appl_j_47;
                        bool_j_48 = false;
                        fail_b_44 = bool_j_48;
                        flatten_fun_j_57 = fun expr_b_43 -> (
                            var_j_49 = expr_b_43;
                            m_match_bool_j_51 = var_j_49 ~ any;
                            m_match_bool_j_54 = var_j_49 ~ int;
                            m_match_cond_j_55 = m_match_bool_j_54 ? (
                                    bool_j_56 = true
                                ) : (
                                    m_match_cond_j_52 = m_match_bool_j_51 ? (
                                            var_j_53 = fail_b_44
                                        ) : (
                                            void_j_50 = {}
                                        )
                                ));
                        flatten_fun_j_59 = fun bj_null_j_12 -> (
                            input_j_58 = input);
                        flatten_fun_j_61 = fun expr_b_45 -> (
                            var_j_60 = expr_b_45);
                        record_j_62 = {checker = flatten_fun_j_57, generator = flatten_fun_j_59, wrapper = flatten_fun_j_61};
                        proj_j_63 = record_j_62.checker;
                        var_j_64 = fun_ret_b_48;
                        appl_j_65 = proj_j_63 var_j_64);
                    flatten_fun_j_111 = fun bj_null_j_15 -> (
                        flatten_fun_j_110 = fun arg_assume_b_38 -> (
                            bool_j_67 = false;
                            fail_b_33 = bool_j_67;
                            flatten_fun_j_76 = fun expr_b_32 -> (
                                var_j_68 = expr_b_32;
                                m_match_bool_j_70 = var_j_68 ~ any;
                                m_match_bool_j_73 = var_j_68 ~ int;
                                m_match_cond_j_74 = m_match_bool_j_73 ? (
                                        bool_j_75 = true
                                    ) : (
                                        m_match_cond_j_71 = m_match_bool_j_70 ? (
                                                var_j_72 = fail_b_33
                                            ) : (
                                                void_j_69 = {}
                                            )
                                    ));
                            flatten_fun_j_78 = fun bj_null_j_13 -> (
                                input_j_77 = input);
                            flatten_fun_j_80 = fun expr_b_34 -> (
                                var_j_79 = expr_b_34);
                            record_j_81 = {checker = flatten_fun_j_76, generator = flatten_fun_j_78, wrapper = flatten_fun_j_80};
                            proj_j_82 = record_j_81.checker;
                            var_j_83 = arg_assume_b_38;
                            appl_j_84 = proj_j_82 var_j_83;
                            if_j_109 = appl_j_84 ? (
                                    bool_j_85 = false;
                                    fail_b_36 = bool_j_85;
                                    flatten_fun_j_94 = fun expr_b_35 -> (
                                        var_j_86 = expr_b_35;
                                        m_match_bool_j_88 = var_j_86 ~ any;
                                        m_match_bool_j_91 = var_j_86 ~ int;
                                        m_match_cond_j_92 = m_match_bool_j_91 ? (
                                                bool_j_93 = true
                                            ) : (
                                                m_match_cond_j_89 = m_match_bool_j_88 ? (
                                                        var_j_90 = fail_b_36
                                                    ) : (
                                                        void_j_87 = {}
                                                    )
                                            ));
                                    flatten_fun_j_96 = fun bj_null_j_14 -> (
                                        input_j_95 = input);
                                    flatten_fun_j_98 = fun expr_b_37 -> (
                                        var_j_97 = expr_b_37);
                                    record_j_99 = {checker = flatten_fun_j_94, generator = flatten_fun_j_96, wrapper = flatten_fun_j_98};
                                    proj_j_100 = record_j_99.generator;
                                    int_j_101 = 0;
                                    appl_j_102 = proj_j_100 int_j_101
                                ) : (
                                    bool_j_103 = false;
                                    fail_b_39 = bool_j_103;
                                    var_j_104 = fail_b_39;
                                    assert_pred_j_105 = var_j_104;
                                    assert_res_j_106 = assert_pred_j_105 ? (
                                            assert_res_true_j_107 = {}
                                        ) : (
                                            ab_j_108 = abort
                                        )
                                )));
                    flatten_fun_j_157 = fun expr_b_55 -> (
                        flatten_fun_j_156 = fun arg_b_56 -> (
                            bool_j_112 = false;
                            fail_b_50 = bool_j_112;
                            flatten_fun_j_121 = fun expr_b_49 -> (
                                var_j_113 = expr_b_49;
                                m_match_bool_j_115 = var_j_113 ~ any;
                                m_match_bool_j_118 = var_j_113 ~ int;
                                m_match_cond_j_119 = m_match_bool_j_118 ? (
                                        bool_j_120 = true
                                    ) : (
                                        m_match_cond_j_116 = m_match_bool_j_115 ? (
                                                var_j_117 = fail_b_50
                                            ) : (
                                                void_j_114 = {}
                                            )
                                    ));
                            flatten_fun_j_123 = fun bj_null_j_16 -> (
                                input_j_122 = input);
                            flatten_fun_j_125 = fun expr_b_51 -> (
                                var_j_124 = expr_b_51);
                            record_j_126 = {checker = flatten_fun_j_121, generator = flatten_fun_j_123, wrapper = flatten_fun_j_125};
                            proj_j_127 = record_j_126.checker;
                            var_j_128 = arg_b_56;
                            m_i_519 = proj_j_127 ~ fun;
                            appl_j_129 = m_i_519 ? (
                                    c_appl_i_520 = proj_j_127 var_j_128
                                ) : (
                                    ab_i_521 = abort
                                );
                            m_i_522 = appl_j_129 ~ bool;
                            if_j_155 = m_i_522 ? (
                                    c_cond_i_529 = appl_j_129 ? (
                                            bool_j_130 = false;
                                            fail_b_53 = bool_j_130;
                                            flatten_fun_j_139 = fun expr_b_52 -> (
                                                var_j_131 = expr_b_52;
                                                m_match_bool_j_133 = var_j_131 ~ any;
                                                m_match_bool_j_136 = var_j_131 ~ int;
                                                m_match_cond_j_137 = m_match_bool_j_136 ? (
                                                        bool_j_138 = true
                                                    ) : (
                                                        m_match_cond_j_134 = m_match_bool_j_133 ? (
                                                                var_j_135 = fail_b_53
                                                            ) : (
                                                                void_j_132 = 
                                                                    {}
                                                            )
                                                    ));
                                            flatten_fun_j_141 = fun bj_null_j_17 -> (
                                                input_j_140 = input);
                                            flatten_fun_j_143 = fun expr_b_54 -> (
                                                var_j_142 = expr_b_54);
                                            record_j_144 = {checker = flatten_fun_j_139, generator = flatten_fun_j_141, wrapper = flatten_fun_j_143};
                                            proj_j_145 = record_j_144.wrapper;
                                            var_j_146 = expr_b_55;
                                            var_j_147 = arg_b_56;
                                            m_i_523 = var_j_146 ~ fun;
                                            appl_j_148 = m_i_523 ? (
                                                    c_appl_i_524 = var_j_146 var_j_147
                                                ) : (
                                                    ab_i_525 = abort
                                                );
                                            m_i_526 = proj_j_145 ~ fun;
                                            appl_j_149 = m_i_526 ? (
                                                    c_appl_i_527 = proj_j_145 appl_j_148
                                                ) : (
                                                    ab_i_528 = abort
                                                )
                                        ) : (
                                            bool_j_150 = false;
                                            assert_pred_j_151 = bool_j_150;
                                            assert_res_j_152 = assert_pred_j_151 ? (
                                                    assert_res_true_j_153 = 
                                                        {}
                                                ) : (
                                                    ab_j_154 = abort
                                                )
                                        )
                                ) : (
                                    ab_i_530 = abort
                                )));
                    record_j_158 = {checker = flatten_fun_j_66, generator = flatten_fun_j_111, wrapper = flatten_fun_j_157};
                    proj_j_159 = record_j_158.checker;
                    var_j_160 = f_b_2;
                    m_i_531 = proj_j_159 ~ fun;
                    appl_j_161 = m_i_531 ? (
                            c_appl_i_532 = proj_j_159 var_j_160
                        ) : (
                            ab_i_533 = abort
                        )
                ) : (
                    bool_j_162 = true
                );
            arg_check_b_3 = if_j_163;
            var_j_164 = arg_check_b_3;
            if_j_276 = var_j_164 ? (
                    flatten_fun_j_268 = fun x_b_0 -> (
                        int_j_165 = 0;
                        input_j_166 = input;
                        m_bl_i_534 = int_j_165 ~ int;
                        m_br_i_535 = input_j_166 ~ int;
                        m_b_i_536 = m_bl_i_534 and m_br_i_535;
                        binop_j_167 = m_b_i_536 ? (
                                c_binop_i_537 = int_j_165 < input_j_166
                            ) : (
                                ab_i_538 = abort
                            );
                        if_j_187 = binop_j_167 ? (
                                bool_j_168 = false;
                                fail_b_58 = bool_j_168;
                                flatten_fun_j_177 = fun expr_b_57 -> (
                                    var_j_169 = expr_b_57;
                                    m_match_bool_j_171 = var_j_169 ~ any;
                                    m_match_bool_j_174 = var_j_169 ~ int;
                                    m_match_cond_j_175 = m_match_bool_j_174 ? (
                                            bool_j_176 = true
                                        ) : (
                                            m_match_cond_j_172 = m_match_bool_j_171 ? (
                                                    var_j_173 = fail_b_58
                                                ) : (
                                                    void_j_170 = {}
                                                )
                                        ));
                                flatten_fun_j_179 = fun bj_null_j_18 -> (
                                    input_j_178 = input);
                                flatten_fun_j_181 = fun expr_b_59 -> (
                                    var_j_180 = expr_b_59);
                                record_j_182 = {checker = flatten_fun_j_177, generator = flatten_fun_j_179, wrapper = flatten_fun_j_181};
                                proj_j_183 = record_j_182.checker;
                                var_j_184 = x_b_0;
                                m_i_539 = proj_j_183 ~ fun;
                                appl_j_185 = m_i_539 ? (
                                        c_appl_i_540 = proj_j_183 var_j_184
                                    ) : (
                                        ab_i_541 = abort
                                    )
                            ) : (
                                bool_j_186 = true
                            );
                        arg_check_b_1 = if_j_187;
                        var_j_188 = arg_check_b_1;
                        if_j_267 = var_j_188 ? (
                                flatten_fun_j_220 = fun expr_b_67 -> (
                                    bool_j_189 = false;
                                    fail_b_65 = bool_j_189;
                                    flatten_fun_j_198 = fun expr_b_64 -> (
                                        var_j_190 = expr_b_64;
                                        m_match_bool_j_192 = var_j_190 ~ any;
                                        m_match_bool_j_195 = var_j_190 ~ int;
                                        m_match_cond_j_196 = m_match_bool_j_195 ? (
                                                bool_j_197 = true
                                            ) : (
                                                m_match_cond_j_193 = m_match_bool_j_192 ? (
                                                        var_j_194 = fail_b_65
                                                    ) : (
                                                        void_j_191 = 
                                                            {}
                                                    )
                                            ));
                                    flatten_fun_j_200 = fun bj_null_j_19 -> (
                                        input_j_199 = input);
                                    flatten_fun_j_202 = fun expr_b_66 -> (
                                        var_j_201 = expr_b_66);
                                    record_j_203 = {checker = flatten_fun_j_198, generator = flatten_fun_j_200, wrapper = flatten_fun_j_202};
                                    proj_j_204 = record_j_203.checker;
                                    var_j_205 = expr_b_67;
                                    appl_j_206 = proj_j_204 var_j_205;
                                    t_check_b_68 = appl_j_206;
                                    var_j_207 = t_check_b_68;
                                    if_j_219 = var_j_207 ? (
                                            bool_j_208 = false;
                                            pred_check_b_69 = bool_j_208;
                                            flatten_fun_j_212 = fun n_j_20 -> (
                                                int_j_209 = 0;
                                                var_j_210 = n_j_20;
                                                m_bl_i_542 = int_j_209 ~ int;
                                                m_br_i_543 = var_j_210 ~ int;
                                                m_b_i_544 = m_bl_i_542 and m_br_i_543;
                                                binop_j_211 = m_b_i_544 ? (
                                                        c_binop_i_545 = int_j_209 < var_j_210
                                                    ) : (
                                                        ab_i_546 = abort
                                                    ));
                                            var_j_213 = expr_b_67;
                                            appl_j_214 = flatten_fun_j_212 var_j_213;
                                            if_j_217 = appl_j_214 ? (
                                                    bool_j_215 = true
                                                ) : (
                                                    var_j_216 = pred_check_b_69
                                                )
                                        ) : (
                                            var_j_218 = t_check_b_68
                                        ));
                                flatten_fun_j_249 = fun bj_null_j_23 -> (
                                    bool_j_221 = false;
                                    fail_b_61 = bool_j_221;
                                    flatten_fun_j_230 = fun expr_b_60 -> (
                                        var_j_222 = expr_b_60;
                                        m_match_bool_j_224 = var_j_222 ~ any;
                                        m_match_bool_j_227 = var_j_222 ~ int;
                                        m_match_cond_j_228 = m_match_bool_j_227 ? (
                                                bool_j_229 = true
                                            ) : (
                                                m_match_cond_j_225 = m_match_bool_j_224 ? (
                                                        var_j_226 = fail_b_61
                                                    ) : (
                                                        void_j_223 = 
                                                            {}
                                                    )
                                            ));
                                    flatten_fun_j_232 = fun bj_null_j_21 -> (
                                        input_j_231 = input);
                                    flatten_fun_j_234 = fun expr_b_62 -> (
                                        var_j_233 = expr_b_62);
                                    record_j_235 = {checker = flatten_fun_j_230, generator = flatten_fun_j_232, wrapper = flatten_fun_j_234};
                                    proj_j_236 = record_j_235.generator;
                                    int_j_237 = 0;
                                    appl_j_238 = proj_j_236 int_j_237;
                                    candidate_b_63 = appl_j_238;
                                    flatten_fun_j_242 = fun n_j_22 -> (
                                        int_j_239 = 0;
                                        var_j_240 = n_j_22;
                                        m_bl_i_547 = int_j_239 ~ int;
                                        m_br_i_548 = var_j_240 ~ int;
                                        m_b_i_549 = m_bl_i_547 and m_br_i_548;
                                        binop_j_241 = m_b_i_549 ? (
                                                c_binop_i_550 = int_j_239 < var_j_240
                                            ) : (
                                                ab_i_551 = abort
                                            ));
                                    var_j_243 = candidate_b_63;
                                    appl_j_244 = flatten_fun_j_242 var_j_243;
                                    if_j_248 = appl_j_244 ? (
                                            var_j_245 = candidate_b_63
                                        ) : (
                                            bool_j_246 = false;
                                            assume_j_247 = assume bool_j_246
                                        ));
                                flatten_fun_j_251 = fun expr_b_70 -> (
                                    var_j_250 = expr_b_70);
                                record_j_252 = {checker = flatten_fun_j_220, generator = flatten_fun_j_249, wrapper = flatten_fun_j_251};
                                proj_j_253 = record_j_252.wrapper;
                                var_j_254 = f;
                                var_j_255 = x;
                                m_i_552 = var_j_254 ~ fun;
                                appl_j_256 = m_i_552 ? (
                                        c_appl_i_553 = var_j_254 var_j_255
                                    ) : (
                                        ab_i_554 = abort
                                    );
                                var_j_257 = f;
                                var_j_258 = x;
                                m_i_555 = var_j_257 ~ fun;
                                appl_j_259 = m_i_555 ? (
                                        c_appl_i_556 = var_j_257 var_j_258
                                    ) : (
                                        ab_i_557 = abort
                                    );
                                m_bl_i_558 = appl_j_256 ~ int;
                                m_br_i_559 = appl_j_259 ~ int;
                                m_b_i_560 = m_bl_i_558 and m_br_i_559;
                                binop_j_260 = m_b_i_560 ? (
                                        c_binop_i_561 = appl_j_256 * appl_j_259
                                    ) : (
                                        ab_i_562 = abort
                                    );
                                m_i_563 = proj_j_253 ~ fun;
                                appl_j_261 = m_i_563 ? (
                                        c_appl_i_564 = proj_j_253 binop_j_260
                                    ) : (
                                        ab_i_565 = abort
                                    )
                            ) : (
                                var_j_262 = arg_check_b_1;
                                assert_pred_j_263 = var_j_262;
                                assert_res_j_264 = assert_pred_j_263 ? (
                                        assert_res_true_j_265 = {}
                                    ) : (
                                        ab_j_266 = abort
                                    )
                            ));
                    var_j_269 = x;
                    appl_j_270 = flatten_fun_j_268 var_j_269
                ) : (
                    var_j_271 = arg_check_b_3;
                    assert_pred_j_272 = var_j_271;
                    assert_res_j_273 = assert_pred_j_272 ? (
                            assert_res_true_j_274 = {}
                        ) : (
                            ab_j_275 = abort
                        )
                ));
        var_j_278 = f;
        appl_j_279 = flatten_fun_j_277 var_j_278));
g = g_j_281;
flatten_fun_j_321 = fun expr_b_18 -> (
    bool_j_282 = false;
    fail_b_13 = bool_j_282;
    flatten_fun_j_291 = fun expr_b_12 -> (
        var_j_283 = expr_b_12;
        m_match_bool_j_285 = var_j_283 ~ any;
        m_match_bool_j_288 = var_j_283 ~ int;
        m_match_cond_j_289 = m_match_bool_j_288 ? (
                bool_j_290 = true
            ) : (
                m_match_cond_j_286 = m_match_bool_j_285 ? (
                        var_j_287 = fail_b_13
                    ) : (
                        void_j_284 = {}
                    )
            ));
    flatten_fun_j_293 = fun bj_null -> (
        input_j_292 = input);
    flatten_fun_j_295 = fun expr_b_14 -> (
        var_j_294 = expr_b_14);
    record_j_296 = {checker = flatten_fun_j_291, generator = flatten_fun_j_293, wrapper = flatten_fun_j_295};
    proj_j_297 = record_j_296.generator;
    int_j_298 = 0;
    appl_j_299 = proj_j_297 int_j_298;
    arg_assert_b_19 = appl_j_299;
    var_j_300 = expr_b_18;
    var_j_301 = arg_assert_b_19;
    appl_j_302 = var_j_300 var_j_301;
    fun_ret_b_20 = appl_j_302;
    bool_j_303 = false;
    fail_b_16 = bool_j_303;
    flatten_fun_j_312 = fun expr_b_15 -> (
        var_j_304 = expr_b_15;
        m_match_bool_j_306 = var_j_304 ~ any;
        m_match_bool_j_309 = var_j_304 ~ int;
        m_match_cond_j_310 = m_match_bool_j_309 ? (
                bool_j_311 = true
            ) : (
                m_match_cond_j_307 = m_match_bool_j_306 ? (
                        var_j_308 = fail_b_16
                    ) : (
                        void_j_305 = {}
                    )
            ));
    flatten_fun_j_314 = fun bj_null_j_0 -> (
        input_j_313 = input);
    flatten_fun_j_316 = fun expr_b_17 -> (
        var_j_315 = expr_b_17);
    record_j_317 = {checker = flatten_fun_j_312, generator = flatten_fun_j_314, wrapper = flatten_fun_j_316};
    proj_j_318 = record_j_317.checker;
    var_j_319 = fun_ret_b_20;
    appl_j_320 = proj_j_318 var_j_319);
flatten_fun_j_366 = fun bj_null_j_3 -> (
    flatten_fun_j_365 = fun arg_assume_b_10 -> (
        bool_j_322 = false;
        fail_b_5 = bool_j_322;
        flatten_fun_j_331 = fun expr_b_4 -> (
            var_j_323 = expr_b_4;
            m_match_bool_j_325 = var_j_323 ~ any;
            m_match_bool_j_328 = var_j_323 ~ int;
            m_match_cond_j_329 = m_match_bool_j_328 ? (
                    bool_j_330 = true
                ) : (
                    m_match_cond_j_326 = m_match_bool_j_325 ? (
                            var_j_327 = fail_b_5
                        ) : (
                            void_j_324 = {}
                        )
                ));
        flatten_fun_j_333 = fun bj_null_j_1 -> (
            input_j_332 = input);
        flatten_fun_j_335 = fun expr_b_6 -> (
            var_j_334 = expr_b_6);
        record_j_336 = {checker = flatten_fun_j_331, generator = flatten_fun_j_333, wrapper = flatten_fun_j_335};
        proj_j_337 = record_j_336.checker;
        var_j_338 = arg_assume_b_10;
        appl_j_339 = proj_j_337 var_j_338;
        if_j_364 = appl_j_339 ? (
                bool_j_340 = false;
                fail_b_8 = bool_j_340;
                flatten_fun_j_349 = fun expr_b_7 -> (
                    var_j_341 = expr_b_7;
                    m_match_bool_j_343 = var_j_341 ~ any;
                    m_match_bool_j_346 = var_j_341 ~ int;
                    m_match_cond_j_347 = m_match_bool_j_346 ? (
                            bool_j_348 = true
                        ) : (
                            m_match_cond_j_344 = m_match_bool_j_343 ? (
                                    var_j_345 = fail_b_8
                                ) : (
                                    void_j_342 = {}
                                )
                        ));
                flatten_fun_j_351 = fun bj_null_j_2 -> (
                    input_j_350 = input);
                flatten_fun_j_353 = fun expr_b_9 -> (
                    var_j_352 = expr_b_9);
                record_j_354 = {checker = flatten_fun_j_349, generator = flatten_fun_j_351, wrapper = flatten_fun_j_353};
                proj_j_355 = record_j_354.generator;
                int_j_356 = 0;
                appl_j_357 = proj_j_355 int_j_356
            ) : (
                bool_j_358 = false;
                fail_b_11 = bool_j_358;
                var_j_359 = fail_b_11;
                assert_pred_j_360 = var_j_359;
                assert_res_j_361 = assert_pred_j_360 ? (
                        assert_res_true_j_362 = {}
                    ) : (
                        ab_j_363 = abort
                    )
            )));
flatten_fun_j_412 = fun expr_b_27 -> (
    flatten_fun_j_411 = fun arg_b_28 -> (
        bool_j_367 = false;
        fail_b_22 = bool_j_367;
        flatten_fun_j_376 = fun expr_b_21 -> (
            var_j_368 = expr_b_21;
            m_match_bool_j_370 = var_j_368 ~ any;
            m_match_bool_j_373 = var_j_368 ~ int;
            m_match_cond_j_374 = m_match_bool_j_373 ? (
                    bool_j_375 = true
                ) : (
                    m_match_cond_j_371 = m_match_bool_j_370 ? (
                            var_j_372 = fail_b_22
                        ) : (
                            void_j_369 = {}
                        )
                ));
        flatten_fun_j_378 = fun bj_null_j_4 -> (
            input_j_377 = input);
        flatten_fun_j_380 = fun expr_b_23 -> (
            var_j_379 = expr_b_23);
        record_j_381 = {checker = flatten_fun_j_376, generator = flatten_fun_j_378, wrapper = flatten_fun_j_380};
        proj_j_382 = record_j_381.checker;
        var_j_383 = arg_b_28;
        m_i_566 = proj_j_382 ~ fun;
        appl_j_384 = m_i_566 ? (
                c_appl_i_567 = proj_j_382 var_j_383
            ) : (
                ab_i_568 = abort
            );
        m_i_569 = appl_j_384 ~ bool;
        if_j_410 = m_i_569 ? (
                c_cond_i_576 = appl_j_384 ? (
                        bool_j_385 = false;
                        fail_b_25 = bool_j_385;
                        flatten_fun_j_394 = fun expr_b_24 -> (
                            var_j_386 = expr_b_24;
                            m_match_bool_j_388 = var_j_386 ~ any;
                            m_match_bool_j_391 = var_j_386 ~ int;
                            m_match_cond_j_392 = m_match_bool_j_391 ? (
                                    bool_j_393 = true
                                ) : (
                                    m_match_cond_j_389 = m_match_bool_j_388 ? (
                                            var_j_390 = fail_b_25
                                        ) : (
                                            void_j_387 = {}
                                        )
                                ));
                        flatten_fun_j_396 = fun bj_null_j_5 -> (
                            input_j_395 = input);
                        flatten_fun_j_398 = fun expr_b_26 -> (
                            var_j_397 = expr_b_26);
                        record_j_399 = {checker = flatten_fun_j_394, generator = flatten_fun_j_396, wrapper = flatten_fun_j_398};
                        proj_j_400 = record_j_399.wrapper;
                        var_j_401 = expr_b_27;
                        var_j_402 = arg_b_28;
                        m_i_570 = var_j_401 ~ fun;
                        appl_j_403 = m_i_570 ? (
                                c_appl_i_571 = var_j_401 var_j_402
                            ) : (
                                ab_i_572 = abort
                            );
                        m_i_573 = proj_j_400 ~ fun;
                        appl_j_404 = m_i_573 ? (
                                c_appl_i_574 = proj_j_400 appl_j_403
                            ) : (
                                ab_i_575 = abort
                            )
                    ) : (
                        bool_j_405 = false;
                        assert_pred_j_406 = bool_j_405;
                        assert_res_j_407 = assert_pred_j_406 ? (
                                assert_res_true_j_408 = {}
                            ) : (
                                ab_j_409 = abort
                            )
                    )
            ) : (
                ab_i_577 = abort
            )));
record_j_413 = {checker = flatten_fun_j_321, generator = flatten_fun_j_366, wrapper = flatten_fun_j_412};
proj_j_414 = record_j_413.generator;
int_j_415 = 0;
appl_j_416 = proj_j_414 int_j_415;
f_b_83 = appl_j_416;
bool_j_417 = false;
fail_b_30 = bool_j_417;
flatten_fun_j_426 = fun expr_b_29 -> (
    var_j_418 = expr_b_29;
    m_match_bool_j_420 = var_j_418 ~ any;
    m_match_bool_j_423 = var_j_418 ~ int;
    m_match_cond_j_424 = m_match_bool_j_423 ? (
            bool_j_425 = true
        ) : (
            m_match_cond_j_421 = m_match_bool_j_420 ? (
                    var_j_422 = fail_b_30
                ) : (
                    void_j_419 = {}
                )
        ));
flatten_fun_j_428 = fun bj_null_j_6 -> (
    input_j_427 = input);
flatten_fun_j_430 = fun expr_b_31 -> (
    var_j_429 = expr_b_31);
record_j_431 = {checker = flatten_fun_j_426, generator = flatten_fun_j_428, wrapper = flatten_fun_j_430};
proj_j_432 = record_j_431.generator;
int_j_433 = 0;
appl_j_434 = proj_j_432 int_j_433;
x_b_82 = appl_j_434;
flatten_fun_j_466 = fun expr_b_78 -> (
    bool_j_435 = false;
    fail_b_76 = bool_j_435;
    flatten_fun_j_444 = fun expr_b_75 -> (
        var_j_436 = expr_b_75;
        m_match_bool_j_438 = var_j_436 ~ any;
        m_match_bool_j_441 = var_j_436 ~ int;
        m_match_cond_j_442 = m_match_bool_j_441 ? (
                bool_j_443 = true
            ) : (
                m_match_cond_j_439 = m_match_bool_j_438 ? (
                        var_j_440 = fail_b_76
                    ) : (
                        void_j_437 = {}
                    )
            ));
    flatten_fun_j_446 = fun bj_null_j_7 -> (
        input_j_445 = input);
    flatten_fun_j_448 = fun expr_b_77 -> (
        var_j_447 = expr_b_77);
    record_j_449 = {checker = flatten_fun_j_444, generator = flatten_fun_j_446, wrapper = flatten_fun_j_448};
    proj_j_450 = record_j_449.checker;
    var_j_451 = expr_b_78;
    appl_j_452 = proj_j_450 var_j_451;
    t_check_b_79 = appl_j_452;
    var_j_453 = t_check_b_79;
    if_j_465 = var_j_453 ? (
            bool_j_454 = false;
            pred_check_b_80 = bool_j_454;
            flatten_fun_j_458 = fun n -> (
                int_j_455 = 0;
                var_j_456 = n;
                m_bl_i_578 = int_j_455 ~ int;
                m_br_i_579 = var_j_456 ~ int;
                m_b_i_580 = m_bl_i_578 and m_br_i_579;
                binop_j_457 = m_b_i_580 ? (
                        c_binop_i_581 = int_j_455 < var_j_456
                    ) : (
                        ab_i_582 = abort
                    ));
            var_j_459 = expr_b_78;
            appl_j_460 = flatten_fun_j_458 var_j_459;
            if_j_463 = appl_j_460 ? (
                    bool_j_461 = true
                ) : (
                    var_j_462 = pred_check_b_80
                )
        ) : (
            var_j_464 = t_check_b_79
        ));
flatten_fun_j_495 = fun bj_null_j_10 -> (
    bool_j_467 = false;
    fail_b_72 = bool_j_467;
    flatten_fun_j_476 = fun expr_b_71 -> (
        var_j_468 = expr_b_71;
        m_match_bool_j_470 = var_j_468 ~ any;
        m_match_bool_j_473 = var_j_468 ~ int;
        m_match_cond_j_474 = m_match_bool_j_473 ? (
                bool_j_475 = true
            ) : (
                m_match_cond_j_471 = m_match_bool_j_470 ? (
                        var_j_472 = fail_b_72
                    ) : (
                        void_j_469 = {}
                    )
            ));
    flatten_fun_j_478 = fun bj_null_j_8 -> (
        input_j_477 = input);
    flatten_fun_j_480 = fun expr_b_73 -> (
        var_j_479 = expr_b_73);
    record_j_481 = {checker = flatten_fun_j_476, generator = flatten_fun_j_478, wrapper = flatten_fun_j_480};
    proj_j_482 = record_j_481.generator;
    int_j_483 = 0;
    appl_j_484 = proj_j_482 int_j_483;
    candidate_b_74 = appl_j_484;
    flatten_fun_j_488 = fun n_j_9 -> (
        int_j_485 = 0;
        var_j_486 = n_j_9;
        m_bl_i_583 = int_j_485 ~ int;
        m_br_i_584 = var_j_486 ~ int;
        m_b_i_585 = m_bl_i_583 and m_br_i_584;
        binop_j_487 = m_b_i_585 ? (
                c_binop_i_586 = int_j_485 < var_j_486
            ) : (
                ab_i_587 = abort
            ));
    var_j_489 = candidate_b_74;
    appl_j_490 = flatten_fun_j_488 var_j_489;
    if_j_494 = appl_j_490 ? (
            var_j_491 = candidate_b_74
        ) : (
            bool_j_492 = false;
            assume_j_493 = assume bool_j_492
        ));
flatten_fun_j_497 = fun expr_b_81 -> (
    var_j_496 = expr_b_81);
record_j_498 = {checker = flatten_fun_j_466, generator = flatten_fun_j_495, wrapper = flatten_fun_j_497};
proj_j_499 = record_j_498.checker;
appl_j_502 = g f_b_83;
appl_j_504 = appl_j_502 x_b_82;
appl_j_505 = proj_j_499 appl_j_504;
check_res_b_84 = appl_j_505;
if_j_513 = check_res_b_84 ? (
        var_j_507 = g
    ) : (
        error_var_j_508 = check_res_b_84;
        assert_pred_j_509 = error_var_j_508;
        assert_res_j_510 = assert_pred_j_509 ? (
                assert_res_true_j_511 = {}
            ) : (
                ab_j_512 = abort
            )
    );
i_result = if_j_513