_i_first = {};
id_j_4 = fun x -> (
    int_j_1 = 1;
    int_j_2 = 1;
    binop_j_3 = int_j_1 + int_j_2);
id = id_j_4;
bool_j_5 = false;
fail_b_1 = bool_j_5;
flatten_fun_j_14 = fun expr_b_0 -> (
    var_j_6 = expr_b_0;
    m_match_bool_j_8 = var_j_6 ~ any;
    m_match_bool_j_11 = var_j_6 ~ bool;
    m_match_cond_j_12 = m_match_bool_j_11 ? (
            bool_j_13 = true
        ) : (
            m_match_cond_j_9 = m_match_bool_j_8 ? (
                    var_j_10 = fail_b_1
                ) : (
                    void_j_7 = {}
                )
        ));
flatten_fun_j_18 = fun ~null -> (
    int_j_15 = 0;
    input_j_16 = input;
    binop_j_17 = int_j_15 <= input_j_16);
record_j_19 = {checker = flatten_fun_j_14, generator = flatten_fun_j_18};
proj_j_20 = record_j_19.generator;
int_j_21 = 0;
appl_j_22 = proj_j_20 int_j_21;
x_b_6 = appl_j_22;
bool_j_23 = false;
fail_b_4 = bool_j_23;
flatten_fun_j_32 = fun expr_b_3 -> (
    var_j_24 = expr_b_3;
    m_match_bool_j_26 = var_j_24 ~ any;
    m_match_bool_j_29 = var_j_24 ~ bool;
    m_match_cond_j_30 = m_match_bool_j_29 ? (
            bool_j_31 = true
        ) : (
            m_match_cond_j_27 = m_match_bool_j_26 ? (
                    var_j_28 = fail_b_4
                ) : (
                    void_j_25 = {}
                )
        ));
flatten_fun_j_36 = fun ~null_j_0 -> (
    int_j_33 = 0;
    input_j_34 = input;
    binop_j_35 = int_j_33 <= input_j_34);
record_j_37 = {checker = flatten_fun_j_32, generator = flatten_fun_j_36};
proj_j_38 = record_j_37.checker;
appl_j_41 = id x_b_6;
appl_j_42 = proj_j_38 appl_j_41;
check_res_b_7 = appl_j_42;
if_j_50 = check_res_b_7 ? (
        var_j_44 = id
    ) : (
        error_var_j_45 = check_res_b_7;
        assert_pred_j_46 = error_var_j_45;
        assert_res_j_47 = assert_pred_j_46 ? (
                assert_res_true_j_48 = {}
            ) : (
                ab_j_49 = abort
            )
    );
_i_result = if_j_50