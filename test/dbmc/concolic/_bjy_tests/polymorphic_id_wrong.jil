i_first = {};
id_j_19 = fun x -> (
    bool_j_1 = false;
    fail_b_4 = bool_j_1;
    var_j_2 = x;
    m_match_bool_j_4 = var_j_2 ~ any;
    m_match_bool_j_7 = var_j_2 ~ int;
    m_match_bool_j_12 = var_j_2 ~ {bj_untouched, _};
    m_match_cond_j_13 = m_match_bool_j_12 ? (
            var_j_14 = fail_b_4;
            assert_pred_j_15 = var_j_14;
            assert_res_j_16 = assert_pred_j_15 ? (
                    assert_res_true_j_17 = {}
                ) : (
                    ab_j_18 = abort
                )
        ) : (
            m_match_cond_j_8 = m_match_bool_j_7 ? (
                    var_j_9 = x;
                    int_j_10 = 1;
                    m_bl_i_80 = var_j_9 ~ int;
                    m_br_i_81 = int_j_10 ~ int;
                    m_b_i_82 = m_bl_i_80 and m_br_i_81;
                    binop_j_11 = m_b_i_82 ? (
                            c_binop_i_83 = var_j_9 + int_j_10
                        ) : (
                            ab_i_84 = abort
                        )
                ) : (
                    m_match_cond_j_5 = m_match_bool_j_4 ? (
                            any = var_j_2;
                            var_j_6 = x
                        ) : (
                            ab_j_3 = abort
                        )
                )
        ));
id = id_j_19;
bool_j_20 = false;
fail_b_0 = bool_j_20;
flatten_fun_j_36 = fun expr_b_1 -> (
    var_j_21 = expr_b_1;
    m_match_bool_j_23 = var_j_21 ~ any;
    m_match_bool_j_26 = var_j_21 ~ {bj_untouched, _};
    m_match_cond_j_27 = m_match_bool_j_26 ? (
            bj_poly_var_b_2 = var_j_21.bj_untouched;
            var_j_28 = bj_poly_var_b_2;
            m_match_bool_j_30 = var_j_28 ~ any;
            m_match_bool_j_33 = var_j_28 ~ {bj_ticka, _};
            m_match_cond_j_34 = m_match_bool_j_33 ? (
                    bool_j_35 = true
                ) : (
                    m_match_cond_j_31 = m_match_bool_j_30 ? (
                            var_j_32 = fail_b_0
                        ) : (
                            void_j_29 = {}
                        )
                )
        ) : (
            m_match_cond_j_24 = m_match_bool_j_23 ? (
                    var_j_25 = fail_b_0
                ) : (
                    void_j_22 = {}
                )
        ));
flatten_fun_j_40 = fun bj_null -> (
    record_j_37 = {};
    record_j_38 = {bj_ticka = record_j_37};
    record_j_39 = {bj_untouched = record_j_38});
record_j_41 = {checker = flatten_fun_j_36, generator = flatten_fun_j_40};
proj_j_42 = record_j_41.generator;
int_j_43 = 0;
appl_j_44 = proj_j_42 int_j_43;
x_b_9 = appl_j_44;
bool_j_45 = false;
fail_b_5 = bool_j_45;
flatten_fun_j_61 = fun expr_b_6 -> (
    var_j_46 = expr_b_6;
    m_match_bool_j_48 = var_j_46 ~ any;
    m_match_bool_j_51 = var_j_46 ~ {bj_untouched, _};
    m_match_cond_j_52 = m_match_bool_j_51 ? (
            bj_poly_var_b_7 = var_j_46.bj_untouched;
            var_j_53 = bj_poly_var_b_7;
            m_match_bool_j_55 = var_j_53 ~ any;
            m_match_bool_j_58 = var_j_53 ~ {bj_ticka, _};
            m_match_cond_j_59 = m_match_bool_j_58 ? (
                    bool_j_60 = true
                ) : (
                    m_match_cond_j_56 = m_match_bool_j_55 ? (
                            var_j_57 = fail_b_5
                        ) : (
                            void_j_54 = {}
                        )
                )
        ) : (
            m_match_cond_j_49 = m_match_bool_j_48 ? (
                    var_j_50 = fail_b_5
                ) : (
                    void_j_47 = {}
                )
        ));
flatten_fun_j_65 = fun bj_null_j_0 -> (
    record_j_62 = {};
    record_j_63 = {bj_ticka = record_j_62};
    record_j_64 = {bj_untouched = record_j_63});
record_j_66 = {checker = flatten_fun_j_61, generator = flatten_fun_j_65};
proj_j_67 = record_j_66.checker;
appl_j_70 = id x_b_9;
appl_j_71 = proj_j_67 appl_j_70;
check_res_b_10 = appl_j_71;
if_j_79 = check_res_b_10 ? (
        var_j_73 = id
    ) : (
        error_var_j_74 = check_res_b_10;
        assert_pred_j_75 = error_var_j_74;
        assert_res_j_76 = assert_pred_j_75 ? (
                assert_res_true_j_77 = {}
            ) : (
                ab_j_78 = abort
            )
    );
i_result = if_j_79