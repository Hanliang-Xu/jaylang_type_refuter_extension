i_first = {};
flatten_fun_j_15 = fun x -> (
    var_j_12 = x;
    var_j_13 = x;
    m_i_236 = var_j_12 ~ fun;
    appl_j_14 = m_i_236 ? (
            c_appl_i_237 = var_j_12 var_j_13
        ) : (
            ab_i_238 = abort
        ));
o_half_b_91 = flatten_fun_j_15;
o_half = o_half_b_91;
flatten_fun_j_117 = fun expr_b_58 -> (
    flatten_fun_j_52 = fun expr_b_44 -> (
        bool_j_17 = false;
        fail_b_39 = bool_j_17;
        flatten_fun_j_26 = fun expr_b_38 -> (
            var_j_18 = expr_b_38;
            m_match_bool_j_20 = var_j_18 ~ any;
            m_match_bool_j_23 = var_j_18 ~ int;
            m_match_cond_j_24 = m_match_bool_j_23 ? (
                    bool_j_25 = true
                ) : (
                    m_match_cond_j_21 = m_match_bool_j_20 ? (
                            var_j_22 = fail_b_39
                        ) : (
                            void_j_19 = {}
                        )
                ));
        flatten_fun_j_28 = fun bj_null -> (
            input_j_27 = input);
        record_j_29 = {checker = flatten_fun_j_26, generator = flatten_fun_j_28};
        proj_j_30 = record_j_29.generator;
        int_j_31 = 0;
        appl_j_32 = proj_j_30 int_j_31;
        arg_assert_b_45 = appl_j_32;
        var_j_33 = expr_b_44;
        var_j_34 = arg_assert_b_45;
        appl_j_35 = var_j_33 var_j_34;
        fun_ret_b_46 = appl_j_35;
        bool_j_36 = false;
        fail_b_42 = bool_j_36;
        flatten_fun_j_45 = fun expr_b_41 -> (
            var_j_37 = expr_b_41;
            m_match_bool_j_39 = var_j_37 ~ any;
            m_match_bool_j_42 = var_j_37 ~ int;
            m_match_cond_j_43 = m_match_bool_j_42 ? (
                    bool_j_44 = true
                ) : (
                    m_match_cond_j_40 = m_match_bool_j_39 ? (
                            var_j_41 = fail_b_42
                        ) : (
                            void_j_38 = {}
                        )
                ));
        flatten_fun_j_47 = fun bj_null_j_0 -> (
            input_j_46 = input);
        record_j_48 = {checker = flatten_fun_j_45, generator = flatten_fun_j_47};
        proj_j_49 = record_j_48.checker;
        var_j_50 = fun_ret_b_46;
        appl_j_51 = proj_j_49 var_j_50);
    flatten_fun_j_93 = fun bj_null_j_3 -> (
        flatten_fun_j_92 = fun arg_assume_b_36 -> (
            bool_j_53 = false;
            fail_b_31 = bool_j_53;
            flatten_fun_j_62 = fun expr_b_30 -> (
                var_j_54 = expr_b_30;
                m_match_bool_j_56 = var_j_54 ~ any;
                m_match_bool_j_59 = var_j_54 ~ int;
                m_match_cond_j_60 = m_match_bool_j_59 ? (
                        bool_j_61 = true
                    ) : (
                        m_match_cond_j_57 = m_match_bool_j_56 ? (
                                var_j_58 = fail_b_31
                            ) : (
                                void_j_55 = {}
                            )
                    ));
            flatten_fun_j_64 = fun bj_null_j_1 -> (
                input_j_63 = input);
            record_j_65 = {checker = flatten_fun_j_62, generator = flatten_fun_j_64};
            proj_j_66 = record_j_65.checker;
            var_j_67 = arg_assume_b_36;
            appl_j_68 = proj_j_66 var_j_67;
            if_j_91 = appl_j_68 ? (
                    bool_j_69 = false;
                    fail_b_34 = bool_j_69;
                    flatten_fun_j_78 = fun expr_b_33 -> (
                        var_j_70 = expr_b_33;
                        m_match_bool_j_72 = var_j_70 ~ any;
                        m_match_bool_j_75 = var_j_70 ~ int;
                        m_match_cond_j_76 = m_match_bool_j_75 ? (
                                bool_j_77 = true
                            ) : (
                                m_match_cond_j_73 = m_match_bool_j_72 ? (
                                        var_j_74 = fail_b_34
                                    ) : (
                                        void_j_71 = {}
                                    )
                            ));
                    flatten_fun_j_80 = fun bj_null_j_2 -> (
                        input_j_79 = input);
                    record_j_81 = {checker = flatten_fun_j_78, generator = flatten_fun_j_80};
                    proj_j_82 = record_j_81.generator;
                    int_j_83 = 0;
                    appl_j_84 = proj_j_82 int_j_83
                ) : (
                    bool_j_85 = false;
                    fail_b_37 = bool_j_85;
                    var_j_86 = fail_b_37;
                    assert_pred_j_87 = var_j_86;
                    assert_res_j_88 = assert_pred_j_87 ? (
                            assert_res_true_j_89 = {}
                        ) : (
                            ab_j_90 = abort
                        )
                )));
    record_j_94 = {checker = flatten_fun_j_52, generator = flatten_fun_j_93};
    proj_j_95 = record_j_94.generator;
    int_j_96 = 0;
    appl_j_97 = proj_j_95 int_j_96;
    arg_assert_b_59 = appl_j_97;
    var_j_98 = expr_b_58;
    var_j_99 = arg_assert_b_59;
    appl_j_100 = var_j_98 var_j_99;
    fun_ret_b_60 = appl_j_100;
    bool_j_101 = false;
    fail_b_56 = bool_j_101;
    flatten_fun_j_110 = fun expr_b_55 -> (
        var_j_102 = expr_b_55;
        m_match_bool_j_104 = var_j_102 ~ any;
        m_match_bool_j_107 = var_j_102 ~ int;
        m_match_cond_j_108 = m_match_bool_j_107 ? (
                bool_j_109 = true
            ) : (
                m_match_cond_j_105 = m_match_bool_j_104 ? (
                        var_j_106 = fail_b_56
                    ) : (
                        void_j_103 = {}
                    )
            ));
    flatten_fun_j_112 = fun bj_null_j_4 -> (
        input_j_111 = input);
    record_j_113 = {checker = flatten_fun_j_110, generator = flatten_fun_j_112};
    proj_j_114 = record_j_113.checker;
    var_j_115 = fun_ret_b_60;
    appl_j_116 = proj_j_114 var_j_115);
flatten_fun_j_223 = fun bj_null_j_11 -> (
    flatten_fun_j_222 = fun arg_assume_b_28 -> (
        flatten_fun_j_153 = fun expr_b_14 -> (
            bool_j_118 = false;
            fail_b_9 = bool_j_118;
            flatten_fun_j_127 = fun expr_b_8 -> (
                var_j_119 = expr_b_8;
                m_match_bool_j_121 = var_j_119 ~ any;
                m_match_bool_j_124 = var_j_119 ~ int;
                m_match_cond_j_125 = m_match_bool_j_124 ? (
                        bool_j_126 = true
                    ) : (
                        m_match_cond_j_122 = m_match_bool_j_121 ? (
                                var_j_123 = fail_b_9
                            ) : (
                                void_j_120 = {}
                            )
                    ));
            flatten_fun_j_129 = fun bj_null_j_5 -> (
                input_j_128 = input);
            record_j_130 = {checker = flatten_fun_j_127, generator = flatten_fun_j_129};
            proj_j_131 = record_j_130.generator;
            int_j_132 = 0;
            appl_j_133 = proj_j_131 int_j_132;
            arg_assert_b_15 = appl_j_133;
            var_j_134 = expr_b_14;
            var_j_135 = arg_assert_b_15;
            appl_j_136 = var_j_134 var_j_135;
            fun_ret_b_16 = appl_j_136;
            bool_j_137 = false;
            fail_b_12 = bool_j_137;
            flatten_fun_j_146 = fun expr_b_11 -> (
                var_j_138 = expr_b_11;
                m_match_bool_j_140 = var_j_138 ~ any;
                m_match_bool_j_143 = var_j_138 ~ int;
                m_match_cond_j_144 = m_match_bool_j_143 ? (
                        bool_j_145 = true
                    ) : (
                        m_match_cond_j_141 = m_match_bool_j_140 ? (
                                var_j_142 = fail_b_12
                            ) : (
                                void_j_139 = {}
                            )
                    ));
            flatten_fun_j_148 = fun bj_null_j_6 -> (
                input_j_147 = input);
            record_j_149 = {checker = flatten_fun_j_146, generator = flatten_fun_j_148};
            proj_j_150 = record_j_149.checker;
            var_j_151 = fun_ret_b_16;
            appl_j_152 = proj_j_150 var_j_151);
        flatten_fun_j_194 = fun bj_null_j_9 -> (
            flatten_fun_j_193 = fun arg_assume_b_6 -> (
                bool_j_154 = false;
                fail_b_1 = bool_j_154;
                flatten_fun_j_163 = fun expr_b_0 -> (
                    var_j_155 = expr_b_0;
                    m_match_bool_j_157 = var_j_155 ~ any;
                    m_match_bool_j_160 = var_j_155 ~ int;
                    m_match_cond_j_161 = m_match_bool_j_160 ? (
                            bool_j_162 = true
                        ) : (
                            m_match_cond_j_158 = m_match_bool_j_157 ? (
                                    var_j_159 = fail_b_1
                                ) : (
                                    void_j_156 = {}
                                )
                        ));
                flatten_fun_j_165 = fun bj_null_j_7 -> (
                    input_j_164 = input);
                record_j_166 = {checker = flatten_fun_j_163, generator = flatten_fun_j_165};
                proj_j_167 = record_j_166.checker;
                var_j_168 = arg_assume_b_6;
                appl_j_169 = proj_j_167 var_j_168;
                if_j_192 = appl_j_169 ? (
                        bool_j_170 = false;
                        fail_b_4 = bool_j_170;
                        flatten_fun_j_179 = fun expr_b_3 -> (
                            var_j_171 = expr_b_3;
                            m_match_bool_j_173 = var_j_171 ~ any;
                            m_match_bool_j_176 = var_j_171 ~ int;
                            m_match_cond_j_177 = m_match_bool_j_176 ? (
                                    bool_j_178 = true
                                ) : (
                                    m_match_cond_j_174 = m_match_bool_j_173 ? (
                                            var_j_175 = fail_b_4
                                        ) : (
                                            void_j_172 = {}
                                        )
                                ));
                        flatten_fun_j_181 = fun bj_null_j_8 -> (
                            input_j_180 = input);
                        record_j_182 = {checker = flatten_fun_j_179, generator = flatten_fun_j_181};
                        proj_j_183 = record_j_182.generator;
                        int_j_184 = 0;
                        appl_j_185 = proj_j_183 int_j_184
                    ) : (
                        bool_j_186 = false;
                        fail_b_7 = bool_j_186;
                        var_j_187 = fail_b_7;
                        assert_pred_j_188 = var_j_187;
                        assert_res_j_189 = assert_pred_j_188 ? (
                                assert_res_true_j_190 = {}
                            ) : (
                                ab_j_191 = abort
                            )
                    )));
        record_j_195 = {checker = flatten_fun_j_153, generator = flatten_fun_j_194};
        proj_j_196 = record_j_195.checker;
        var_j_197 = arg_assume_b_28;
        appl_j_198 = proj_j_196 var_j_197;
        if_j_221 = appl_j_198 ? (
                bool_j_199 = false;
                fail_b_26 = bool_j_199;
                flatten_fun_j_208 = fun expr_b_25 -> (
                    var_j_200 = expr_b_25;
                    m_match_bool_j_202 = var_j_200 ~ any;
                    m_match_bool_j_205 = var_j_200 ~ int;
                    m_match_cond_j_206 = m_match_bool_j_205 ? (
                            bool_j_207 = true
                        ) : (
                            m_match_cond_j_203 = m_match_bool_j_202 ? (
                                    var_j_204 = fail_b_26
                                ) : (
                                    void_j_201 = {}
                                )
                        ));
                flatten_fun_j_210 = fun bj_null_j_10 -> (
                    input_j_209 = input);
                record_j_211 = {checker = flatten_fun_j_208, generator = flatten_fun_j_210};
                proj_j_212 = record_j_211.generator;
                int_j_213 = 0;
                appl_j_214 = proj_j_212 int_j_213
            ) : (
                bool_j_215 = false;
                fail_b_29 = bool_j_215;
                var_j_216 = fail_b_29;
                assert_pred_j_217 = var_j_216;
                assert_res_j_218 = assert_pred_j_217 ? (
                        assert_res_true_j_219 = {}
                    ) : (
                        ab_j_220 = abort
                    )
            )));
record_j_224 = {checker = flatten_fun_j_117, generator = flatten_fun_j_223};
proj_j_225 = record_j_224.checker;
appl_j_227 = proj_j_225 o_half_b_91;
check_res_b_92 = appl_j_227;
if_j_235 = check_res_b_92 ? (
        var_j_229 = o_half
    ) : (
        error_var_j_230 = check_res_b_92;
        assert_pred_j_231 = error_var_j_230;
        assert_res_j_232 = assert_pred_j_231 ? (
                assert_res_true_j_233 = {}
            ) : (
                ab_j_234 = abort
            )
    );
i_result = if_j_235