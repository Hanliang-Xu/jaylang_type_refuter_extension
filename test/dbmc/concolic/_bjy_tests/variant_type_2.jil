i_first = {};
f_j_18 = fun n -> (
    bool_j_3 = false;
    fail_b_11 = bool_j_3;
    var_j_4 = n;
    m_match_bool_j_6 = var_j_4 ~ {j_value, j_variant_A, _};
    m_match_bool_j_11 = var_j_4 ~ {bj_untouched, _};
    m_match_cond_j_12 = m_match_bool_j_11 ? (
            var_j_13 = fail_b_11;
            assert_pred_j_14 = var_j_13;
            assert_res_j_15 = assert_pred_j_14 ? (
                    assert_res_true_j_16 = {}
                ) : (
                    ab_j_17 = abort
                )
        ) : (
            m_match_cond_j_7 = m_match_bool_j_6 ? (
                    x = var_j_4.j_value;
                    int_j_8 = 0;
                    var_j_9 = x;
                    m_bl_i_94 = int_j_8 ~ int;
                    m_br_i_95 = var_j_9 ~ int;
                    m_b_i_96 = m_bl_i_94 and m_br_i_95;
                    binop_j_10 = m_b_i_96 ? (
                            c_binop_i_97 = int_j_8 <= var_j_9
                        ) : (
                            ab_i_98 = abort
                        )
                ) : (
                    ab_j_5 = abort
                )
        ));
f = f_j_18;
flatten_fun_j_43 = fun expr_b_5 -> (
    bool_j_19 = false;
    variant_fail_b_4 = bool_j_19;
    var_j_20 = expr_b_5;
    m_match_bool_j_22 = var_j_20 ~ any;
    m_match_bool_j_25 = var_j_20 ~ {j_value, j_variant_A, _};
    m_match_cond_j_26 = m_match_bool_j_25 ? (
            v_expr_b_6 = var_j_20.j_value;
            bool_j_27 = false;
            fail_b_8 = bool_j_27;
            flatten_fun_j_36 = fun expr_b_7 -> (
                var_j_28 = expr_b_7;
                m_match_bool_j_30 = var_j_28 ~ any;
                m_match_bool_j_33 = var_j_28 ~ int;
                m_match_cond_j_34 = m_match_bool_j_33 ? (
                        bool_j_35 = true
                    ) : (
                        m_match_cond_j_31 = m_match_bool_j_30 ? (
                                var_j_32 = fail_b_8
                            ) : (
                                void_j_29 = {}
                            )
                    ));
            flatten_fun_j_38 = fun bj_null -> (
                input_j_37 = input);
            record_j_39 = {checker = flatten_fun_j_36, generator = flatten_fun_j_38};
            proj_j_40 = record_j_39.checker;
            var_j_41 = v_expr_b_6;
            appl_j_42 = proj_j_40 var_j_41
        ) : (
            m_match_cond_j_23 = m_match_bool_j_22 ? (
                    var_j_24 = variant_fail_b_4
                ) : (
                    void_j_21 = {}
                )
        ));
bool_j_44 = false;
fail_b_1 = bool_j_44;
flatten_fun_j_53 = fun expr_b_0 -> (
    var_j_45 = expr_b_0;
    m_match_bool_j_47 = var_j_45 ~ any;
    m_match_bool_j_50 = var_j_45 ~ int;
    m_match_cond_j_51 = m_match_bool_j_50 ? (
            bool_j_52 = true
        ) : (
            m_match_cond_j_48 = m_match_bool_j_47 ? (
                    var_j_49 = fail_b_1
                ) : (
                    void_j_46 = {}
                )
        ));
flatten_fun_j_55 = fun bj_null_j_0 -> (
    input_j_54 = input);
record_j_56 = {checker = flatten_fun_j_53, generator = flatten_fun_j_55};
proj_j_57 = record_j_56.generator;
int_j_58 = 0;
appl_j_59 = proj_j_57 int_j_58;
record_j_60 = {};
record_j_61 = {j_value = appl_j_59, j_variant_A = record_j_60};
v_expr_b_3 = record_j_61;
flatten_fun_j_63 = fun bj_null_j_1 -> (
    var_j_62 = v_expr_b_3);
record_j_64 = {checker = flatten_fun_j_43, generator = flatten_fun_j_63};
proj_j_65 = record_j_64.generator;
int_j_66 = 0;
appl_j_67 = proj_j_65 int_j_66;
n_b_15 = appl_j_67;
bool_j_68 = false;
fail_b_13 = bool_j_68;
flatten_fun_j_77 = fun expr_b_12 -> (
    var_j_69 = expr_b_12;
    m_match_bool_j_71 = var_j_69 ~ any;
    m_match_bool_j_74 = var_j_69 ~ int;
    m_match_cond_j_75 = m_match_bool_j_74 ? (
            bool_j_76 = true
        ) : (
            m_match_cond_j_72 = m_match_bool_j_71 ? (
                    var_j_73 = fail_b_13
                ) : (
                    void_j_70 = {}
                )
        ));
flatten_fun_j_79 = fun bj_null_j_2 -> (
    input_j_78 = input);
record_j_80 = {checker = flatten_fun_j_77, generator = flatten_fun_j_79};
proj_j_81 = record_j_80.checker;
appl_j_84 = f n_b_15;
appl_j_85 = proj_j_81 appl_j_84;
check_res_b_16 = appl_j_85;
if_j_93 = check_res_b_16 ? (
        var_j_87 = f
    ) : (
        error_var_j_88 = check_res_b_16;
        assert_pred_j_89 = error_var_j_88;
        assert_res_j_90 = assert_pred_j_89 ? (
                assert_res_true_j_91 = {}
            ) : (
                ab_j_92 = abort
            )
    );
i_result = if_j_93