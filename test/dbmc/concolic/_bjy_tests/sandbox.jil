i_first = {};
flatten_fun_j_71 = fun expr_b_12 -> (
    bool_j_20 = false;
    lst_fail_b_13 = bool_j_20;
    var_j_21 = expr_b_12;
    m_match_bool_j_23 = var_j_21 ~ any;
    m_match_bool_j_26 = var_j_21 ~ {j_head, j_tail, _};
    m_match_bool_j_68 = var_j_21 ~ {j_empty, _};
    m_match_cond_j_69 = m_match_bool_j_68 ? (
            bool_j_70 = true
        ) : (
            m_match_cond_j_27 = m_match_bool_j_26 ? (
                    bj_underscore = var_j_21.j_head;
                    bj_underscore2 = var_j_21.j_tail;
                    flatten_fun_j_61 = fun test_fun_b_9_j_0 -> (
                        flatten_fun_j_60 = fun test_list_b_10 -> (
                            var_j_28 = test_fun_b_9_j_0;
                            var_j_29 = test_fun_b_9_j_0;
                            appl_j_30 = var_j_28 var_j_29;
                            test_fun_b_9 = appl_j_30;
                            var_j_31 = test_list_b_10;
                            m_match_bool_j_33 = var_j_31 ~ {j_head, j_tail, _};
                            m_match_bool_j_57 = var_j_31 ~ {j_empty, _};
                            m_match_cond_j_58 = m_match_bool_j_57 ? (
                                    bool_j_59 = true
                                ) : (
                                    m_match_cond_j_34 = m_match_bool_j_33 ? (
                                            hd = var_j_31.j_head;
                                            tl = var_j_31.j_tail;
                                            bool_j_35 = false;
                                            fail_b_7 = bool_j_35;
                                            flatten_fun_j_44 = fun expr_b_6 -> (
                                                var_j_36 = expr_b_6;
                                                m_match_bool_j_38 = var_j_36 ~ any;
                                                m_match_bool_j_41 = var_j_36 ~ int;
                                                m_match_cond_j_42 = m_match_bool_j_41 ? (
                                                        bool_j_43 = true
                                                    ) : (
                                                        m_match_cond_j_39 = m_match_bool_j_38 ? (
                                                                var_j_40 = fail_b_7
                                                            ) : (
                                                                void_j_37 = 
                                                                    {}
                                                            )
                                                    ));
                                            flatten_fun_j_46 = fun bj_null -> (
                                                input_j_45 = input);
                                            record_j_47 = {checker = flatten_fun_j_44, generator = flatten_fun_j_46};
                                            proj_j_48 = record_j_47.checker;
                                            var_j_49 = hd;
                                            appl_j_50 = proj_j_48 var_j_49;
                                            elm_check_b_11 = appl_j_50;
                                            var_j_51 = elm_check_b_11;
                                            if_j_56 = var_j_51 ? (
                                                    var_j_52 = test_fun_b_9;
                                                    var_j_53 = tl;
                                                    appl_j_54 = var_j_52 var_j_53
                                                ) : (
                                                    var_j_55 = elm_check_b_11
                                                )
                                        ) : (
                                            void_j_32 = {}
                                        )
                                )));
                    test_fun_b_9_j_0_j_3 = flatten_fun_j_61;
                    var_j_62 = test_fun_b_9_j_0_j_3;
                    var_j_63 = test_fun_b_9_j_0_j_3;
                    appl_j_64 = var_j_62 var_j_63;
                    test_fun_b_9_j_2 = appl_j_64;
                    var_j_65 = test_fun_b_9_j_2;
                    var_j_66 = expr_b_12;
                    appl_j_67 = var_j_65 var_j_66
                ) : (
                    m_match_cond_j_24 = m_match_bool_j_23 ? (
                            var_j_25 = lst_fail_b_13
                        ) : (
                            void_j_22 = {}
                        )
                )
        ));
flatten_fun_j_120 = fun bj_null_j_8 -> (
    flatten_fun_j_106 = fun list_maker_b_4_j_1 -> (
        flatten_fun_j_105 = fun len_b_3 -> (
            var_j_72 = list_maker_b_4_j_1;
            var_j_73 = list_maker_b_4_j_1;
            appl_j_74 = var_j_72 var_j_73;
            list_maker_b_4 = appl_j_74;
            var_j_75 = len_b_3;
            int_j_76 = 0;
            binop_j_77 = var_j_75 == int_j_76;
            if_j_104 = binop_j_77 ? (
                    record_j_78 = {};
                    record_j_79 = {j_empty = record_j_78}
                ) : (
                    bool_j_80 = false;
                    fail_b_1 = bool_j_80;
                    flatten_fun_j_89 = fun expr_b_0 -> (
                        var_j_81 = expr_b_0;
                        m_match_bool_j_83 = var_j_81 ~ any;
                        m_match_bool_j_86 = var_j_81 ~ int;
                        m_match_cond_j_87 = m_match_bool_j_86 ? (
                                bool_j_88 = true
                            ) : (
                                m_match_cond_j_84 = m_match_bool_j_83 ? (
                                        var_j_85 = fail_b_1
                                    ) : (
                                        void_j_82 = {}
                                    )
                            ));
                    flatten_fun_j_91 = fun bj_null_j_4 -> (
                        input_j_90 = input);
                    record_j_92 = {checker = flatten_fun_j_89, generator = flatten_fun_j_91};
                    proj_j_93 = record_j_92.generator;
                    int_j_94 = 0;
                    appl_j_95 = proj_j_93 int_j_94;
                    elm_b_5 = appl_j_95;
                    record_j_96 = {};
                    var_j_97 = elm_b_5;
                    var_j_98 = list_maker_b_4;
                    var_j_99 = len_b_3;
                    int_j_100 = 1;
                    binop_j_101 = var_j_99 - int_j_100;
                    appl_j_102 = var_j_98 binop_j_101;
                    record_j_103 = {j_cons = record_j_96, j_head = var_j_97, j_tail = appl_j_102}
                )));
    list_maker_b_4_j_1_j_7 = flatten_fun_j_106;
    var_j_107 = list_maker_b_4_j_1_j_7;
    var_j_108 = list_maker_b_4_j_1_j_7;
    appl_j_109 = var_j_107 var_j_108;
    list_maker_b_4_j_6 = appl_j_109;
    input_j_110 = input;
    len_b_3_j_5 = input_j_110;
    int_j_111 = 0;
    var_j_112 = len_b_3_j_5;
    binop_j_113 = int_j_111 <= var_j_112;
    if_j_119 = binop_j_113 ? (
            var_j_114 = list_maker_b_4_j_6;
            var_j_115 = len_b_3_j_5;
            appl_j_116 = var_j_114 var_j_115
        ) : (
            bool_j_117 = false;
            assume_j_118 = assume bool_j_117
        ));
record_j_121 = {checker = flatten_fun_j_71, generator = flatten_fun_j_120};
t = record_j_121;
flatten_fun_j_127 = fun s -> (
    flatten_fun_j_126 = fun x -> (
        record_j_122 = {};
        int_j_123 = 1;
        var_j_124 = x;
        record_j_125 = {j_cons = record_j_122, j_head = int_j_123, j_tail = var_j_124}));
int_j_128 = 1;
record_j_129 = {add = flatten_fun_j_127, emptyset = int_j_128};
record_j_130 = {};
record_j_131 = {};
record_j_132 = {add = record_j_130, emptyset = record_j_131};
record_j_133 = {bj_actual_rec = record_j_129, bj_decl_lbls = record_j_132};
set_m_b_85 = record_j_133;
proj_j_135 = set_m_b_85.bj_actual_rec;
record_j_136 = {};
record_j_137 = {};
record_j_138 = {add = record_j_136, emptyset = record_j_137};
record_j_139 = {bj_actual_rec = proj_j_135, bj_decl_lbls = record_j_138};
set_m = record_j_139;
flatten_fun_j_276 = fun expr_b_51 -> (
    bool_j_140 = false;
    rec_fail_b_50 = bool_j_140;
    bool_j_141 = false;
    rec_fail_b_49 = bool_j_141;
    bool_j_142 = false;
    rec_fail_b_48 = bool_j_142;
    var_j_143 = expr_b_51;
    m_match_bool_j_145 = var_j_143 ~ any;
    m_match_bool_j_148 = var_j_143 ~ {bj_actual_rec, _};
    m_match_cond_j_149 = m_match_bool_j_148 ? (
            var_j_150 = expr_b_51;
            proj_j_151 = var_j_150.bj_decl_lbls;
            m_match_bool_j_153 = proj_j_151 ~ any;
            m_match_bool_j_156 = proj_j_151 ~ {add, emptyset, _};
            m_match_cond_j_157 = m_match_bool_j_156 ? (
                    add_j_14 = proj_j_151.add;
                    emptyset_j_13 = proj_j_151.emptyset;
                    var_j_158 = expr_b_51;
                    proj_j_159 = var_j_158.bj_actual_rec;
                    m_match_bool_j_161 = proj_j_159 ~ any;
                    m_match_bool_j_164 = proj_j_159 ~ {add, emptyset, _};
                    m_match_cond_j_165 = m_match_bool_j_164 ? (
                            add = proj_j_159.add;
                            emptyset = proj_j_159.emptyset;
                            flatten_fun_j_206 = fun expr_b_72 -> (
                                var_j_166 = t;
                                proj_j_167 = var_j_166.generator;
                                int_j_168 = 0;
                                appl_j_169 = proj_j_167 int_j_168;
                                arg_assert_b_73 = appl_j_169;
                                var_j_170 = expr_b_72;
                                var_j_171 = arg_assert_b_73;
                                appl_j_172 = var_j_170 var_j_171;
                                fun_ret_b_74 = appl_j_172;
                                flatten_fun_j_184 = fun expr_b_67 -> (
                                    var_j_173 = t;
                                    proj_j_174 = var_j_173.generator;
                                    int_j_175 = 0;
                                    appl_j_176 = proj_j_174 int_j_175;
                                    arg_assert_b_68 = appl_j_176;
                                    var_j_177 = expr_b_67;
                                    var_j_178 = arg_assert_b_68;
                                    appl_j_179 = var_j_177 var_j_178;
                                    fun_ret_b_69 = appl_j_179;
                                    var_j_180 = t;
                                    proj_j_181 = var_j_180.checker;
                                    var_j_182 = fun_ret_b_69;
                                    appl_j_183 = proj_j_181 var_j_182);
                                flatten_fun_j_201 = fun bj_null_j_9 -> (
                                    flatten_fun_j_200 = fun arg_assume_b_65 -> (
                                        var_j_185 = t;
                                        proj_j_186 = var_j_185.checker;
                                        var_j_187 = arg_assume_b_65;
                                        appl_j_188 = proj_j_186 var_j_187;
                                        if_j_199 = appl_j_188 ? (
                                                var_j_189 = t;
                                                proj_j_190 = var_j_189.generator;
                                                int_j_191 = 0;
                                                appl_j_192 = proj_j_190 int_j_191
                                            ) : (
                                                bool_j_193 = false;
                                                fail_b_66 = bool_j_193;
                                                var_j_194 = fail_b_66;
                                                assert_pred_j_195 = var_j_194;
                                                assert_res_j_196 = assert_pred_j_195 ? (
                                                        assert_res_true_j_197 = 
                                                            {}
                                                    ) : (
                                                        ab_j_198 = abort
                                                    )
                                            )));
                                record_j_202 = {checker = flatten_fun_j_184, generator = flatten_fun_j_201};
                                proj_j_203 = record_j_202.checker;
                                var_j_204 = fun_ret_b_74;
                                appl_j_205 = proj_j_203 var_j_204);
                            flatten_fun_j_252 = fun bj_null_j_11 -> (
                                flatten_fun_j_251 = fun arg_assume_b_63 -> (
                                    var_j_207 = t;
                                    proj_j_208 = var_j_207.checker;
                                    var_j_209 = arg_assume_b_63;
                                    appl_j_210 = proj_j_208 var_j_209;
                                    if_j_250 = appl_j_210 ? (
                                            flatten_fun_j_222 = fun expr_b_58 -> (
                                                var_j_211 = t;
                                                proj_j_212 = var_j_211.generator;
                                                int_j_213 = 0;
                                                appl_j_214 = proj_j_212 int_j_213;
                                                arg_assert_b_59 = appl_j_214;
                                                var_j_215 = expr_b_58;
                                                var_j_216 = arg_assert_b_59;
                                                appl_j_217 = var_j_215 var_j_216;
                                                fun_ret_b_60 = appl_j_217;
                                                var_j_218 = t;
                                                proj_j_219 = var_j_218.checker;
                                                var_j_220 = fun_ret_b_60;
                                                appl_j_221 = proj_j_219 var_j_220);
                                            flatten_fun_j_239 = fun bj_null_j_10 -> (
                                                flatten_fun_j_238 = fun arg_assume_b_56 -> (
                                                    var_j_223 = t;
                                                    proj_j_224 = var_j_223.checker;
                                                    var_j_225 = arg_assume_b_56;
                                                    appl_j_226 = proj_j_224 var_j_225;
                                                    if_j_237 = appl_j_226 ? (
                                                            var_j_227 = t;
                                                            proj_j_228 = var_j_227.generator;
                                                            int_j_229 = 0;
                                                            appl_j_230 = proj_j_228 int_j_229
                                                        ) : (
                                                            bool_j_231 = false;
                                                            fail_b_57 = bool_j_231;
                                                            var_j_232 = fail_b_57;
                                                            assert_pred_j_233 = var_j_232;
                                                            assert_res_j_234 = assert_pred_j_233 ? (
                                                                    assert_res_true_j_235 = 
                                                                    {}
                                                                ) : (
                                                                    ab_j_236 = abort
                                                                )
                                                        )));
                                            record_j_240 = {checker = flatten_fun_j_222, generator = flatten_fun_j_239};
                                            proj_j_241 = record_j_240.generator;
                                            int_j_242 = 0;
                                            appl_j_243 = proj_j_241 int_j_242
                                        ) : (
                                            bool_j_244 = false;
                                            fail_b_64 = bool_j_244;
                                            var_j_245 = fail_b_64;
                                            assert_pred_j_246 = var_j_245;
                                            assert_res_j_247 = assert_pred_j_246 ? (
                                                    assert_res_true_j_248 = 
                                                        {}
                                                ) : (
                                                    ab_j_249 = abort
                                                )
                                        )));
                            record_j_253 = {checker = flatten_fun_j_206, generator = flatten_fun_j_252};
                            proj_j_254 = record_j_253.checker;
                            var_j_255 = add;
                            appl_j_256 = proj_j_254 var_j_255;
                            lbl_check_b_55 = appl_j_256;
                            var_j_257 = lbl_check_b_55;
                            if_j_275 = var_j_257 ? (
                                    bool_j_258 = false;
                                    fail_b_53 = bool_j_258;
                                    flatten_fun_j_267 = fun expr_b_52 -> (
                                        var_j_259 = expr_b_52;
                                        m_match_bool_j_261 = var_j_259 ~ any;
                                        m_match_bool_j_264 = var_j_259 ~ int;
                                        m_match_cond_j_265 = m_match_bool_j_264 ? (
                                                bool_j_266 = true
                                            ) : (
                                                m_match_cond_j_262 = m_match_bool_j_261 ? (
                                                        var_j_263 = fail_b_53
                                                    ) : (
                                                        void_j_260 = 
                                                            {}
                                                    )
                                            ));
                                    flatten_fun_j_269 = fun bj_null_j_12 -> (
                                        input_j_268 = input);
                                    record_j_270 = {checker = flatten_fun_j_267, generator = flatten_fun_j_269};
                                    proj_j_271 = record_j_270.checker;
                                    var_j_272 = emptyset;
                                    appl_j_273 = proj_j_271 var_j_272
                                ) : (
                                    var_j_274 = lbl_check_b_55
                                )
                        ) : (
                            m_match_cond_j_162 = m_match_bool_j_161 ? (
                                    var_j_163 = rec_fail_b_48
                                ) : (
                                    void_j_160 = {}
                                )
                        )
                ) : (
                    m_match_cond_j_154 = m_match_bool_j_153 ? (
                            var_j_155 = rec_fail_b_49
                        ) : (
                            void_j_152 = {}
                        )
                )
        ) : (
            m_match_cond_j_146 = m_match_bool_j_145 ? (
                    var_j_147 = rec_fail_b_50
                ) : (
                    void_j_144 = {}
                )
        ));
flatten_fun_j_391 = fun bj_null_j_19 -> (
    bool_j_277 = false;
    fail_b_46 = bool_j_277;
    flatten_fun_j_286 = fun expr_b_45 -> (
        var_j_278 = expr_b_45;
        m_match_bool_j_280 = var_j_278 ~ any;
        m_match_bool_j_283 = var_j_278 ~ int;
        m_match_cond_j_284 = m_match_bool_j_283 ? (
                bool_j_285 = true
            ) : (
                m_match_cond_j_281 = m_match_bool_j_280 ? (
                        var_j_282 = fail_b_46
                    ) : (
                        void_j_279 = {}
                    )
            ));
    flatten_fun_j_288 = fun bj_null_j_15 -> (
        input_j_287 = input);
    record_j_289 = {checker = flatten_fun_j_286, generator = flatten_fun_j_288};
    proj_j_290 = record_j_289.generator;
    int_j_291 = 0;
    appl_j_292 = proj_j_290 int_j_291;
    emptyset_b_16 = appl_j_292;
    flatten_fun_j_333 = fun expr_b_33 -> (
        var_j_293 = t;
        proj_j_294 = var_j_293.generator;
        int_j_295 = 0;
        appl_j_296 = proj_j_294 int_j_295;
        arg_assert_b_34 = appl_j_296;
        var_j_297 = expr_b_33;
        var_j_298 = arg_assert_b_34;
        appl_j_299 = var_j_297 var_j_298;
        fun_ret_b_35 = appl_j_299;
        flatten_fun_j_311 = fun expr_b_28 -> (
            var_j_300 = t;
            proj_j_301 = var_j_300.generator;
            int_j_302 = 0;
            appl_j_303 = proj_j_301 int_j_302;
            arg_assert_b_29 = appl_j_303;
            var_j_304 = expr_b_28;
            var_j_305 = arg_assert_b_29;
            appl_j_306 = var_j_304 var_j_305;
            fun_ret_b_30 = appl_j_306;
            var_j_307 = t;
            proj_j_308 = var_j_307.checker;
            var_j_309 = fun_ret_b_30;
            appl_j_310 = proj_j_308 var_j_309);
        flatten_fun_j_328 = fun bj_null_j_16 -> (
            flatten_fun_j_327 = fun arg_assume_b_26 -> (
                var_j_312 = t;
                proj_j_313 = var_j_312.checker;
                var_j_314 = arg_assume_b_26;
                appl_j_315 = proj_j_313 var_j_314;
                if_j_326 = appl_j_315 ? (
                        var_j_316 = t;
                        proj_j_317 = var_j_316.generator;
                        int_j_318 = 0;
                        appl_j_319 = proj_j_317 int_j_318
                    ) : (
                        bool_j_320 = false;
                        fail_b_27 = bool_j_320;
                        var_j_321 = fail_b_27;
                        assert_pred_j_322 = var_j_321;
                        assert_res_j_323 = assert_pred_j_322 ? (
                                assert_res_true_j_324 = {}
                            ) : (
                                ab_j_325 = abort
                            )
                    )));
        record_j_329 = {checker = flatten_fun_j_311, generator = flatten_fun_j_328};
        proj_j_330 = record_j_329.checker;
        var_j_331 = fun_ret_b_35;
        appl_j_332 = proj_j_330 var_j_331);
    flatten_fun_j_379 = fun bj_null_j_18 -> (
        flatten_fun_j_378 = fun arg_assume_b_24 -> (
            var_j_334 = t;
            proj_j_335 = var_j_334.checker;
            var_j_336 = arg_assume_b_24;
            appl_j_337 = proj_j_335 var_j_336;
            if_j_377 = appl_j_337 ? (
                    flatten_fun_j_349 = fun expr_b_19 -> (
                        var_j_338 = t;
                        proj_j_339 = var_j_338.generator;
                        int_j_340 = 0;
                        appl_j_341 = proj_j_339 int_j_340;
                        arg_assert_b_20 = appl_j_341;
                        var_j_342 = expr_b_19;
                        var_j_343 = arg_assert_b_20;
                        appl_j_344 = var_j_342 var_j_343;
                        fun_ret_b_21 = appl_j_344;
                        var_j_345 = t;
                        proj_j_346 = var_j_345.checker;
                        var_j_347 = fun_ret_b_21;
                        appl_j_348 = proj_j_346 var_j_347);
                    flatten_fun_j_366 = fun bj_null_j_17 -> (
                        flatten_fun_j_365 = fun arg_assume_b_17 -> (
                            var_j_350 = t;
                            proj_j_351 = var_j_350.checker;
                            var_j_352 = arg_assume_b_17;
                            appl_j_353 = proj_j_351 var_j_352;
                            if_j_364 = appl_j_353 ? (
                                    var_j_354 = t;
                                    proj_j_355 = var_j_354.generator;
                                    int_j_356 = 0;
                                    appl_j_357 = proj_j_355 int_j_356
                                ) : (
                                    bool_j_358 = false;
                                    fail_b_18 = bool_j_358;
                                    var_j_359 = fail_b_18;
                                    assert_pred_j_360 = var_j_359;
                                    assert_res_j_361 = assert_pred_j_360 ? (
                                            assert_res_true_j_362 = {}
                                        ) : (
                                            ab_j_363 = abort
                                        )
                                )));
                    record_j_367 = {checker = flatten_fun_j_349, generator = flatten_fun_j_366};
                    proj_j_368 = record_j_367.generator;
                    int_j_369 = 0;
                    appl_j_370 = proj_j_368 int_j_369
                ) : (
                    bool_j_371 = false;
                    fail_b_25 = bool_j_371;
                    var_j_372 = fail_b_25;
                    assert_pred_j_373 = var_j_372;
                    assert_res_j_374 = assert_pred_j_373 ? (
                            assert_res_true_j_375 = {}
                        ) : (
                            ab_j_376 = abort
                        )
                )));
    record_j_380 = {checker = flatten_fun_j_333, generator = flatten_fun_j_379};
    proj_j_381 = record_j_380.generator;
    int_j_382 = 0;
    appl_j_383 = proj_j_381 int_j_382;
    add_b_15 = appl_j_383;
    var_j_384 = add_b_15;
    var_j_385 = emptyset_b_16;
    record_j_386 = {add = var_j_384, emptyset = var_j_385};
    record_j_387 = {};
    record_j_388 = {};
    record_j_389 = {add = record_j_387, emptyset = record_j_388};
    record_j_390 = {bj_actual_rec = record_j_386, bj_decl_lbls = record_j_389});
record_j_392 = {checker = flatten_fun_j_276, generator = flatten_fun_j_391};
proj_j_393 = record_j_392.checker;
appl_j_395 = proj_j_393 set_m_b_85;
check_res_b_86 = appl_j_395;
if_j_403 = check_res_b_86 ? (
        var_j_397 = set_m
    ) : (
        error_var_j_398 = check_res_b_86;
        assert_pred_j_399 = error_var_j_398;
        assert_res_j_400 = assert_pred_j_399 ? (
                assert_res_true_j_401 = {}
            ) : (
                ab_j_402 = abort
            )
    );
i_result = if_j_403