i_first = {};
flatten_fun_j_5 = fun x -> (
    var_j_4 = x);
id_b_25 = flatten_fun_j_5;
id = id_b_25;
flatten_fun_j_42 = fun expr_b_14 -> (
    bool_j_7 = false;
    fail_b_9 = bool_j_7;
    flatten_fun_j_16 = fun expr_b_8 -> (
        var_j_8 = expr_b_8;
        m_match_bool_j_10 = var_j_8 ~ any;
        m_match_bool_j_13 = var_j_8 ~ int;
        m_match_cond_j_14 = m_match_bool_j_13 ? (
                bool_j_15 = true
            ) : (
                m_match_cond_j_11 = m_match_bool_j_10 ? (
                        var_j_12 = fail_b_9
                    ) : (
                        void_j_9 = {}
                    )
            ));
    flatten_fun_j_18 = fun bj_null -> (
        input_j_17 = input);
    record_j_19 = {checker = flatten_fun_j_16, generator = flatten_fun_j_18};
    proj_j_20 = record_j_19.generator;
    int_j_21 = 0;
    appl_j_22 = proj_j_20 int_j_21;
    arg_assert_b_15 = appl_j_22;
    var_j_23 = expr_b_14;
    var_j_24 = arg_assert_b_15;
    appl_j_25 = var_j_23 var_j_24;
    fun_ret_b_16 = appl_j_25;
    bool_j_26 = false;
    fail_b_12 = bool_j_26;
    flatten_fun_j_35 = fun expr_b_11 -> (
        var_j_27 = expr_b_11;
        m_match_bool_j_29 = var_j_27 ~ any;
        m_match_bool_j_32 = var_j_27 ~ int;
        m_match_cond_j_33 = m_match_bool_j_32 ? (
                bool_j_34 = true
            ) : (
                m_match_cond_j_30 = m_match_bool_j_29 ? (
                        var_j_31 = fail_b_12
                    ) : (
                        void_j_28 = {}
                    )
            ));
    flatten_fun_j_37 = fun bj_null_j_0 -> (
        input_j_36 = input);
    record_j_38 = {checker = flatten_fun_j_35, generator = flatten_fun_j_37};
    proj_j_39 = record_j_38.checker;
    var_j_40 = fun_ret_b_16;
    appl_j_41 = proj_j_39 var_j_40);
flatten_fun_j_83 = fun bj_null_j_3 -> (
    flatten_fun_j_82 = fun arg_assume_b_6 -> (
        bool_j_43 = false;
        fail_b_1 = bool_j_43;
        flatten_fun_j_52 = fun expr_b_0 -> (
            var_j_44 = expr_b_0;
            m_match_bool_j_46 = var_j_44 ~ any;
            m_match_bool_j_49 = var_j_44 ~ int;
            m_match_cond_j_50 = m_match_bool_j_49 ? (
                    bool_j_51 = true
                ) : (
                    m_match_cond_j_47 = m_match_bool_j_46 ? (
                            var_j_48 = fail_b_1
                        ) : (
                            void_j_45 = {}
                        )
                ));
        flatten_fun_j_54 = fun bj_null_j_1 -> (
            input_j_53 = input);
        record_j_55 = {checker = flatten_fun_j_52, generator = flatten_fun_j_54};
        proj_j_56 = record_j_55.checker;
        var_j_57 = arg_assume_b_6;
        appl_j_58 = proj_j_56 var_j_57;
        if_j_81 = appl_j_58 ? (
                bool_j_59 = false;
                fail_b_4 = bool_j_59;
                flatten_fun_j_68 = fun expr_b_3 -> (
                    var_j_60 = expr_b_3;
                    m_match_bool_j_62 = var_j_60 ~ any;
                    m_match_bool_j_65 = var_j_60 ~ int;
                    m_match_cond_j_66 = m_match_bool_j_65 ? (
                            bool_j_67 = true
                        ) : (
                            m_match_cond_j_63 = m_match_bool_j_62 ? (
                                    var_j_64 = fail_b_4
                                ) : (
                                    void_j_61 = {}
                                )
                        ));
                flatten_fun_j_70 = fun bj_null_j_2 -> (
                    input_j_69 = input);
                record_j_71 = {checker = flatten_fun_j_68, generator = flatten_fun_j_70};
                proj_j_72 = record_j_71.generator;
                int_j_73 = 0;
                appl_j_74 = proj_j_72 int_j_73
            ) : (
                bool_j_75 = false;
                fail_b_7 = bool_j_75;
                var_j_76 = fail_b_7;
                assert_pred_j_77 = var_j_76;
                assert_res_j_78 = assert_pred_j_77 ? (
                        assert_res_true_j_79 = {}
                    ) : (
                        ab_j_80 = abort
                    )
            )));
record_j_84 = {checker = flatten_fun_j_42, generator = flatten_fun_j_83};
proj_j_85 = record_j_84.checker;
appl_j_87 = proj_j_85 id_b_25;
check_res_b_26 = appl_j_87;
if_j_97 = check_res_b_26 ? (
        var_j_89 = id;
        bool_j_90 = true;
        m_i_98 = var_j_89 ~ fun;
        appl_j_91 = m_i_98 ? (
                c_appl_i_99 = var_j_89 bool_j_90
            ) : (
                ab_i_100 = abort
            )
    ) : (
        error_var_j_92 = check_res_b_26;
        assert_pred_j_93 = error_var_j_92;
        assert_res_j_94 = assert_pred_j_93 ? (
                assert_res_true_j_95 = {}
            ) : (
                ab_j_96 = abort
            )
    );
i_result = if_j_97