i_first = {};
e_j_29 = fun f -> (
    var_j_13 = f;
    int_j_14 = 5;
    m_i_269 = var_j_13 ~ fun;
    appl_j_15 = m_i_269 ? (
            c_appl_i_270 = var_j_13 int_j_14
        ) : (
            ab_i_271 = abort
        );
    f5 = appl_j_15;
    var_j_16 = f5;
    int_j_17 = 1;
    m_i_272 = var_j_16 ~ fun;
    appl_j_18 = m_i_272 ? (
            c_appl_i_273 = var_j_16 int_j_17
        ) : (
            ab_i_274 = abort
        );
    f51 = appl_j_18;
    var_j_19 = f5;
    int_j_20 = 2;
    m_i_275 = var_j_19 ~ fun;
    appl_j_21 = m_i_275 ? (
            c_appl_i_276 = var_j_19 int_j_20
        ) : (
            ab_i_277 = abort
        );
    f52 = appl_j_21;
    var_j_22 = f51;
    var_j_23 = f52;
    m_bl_i_278 = var_j_22 ~ int;
    m_br_i_279 = var_j_23 ~ int;
    m_b_i_280 = m_bl_i_278 and m_br_i_279;
    binop_j_24 = m_b_i_280 ? (
            c_binop_i_281 = var_j_22 == var_j_23
        ) : (
            ab_i_282 = abort
        );
    m_i_283 = binop_j_24 ~ bool;
    notop_j_25 = m_i_283 ? (
            c_not_i_284 = not binop_j_24
        ) : (
            ab_i_285 = abort
        );
    m_i_286 = notop_j_25 ~ bool;
    if_j_28 = m_i_286 ? (
            c_cond_i_287 = notop_j_25 ? (
                    int_j_26 = 1
                ) : (
                    bool_j_27 = true
                )
        ) : (
            ab_i_288 = abort
        ));
e = e_j_29;
flatten_fun_j_130 = fun expr_b_58 -> (
    bool_j_30 = false;
    fail_b_31 = bool_j_30;
    flatten_fun_j_39 = fun expr_b_30 -> (
        var_j_31 = expr_b_30;
        m_match_bool_j_33 = var_j_31 ~ any;
        m_match_bool_j_36 = var_j_31 ~ int;
        m_match_cond_j_37 = m_match_bool_j_36 ? (
                bool_j_38 = true
            ) : (
                m_match_cond_j_34 = m_match_bool_j_33 ? (
                        var_j_35 = fail_b_31
                    ) : (
                        void_j_32 = {}
                    )
            ));
    flatten_fun_j_41 = fun bj_null -> (
        input_j_40 = input);
    record_j_42 = {checker = flatten_fun_j_39, generator = flatten_fun_j_41};
    proj_j_43 = record_j_42.generator;
    int_j_44 = 0;
    appl_j_45 = proj_j_43 int_j_44;
    arg_assert_b_59 = appl_j_45;
    var_j_46 = expr_b_58;
    var_j_47 = arg_assert_b_59;
    appl_j_48 = var_j_46 var_j_47;
    fun_ret_b_60 = appl_j_48;
    flatten_fun_j_84 = fun expr_b_47 -> (
        bool_j_49 = false;
        fail_b_42 = bool_j_49;
        flatten_fun_j_58 = fun expr_b_41 -> (
            var_j_50 = expr_b_41;
            m_match_bool_j_52 = var_j_50 ~ any;
            m_match_bool_j_55 = var_j_50 ~ int;
            m_match_cond_j_56 = m_match_bool_j_55 ? (
                    bool_j_57 = true
                ) : (
                    m_match_cond_j_53 = m_match_bool_j_52 ? (
                            var_j_54 = fail_b_42
                        ) : (
                            void_j_51 = {}
                        )
                ));
        flatten_fun_j_60 = fun bj_null_j_0 -> (
            input_j_59 = input);
        record_j_61 = {checker = flatten_fun_j_58, generator = flatten_fun_j_60};
        proj_j_62 = record_j_61.generator;
        int_j_63 = 0;
        appl_j_64 = proj_j_62 int_j_63;
        arg_assert_b_48 = appl_j_64;
        var_j_65 = expr_b_47;
        var_j_66 = arg_assert_b_48;
        appl_j_67 = var_j_65 var_j_66;
        fun_ret_b_49 = appl_j_67;
        bool_j_68 = false;
        fail_b_45 = bool_j_68;
        flatten_fun_j_77 = fun expr_b_44 -> (
            var_j_69 = expr_b_44;
            m_match_bool_j_71 = var_j_69 ~ any;
            m_match_bool_j_74 = var_j_69 ~ int;
            m_match_cond_j_75 = m_match_bool_j_74 ? (
                    bool_j_76 = true
                ) : (
                    m_match_cond_j_72 = m_match_bool_j_71 ? (
                            var_j_73 = fail_b_45
                        ) : (
                            void_j_70 = {}
                        )
                ));
        flatten_fun_j_79 = fun bj_null_j_1 -> (
            input_j_78 = input);
        record_j_80 = {checker = flatten_fun_j_77, generator = flatten_fun_j_79};
        proj_j_81 = record_j_80.checker;
        var_j_82 = fun_ret_b_49;
        appl_j_83 = proj_j_81 var_j_82);
    flatten_fun_j_125 = fun bj_null_j_4 -> (
        flatten_fun_j_124 = fun arg_assume_b_39 -> (
            bool_j_85 = false;
            fail_b_34 = bool_j_85;
            flatten_fun_j_94 = fun expr_b_33 -> (
                var_j_86 = expr_b_33;
                m_match_bool_j_88 = var_j_86 ~ any;
                m_match_bool_j_91 = var_j_86 ~ int;
                m_match_cond_j_92 = m_match_bool_j_91 ? (
                        bool_j_93 = true
                    ) : (
                        m_match_cond_j_89 = m_match_bool_j_88 ? (
                                var_j_90 = fail_b_34
                            ) : (
                                void_j_87 = {}
                            )
                    ));
            flatten_fun_j_96 = fun bj_null_j_2 -> (
                input_j_95 = input);
            record_j_97 = {checker = flatten_fun_j_94, generator = flatten_fun_j_96};
            proj_j_98 = record_j_97.checker;
            var_j_99 = arg_assume_b_39;
            appl_j_100 = proj_j_98 var_j_99;
            if_j_123 = appl_j_100 ? (
                    bool_j_101 = false;
                    fail_b_37 = bool_j_101;
                    flatten_fun_j_110 = fun expr_b_36 -> (
                        var_j_102 = expr_b_36;
                        m_match_bool_j_104 = var_j_102 ~ any;
                        m_match_bool_j_107 = var_j_102 ~ int;
                        m_match_cond_j_108 = m_match_bool_j_107 ? (
                                bool_j_109 = true
                            ) : (
                                m_match_cond_j_105 = m_match_bool_j_104 ? (
                                        var_j_106 = fail_b_37
                                    ) : (
                                        void_j_103 = {}
                                    )
                            ));
                    flatten_fun_j_112 = fun bj_null_j_3 -> (
                        input_j_111 = input);
                    record_j_113 = {checker = flatten_fun_j_110, generator = flatten_fun_j_112};
                    proj_j_114 = record_j_113.generator;
                    int_j_115 = 0;
                    appl_j_116 = proj_j_114 int_j_115
                ) : (
                    bool_j_117 = false;
                    fail_b_40 = bool_j_117;
                    var_j_118 = fail_b_40;
                    assert_pred_j_119 = var_j_118;
                    assert_res_j_120 = assert_pred_j_119 ? (
                            assert_res_true_j_121 = {}
                        ) : (
                            ab_j_122 = abort
                        )
                )));
    record_j_126 = {checker = flatten_fun_j_84, generator = flatten_fun_j_125};
    proj_j_127 = record_j_126.checker;
    var_j_128 = fun_ret_b_60;
    appl_j_129 = proj_j_127 var_j_128);
flatten_fun_j_236 = fun bj_null_j_11 -> (
    flatten_fun_j_235 = fun arg_assume_b_28 -> (
        bool_j_131 = false;
        fail_b_1 = bool_j_131;
        flatten_fun_j_140 = fun expr_b_0 -> (
            var_j_132 = expr_b_0;
            m_match_bool_j_134 = var_j_132 ~ any;
            m_match_bool_j_137 = var_j_132 ~ int;
            m_match_cond_j_138 = m_match_bool_j_137 ? (
                    bool_j_139 = true
                ) : (
                    m_match_cond_j_135 = m_match_bool_j_134 ? (
                            var_j_136 = fail_b_1
                        ) : (
                            void_j_133 = {}
                        )
                ));
        flatten_fun_j_142 = fun bj_null_j_5 -> (
            input_j_141 = input);
        record_j_143 = {checker = flatten_fun_j_140, generator = flatten_fun_j_142};
        proj_j_144 = record_j_143.checker;
        var_j_145 = arg_assume_b_28;
        appl_j_146 = proj_j_144 var_j_145;
        if_j_234 = appl_j_146 ? (
                flatten_fun_j_182 = fun expr_b_17 -> (
                    bool_j_147 = false;
                    fail_b_12 = bool_j_147;
                    flatten_fun_j_156 = fun expr_b_11 -> (
                        var_j_148 = expr_b_11;
                        m_match_bool_j_150 = var_j_148 ~ any;
                        m_match_bool_j_153 = var_j_148 ~ int;
                        m_match_cond_j_154 = m_match_bool_j_153 ? (
                                bool_j_155 = true
                            ) : (
                                m_match_cond_j_151 = m_match_bool_j_150 ? (
                                        var_j_152 = fail_b_12
                                    ) : (
                                        void_j_149 = {}
                                    )
                            ));
                    flatten_fun_j_158 = fun bj_null_j_6 -> (
                        input_j_157 = input);
                    record_j_159 = {checker = flatten_fun_j_156, generator = flatten_fun_j_158};
                    proj_j_160 = record_j_159.generator;
                    int_j_161 = 0;
                    appl_j_162 = proj_j_160 int_j_161;
                    arg_assert_b_18 = appl_j_162;
                    var_j_163 = expr_b_17;
                    var_j_164 = arg_assert_b_18;
                    appl_j_165 = var_j_163 var_j_164;
                    fun_ret_b_19 = appl_j_165;
                    bool_j_166 = false;
                    fail_b_15 = bool_j_166;
                    flatten_fun_j_175 = fun expr_b_14 -> (
                        var_j_167 = expr_b_14;
                        m_match_bool_j_169 = var_j_167 ~ any;
                        m_match_bool_j_172 = var_j_167 ~ int;
                        m_match_cond_j_173 = m_match_bool_j_172 ? (
                                bool_j_174 = true
                            ) : (
                                m_match_cond_j_170 = m_match_bool_j_169 ? (
                                        var_j_171 = fail_b_15
                                    ) : (
                                        void_j_168 = {}
                                    )
                            ));
                    flatten_fun_j_177 = fun bj_null_j_7 -> (
                        input_j_176 = input);
                    record_j_178 = {checker = flatten_fun_j_175, generator = flatten_fun_j_177};
                    proj_j_179 = record_j_178.checker;
                    var_j_180 = fun_ret_b_19;
                    appl_j_181 = proj_j_179 var_j_180);
                flatten_fun_j_223 = fun bj_null_j_10 -> (
                    flatten_fun_j_222 = fun arg_assume_b_9 -> (
                        bool_j_183 = false;
                        fail_b_4 = bool_j_183;
                        flatten_fun_j_192 = fun expr_b_3 -> (
                            var_j_184 = expr_b_3;
                            m_match_bool_j_186 = var_j_184 ~ any;
                            m_match_bool_j_189 = var_j_184 ~ int;
                            m_match_cond_j_190 = m_match_bool_j_189 ? (
                                    bool_j_191 = true
                                ) : (
                                    m_match_cond_j_187 = m_match_bool_j_186 ? (
                                            var_j_188 = fail_b_4
                                        ) : (
                                            void_j_185 = {}
                                        )
                                ));
                        flatten_fun_j_194 = fun bj_null_j_8 -> (
                            input_j_193 = input);
                        record_j_195 = {checker = flatten_fun_j_192, generator = flatten_fun_j_194};
                        proj_j_196 = record_j_195.checker;
                        var_j_197 = arg_assume_b_9;
                        appl_j_198 = proj_j_196 var_j_197;
                        if_j_221 = appl_j_198 ? (
                                bool_j_199 = false;
                                fail_b_7 = bool_j_199;
                                flatten_fun_j_208 = fun expr_b_6 -> (
                                    var_j_200 = expr_b_6;
                                    m_match_bool_j_202 = var_j_200 ~ any;
                                    m_match_bool_j_205 = var_j_200 ~ int;
                                    m_match_cond_j_206 = m_match_bool_j_205 ? (
                                            bool_j_207 = true
                                        ) : (
                                            m_match_cond_j_203 = m_match_bool_j_202 ? (
                                                    var_j_204 = fail_b_7
                                                ) : (
                                                    void_j_201 = {}
                                                )
                                        ));
                                flatten_fun_j_210 = fun bj_null_j_9 -> (
                                    input_j_209 = input);
                                record_j_211 = {checker = flatten_fun_j_208, generator = flatten_fun_j_210};
                                proj_j_212 = record_j_211.generator;
                                int_j_213 = 0;
                                appl_j_214 = proj_j_212 int_j_213
                            ) : (
                                bool_j_215 = false;
                                fail_b_10 = bool_j_215;
                                var_j_216 = fail_b_10;
                                assert_pred_j_217 = var_j_216;
                                assert_res_j_218 = assert_pred_j_217 ? (
                                        assert_res_true_j_219 = {}
                                    ) : (
                                        ab_j_220 = abort
                                    )
                            )));
                record_j_224 = {checker = flatten_fun_j_182, generator = flatten_fun_j_223};
                proj_j_225 = record_j_224.generator;
                int_j_226 = 0;
                appl_j_227 = proj_j_225 int_j_226
            ) : (
                bool_j_228 = false;
                fail_b_29 = bool_j_228;
                var_j_229 = fail_b_29;
                assert_pred_j_230 = var_j_229;
                assert_res_j_231 = assert_pred_j_230 ? (
                        assert_res_true_j_232 = {}
                    ) : (
                        ab_j_233 = abort
                    )
            )));
record_j_237 = {checker = flatten_fun_j_130, generator = flatten_fun_j_236};
proj_j_238 = record_j_237.generator;
int_j_239 = 0;
appl_j_240 = proj_j_238 int_j_239;
f_b_94 = appl_j_240;
bool_j_241 = false;
fail_b_92 = bool_j_241;
flatten_fun_j_250 = fun expr_b_91 -> (
    var_j_242 = expr_b_91;
    m_match_bool_j_244 = var_j_242 ~ any;
    m_match_bool_j_247 = var_j_242 ~ bool;
    m_match_cond_j_248 = m_match_bool_j_247 ? (
            bool_j_249 = true
        ) : (
            m_match_cond_j_245 = m_match_bool_j_244 ? (
                    var_j_246 = fail_b_92
                ) : (
                    void_j_243 = {}
                )
        ));
flatten_fun_j_254 = fun bj_null_j_12 -> (
    int_j_251 = 0;
    input_j_252 = input;
    m_bl_i_289 = int_j_251 ~ int;
    m_br_i_290 = input_j_252 ~ int;
    m_b_i_291 = m_bl_i_289 and m_br_i_290;
    binop_j_253 = m_b_i_291 ? (
            c_binop_i_292 = int_j_251 <= input_j_252
        ) : (
            ab_i_293 = abort
        ));
record_j_255 = {checker = flatten_fun_j_250, generator = flatten_fun_j_254};
proj_j_256 = record_j_255.checker;
appl_j_259 = e f_b_94;
appl_j_260 = proj_j_256 appl_j_259;
check_res_b_95 = appl_j_260;
if_j_268 = check_res_b_95 ? (
        var_j_262 = e
    ) : (
        error_var_j_263 = check_res_b_95;
        assert_pred_j_264 = error_var_j_263;
        assert_res_j_265 = assert_pred_j_264 ? (
                assert_res_true_j_266 = {}
            ) : (
                ab_j_267 = abort
            )
    );
i_result = if_j_268