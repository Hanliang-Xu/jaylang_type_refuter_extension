int_j_3 = 1;
test_b_11 = int_j_3;
test = test_b_11;
flatten_fun_j_32 = fun expr_b_7 -> (
    bool_j_5 = false;
    fail_b_5 = bool_j_5;
    flatten_fun_j_14 = fun expr_b_4 -> (
        var_j_6 = expr_b_4;
        m_match_bool_j_8 = var_j_6 ~ any;
        m_match_bool_j_11 = var_j_6 ~ int;
        m_match_cond_j_12 = m_match_bool_j_11 ? (
                bool_j_13 = true
            ) : (
                m_match_cond_j_9 = m_match_bool_j_8 ? (
                        var_j_10 = fail_b_5
                    ) : (
                        void_j_7 = {}
                    )
            ));
    flatten_fun_j_16 = fun bj_null -> (
        input_j_15 = input);
    record_j_17 = {checker = flatten_fun_j_14, generator = flatten_fun_j_16};
    proj_j_18 = record_j_17.checker;
    var_j_19 = expr_b_7;
    appl_j_20 = proj_j_18 var_j_19;
    t_check_b_8 = appl_j_20;
    var_j_21 = t_check_b_8;
    if_j_31 = var_j_21 ? (
            bool_j_22 = false;
            pred_check_b_9 = bool_j_22;
            flatten_fun_j_24 = fun a -> (
                bool_j_23 = false);
            var_j_25 = expr_b_7;
            appl_j_26 = flatten_fun_j_24 var_j_25;
            if_j_29 = appl_j_26 ? (
                    bool_j_27 = true
                ) : (
                    var_j_28 = pred_check_b_9
                )
        ) : (
            var_j_30 = t_check_b_8
        ));
flatten_fun_j_57 = fun bj_null_j_2 -> (
    bool_j_33 = false;
    fail_b_1 = bool_j_33;
    flatten_fun_j_42 = fun expr_b_0 -> (
        var_j_34 = expr_b_0;
        m_match_bool_j_36 = var_j_34 ~ any;
        m_match_bool_j_39 = var_j_34 ~ int;
        m_match_cond_j_40 = m_match_bool_j_39 ? (
                bool_j_41 = true
            ) : (
                m_match_cond_j_37 = m_match_bool_j_36 ? (
                        var_j_38 = fail_b_1
                    ) : (
                        void_j_35 = {}
                    )
            ));
    flatten_fun_j_44 = fun bj_null_j_0 -> (
        input_j_43 = input);
    record_j_45 = {checker = flatten_fun_j_42, generator = flatten_fun_j_44};
    proj_j_46 = record_j_45.generator;
    int_j_47 = 0;
    appl_j_48 = proj_j_46 int_j_47;
    candidate_b_3 = appl_j_48;
    flatten_fun_j_50 = fun a_j_1 -> (
        bool_j_49 = false);
    var_j_51 = candidate_b_3;
    appl_j_52 = flatten_fun_j_50 var_j_51;
    if_j_56 = appl_j_52 ? (
            var_j_53 = candidate_b_3
        ) : (
            bool_j_54 = false;
            assume_j_55 = assume bool_j_54
        ));
record_j_58 = {checker = flatten_fun_j_32, generator = flatten_fun_j_57};
proj_j_59 = record_j_58.checker;
appl_j_61 = proj_j_59 test_b_11;
check_res_b_12 = appl_j_61;
if_j_69 = check_res_b_12 ? (
        var_j_63 = test
    ) : (
        error_var_j_64 = check_res_b_12;
        assert_pred_j_65 = error_var_j_64;
        assert_res_j_66 = assert_pred_j_65 ? (
                assert_res_true_j_67 = {}
            ) : (
                ab_j_68 = abort
            )
    );
i_result = if_j_69