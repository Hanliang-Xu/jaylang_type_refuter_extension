# This program just has a tricky recursive sum to solve. All branches can be hit.
# There are two inputs:
# x tries to be the sum of the recursive function.
# y gives the number of times the recursive function runs.
# If y is really large or is negative, this could time out. Currently, further runs handle this, I think.
# ^ Though I had one run that led to w1 false is unsatisfiable, which is incorrect. I need to look into this.


other_zero = 0;
x = input;
# y = input; # TODO: handle timeouts
y = 6; # patch
f = fun s -> (
    f0 = fun ra -> (
        fc = fun rc -> (
            a = ra.val;
            other_one_a = 0;
            b = a == other_one_a;
            r = b ? (
                    r1 = 0
                ) : (
                    tc = other_zero < x;
                    w1 = tc ? (
                        ss = s s;
                        other_one_b = 1;
                        v = a - other_one_b;
                        rv = {val = v};
                        sv2 = ss rv;
                        v2 = sv2 other_zero;
                        r2 = a + v2
                    ) : (
                        wff = 2;
                    )
                );
        );
    );
);
ff = f f;
ry = { val = y };
zz = ff ry;
z = zz other_zero;
c = x == z;
e = c ? (
    target = 42
) : (
    void = 0
)
