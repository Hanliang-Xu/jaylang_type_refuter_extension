i_first = {};
flatten_fun_j_29 = fun sum_j_0 -> (
    flatten_fun_j_28 = fun x -> (
        var_j_13 = sum_j_0;
        var_j_14 = sum_j_0;
        appl_j_15 = var_j_13 var_j_14;
        sum = appl_j_15;
        var_j_16 = x;
        int_j_17 = 0;
        binop_j_18 = var_j_16 <= int_j_17;
        if_j_27 = binop_j_18 ? (
                int_j_19 = 0
            ) : (
                var_j_20 = x;
                var_j_21 = sum;
                var_j_22 = x;
                int_j_23 = 1;
                binop_j_24 = var_j_22 - int_j_23;
                appl_j_25 = var_j_21 binop_j_24;
                binop_j_26 = var_j_20 + appl_j_25
            )));
appl_j_32 = flatten_fun_j_29 flatten_fun_j_29;
main_j_135 = fun n -> (
    flatten_fun_j_132 = fun n_b_0 -> (
        int_j_33 = 0;
        input_j_34 = input;
        binop_j_35 = int_j_33 < input_j_34;
        if_j_55 = binop_j_35 ? (
                bool_j_36 = false;
                fail_b_6 = bool_j_36;
                flatten_fun_j_45 = fun expr_b_5 -> (
                    var_j_37 = expr_b_5;
                    m_match_bool_j_39 = var_j_37 ~ any;
                    m_match_bool_j_42 = var_j_37 ~ int;
                    m_match_cond_j_43 = m_match_bool_j_42 ? (
                            bool_j_44 = true
                        ) : (
                            m_match_cond_j_40 = m_match_bool_j_39 ? (
                                    var_j_41 = fail_b_6
                                ) : (
                                    void_j_38 = {}
                                )
                        ));
                flatten_fun_j_47 = fun bj_null_j_5 -> (
                    input_j_46 = input);
                flatten_fun_j_49 = fun expr_b_7 -> (
                    var_j_48 = expr_b_7);
                record_j_50 = {checker = flatten_fun_j_45, generator = flatten_fun_j_47, wrapper = flatten_fun_j_49};
                proj_j_51 = record_j_50.checker;
                var_j_52 = n_b_0;
                appl_j_53 = proj_j_51 var_j_52
            ) : (
                bool_j_54 = true
            );
        arg_check_b_1 = if_j_55;
        var_j_56 = arg_check_b_1;
        if_j_131 = var_j_56 ? (
                flatten_fun_j_88 = fun expr_b_15 -> (
                    bool_j_57 = false;
                    fail_b_13 = bool_j_57;
                    flatten_fun_j_66 = fun expr_b_12 -> (
                        var_j_58 = expr_b_12;
                        m_match_bool_j_60 = var_j_58 ~ any;
                        m_match_bool_j_63 = var_j_58 ~ int;
                        m_match_cond_j_64 = m_match_bool_j_63 ? (
                                bool_j_65 = true
                            ) : (
                                m_match_cond_j_61 = m_match_bool_j_60 ? (
                                        var_j_62 = fail_b_13
                                    ) : (
                                        void_j_59 = {}
                                    )
                            ));
                    flatten_fun_j_68 = fun bj_null_j_6 -> (
                        input_j_67 = input);
                    flatten_fun_j_70 = fun expr_b_14 -> (
                        var_j_69 = expr_b_14);
                    record_j_71 = {checker = flatten_fun_j_66, generator = flatten_fun_j_68, wrapper = flatten_fun_j_70};
                    proj_j_72 = record_j_71.checker;
                    var_j_73 = expr_b_15;
                    appl_j_74 = proj_j_72 var_j_73;
                    t_check_b_16 = appl_j_74;
                    var_j_75 = t_check_b_16;
                    if_j_87 = var_j_75 ? (
                            bool_j_76 = false;
                            pred_check_b_17 = bool_j_76;
                            flatten_fun_j_80 = fun i_j_7 -> (
                                int_j_77 = 100;
                                var_j_78 = i_j_7;
                                binop_j_79 = int_j_77 <= var_j_78);
                            var_j_81 = expr_b_15;
                            appl_j_82 = flatten_fun_j_80 var_j_81;
                            if_j_85 = appl_j_82 ? (
                                    bool_j_83 = true
                                ) : (
                                    var_j_84 = pred_check_b_17
                                )
                        ) : (
                            var_j_86 = t_check_b_16
                        ));
                flatten_fun_j_117 = fun bj_null_j_10 -> (
                    bool_j_89 = false;
                    fail_b_9 = bool_j_89;
                    flatten_fun_j_98 = fun expr_b_8 -> (
                        var_j_90 = expr_b_8;
                        m_match_bool_j_92 = var_j_90 ~ any;
                        m_match_bool_j_95 = var_j_90 ~ int;
                        m_match_cond_j_96 = m_match_bool_j_95 ? (
                                bool_j_97 = true
                            ) : (
                                m_match_cond_j_93 = m_match_bool_j_92 ? (
                                        var_j_94 = fail_b_9
                                    ) : (
                                        void_j_91 = {}
                                    )
                            ));
                    flatten_fun_j_100 = fun bj_null_j_8 -> (
                        input_j_99 = input);
                    flatten_fun_j_102 = fun expr_b_10 -> (
                        var_j_101 = expr_b_10);
                    record_j_103 = {checker = flatten_fun_j_98, generator = flatten_fun_j_100, wrapper = flatten_fun_j_102};
                    proj_j_104 = record_j_103.generator;
                    int_j_105 = 0;
                    appl_j_106 = proj_j_104 int_j_105;
                    candidate_b_11 = appl_j_106;
                    flatten_fun_j_110 = fun i_j_9 -> (
                        int_j_107 = 100;
                        var_j_108 = i_j_9;
                        binop_j_109 = int_j_107 <= var_j_108);
                    var_j_111 = candidate_b_11;
                    appl_j_112 = flatten_fun_j_110 var_j_111;
                    if_j_116 = appl_j_112 ? (
                            var_j_113 = candidate_b_11
                        ) : (
                            bool_j_114 = false;
                            assume_j_115 = assume bool_j_114
                        ));
                flatten_fun_j_119 = fun expr_b_18 -> (
                    var_j_118 = expr_b_18);
                record_j_120 = {checker = flatten_fun_j_88, generator = flatten_fun_j_117, wrapper = flatten_fun_j_119};
                proj_j_121 = record_j_120.wrapper;
                var_j_122 = appl_j_32;
                var_j_123 = n;
                appl_j_124 = var_j_122 var_j_123;
                appl_j_125 = proj_j_121 appl_j_124
            ) : (
                var_j_126 = arg_check_b_1;
                assert_pred_j_127 = var_j_126;
                assert_res_j_128 = assert_pred_j_127 ? (
                        assert_res_true_j_129 = {}
                    ) : (
                        ab_j_130 = abort
                    )
            ));
    var_j_133 = n;
    appl_j_134 = flatten_fun_j_132 var_j_133);
main = main_j_135;
bool_j_136 = false;
fail_b_3 = bool_j_136;
flatten_fun_j_145 = fun expr_b_2 -> (
    var_j_137 = expr_b_2;
    m_match_bool_j_139 = var_j_137 ~ any;
    m_match_bool_j_142 = var_j_137 ~ int;
    m_match_cond_j_143 = m_match_bool_j_142 ? (
            bool_j_144 = true
        ) : (
            m_match_cond_j_140 = m_match_bool_j_139 ? (
                    var_j_141 = fail_b_3
                ) : (
                    void_j_138 = {}
                )
        ));
flatten_fun_j_147 = fun bj_null -> (
    input_j_146 = input);
flatten_fun_j_149 = fun expr_b_4 -> (
    var_j_148 = expr_b_4);
record_j_150 = {checker = flatten_fun_j_145, generator = flatten_fun_j_147, wrapper = flatten_fun_j_149};
proj_j_151 = record_j_150.generator;
int_j_152 = 0;
appl_j_153 = proj_j_151 int_j_152;
n_b_30 = appl_j_153;
flatten_fun_j_185 = fun expr_b_26 -> (
    bool_j_154 = false;
    fail_b_24 = bool_j_154;
    flatten_fun_j_163 = fun expr_b_23 -> (
        var_j_155 = expr_b_23;
        m_match_bool_j_157 = var_j_155 ~ any;
        m_match_bool_j_160 = var_j_155 ~ int;
        m_match_cond_j_161 = m_match_bool_j_160 ? (
                bool_j_162 = true
            ) : (
                m_match_cond_j_158 = m_match_bool_j_157 ? (
                        var_j_159 = fail_b_24
                    ) : (
                        void_j_156 = {}
                    )
            ));
    flatten_fun_j_165 = fun bj_null_j_1 -> (
        input_j_164 = input);
    flatten_fun_j_167 = fun expr_b_25 -> (
        var_j_166 = expr_b_25);
    record_j_168 = {checker = flatten_fun_j_163, generator = flatten_fun_j_165, wrapper = flatten_fun_j_167};
    proj_j_169 = record_j_168.checker;
    var_j_170 = expr_b_26;
    appl_j_171 = proj_j_169 var_j_170;
    t_check_b_27 = appl_j_171;
    var_j_172 = t_check_b_27;
    if_j_184 = var_j_172 ? (
            bool_j_173 = false;
            pred_check_b_28 = bool_j_173;
            flatten_fun_j_177 = fun i -> (
                int_j_174 = 100;
                var_j_175 = i;
                binop_j_176 = int_j_174 <= var_j_175);
            var_j_178 = expr_b_26;
            appl_j_179 = flatten_fun_j_177 var_j_178;
            if_j_182 = appl_j_179 ? (
                    bool_j_180 = true
                ) : (
                    var_j_181 = pred_check_b_28
                )
        ) : (
            var_j_183 = t_check_b_27
        ));
flatten_fun_j_214 = fun bj_null_j_4 -> (
    bool_j_186 = false;
    fail_b_20 = bool_j_186;
    flatten_fun_j_195 = fun expr_b_19 -> (
        var_j_187 = expr_b_19;
        m_match_bool_j_189 = var_j_187 ~ any;
        m_match_bool_j_192 = var_j_187 ~ int;
        m_match_cond_j_193 = m_match_bool_j_192 ? (
                bool_j_194 = true
            ) : (
                m_match_cond_j_190 = m_match_bool_j_189 ? (
                        var_j_191 = fail_b_20
                    ) : (
                        void_j_188 = {}
                    )
            ));
    flatten_fun_j_197 = fun bj_null_j_2 -> (
        input_j_196 = input);
    flatten_fun_j_199 = fun expr_b_21 -> (
        var_j_198 = expr_b_21);
    record_j_200 = {checker = flatten_fun_j_195, generator = flatten_fun_j_197, wrapper = flatten_fun_j_199};
    proj_j_201 = record_j_200.generator;
    int_j_202 = 0;
    appl_j_203 = proj_j_201 int_j_202;
    candidate_b_22 = appl_j_203;
    flatten_fun_j_207 = fun i_j_3 -> (
        int_j_204 = 100;
        var_j_205 = i_j_3;
        binop_j_206 = int_j_204 <= var_j_205);
    var_j_208 = candidate_b_22;
    appl_j_209 = flatten_fun_j_207 var_j_208;
    if_j_213 = appl_j_209 ? (
            var_j_210 = candidate_b_22
        ) : (
            bool_j_211 = false;
            assume_j_212 = assume bool_j_211
        ));
flatten_fun_j_216 = fun expr_b_29 -> (
    var_j_215 = expr_b_29);
record_j_217 = {checker = flatten_fun_j_185, generator = flatten_fun_j_214, wrapper = flatten_fun_j_216};
proj_j_218 = record_j_217.checker;
appl_j_221 = main n_b_30;
appl_j_222 = proj_j_218 appl_j_221;
check_res_b_31 = appl_j_222;
if_j_230 = check_res_b_31 ? (
        var_j_224 = main
    ) : (
        error_var_j_225 = check_res_b_31;
        assert_pred_j_226 = error_var_j_225;
        assert_res_j_227 = assert_pred_j_226 ? (
                assert_res_true_j_228 = {}
            ) : (
                ab_j_229 = abort
            )
    );
i_result = if_j_230