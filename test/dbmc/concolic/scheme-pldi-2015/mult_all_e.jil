i_first = {};
flatten_fun_j_38 = fun mult_j_0 -> (
    flatten_fun_j_37 = fun x -> (
        flatten_fun_j_36 = fun y -> (
            var_j_15 = mult_j_0;
            var_j_16 = mult_j_0;
            appl_j_17 = var_j_15 var_j_16;
            mult = appl_j_17;
            var_j_18 = x;
            int_j_19 = 0;
            binop_j_20 = var_j_18 <= int_j_19;
            var_j_21 = y;
            int_j_22 = 0;
            binop_j_23 = var_j_21 <= int_j_22;
            binop_j_24 = binop_j_20 or binop_j_23;
            if_j_35 = binop_j_24 ? (
                    int_j_25 = 0
                ) : (
                    var_j_26 = x;
                    var_j_27 = mult;
                    var_j_28 = x;
                    appl_j_29 = var_j_27 var_j_28;
                    var_j_30 = y;
                    int_j_31 = 1;
                    binop_j_32 = var_j_30 - int_j_31;
                    appl_j_33 = appl_j_29 binop_j_32;
                    binop_j_34 = var_j_26 + appl_j_33
                ))));
appl_j_41 = flatten_fun_j_38 flatten_fun_j_38;
h_j_52 = fun y_j_12 -> (
    var_j_42 = y_j_12;
    var_j_43 = y_j_12;
    binop_j_44 = var_j_42 + var_j_43;
    var_j_45 = appl_j_41;
    var_j_46 = y_j_12;
    appl_j_47 = var_j_45 var_j_46;
    var_j_48 = y_j_12;
    appl_j_49 = appl_j_47 var_j_48;
    binop_j_50 = binop_j_44 <= appl_j_49;
    b_j_11 = binop_j_50;
    var_j_51 = b_j_11);
h = h_j_52;
main_j_155 = fun n -> (
    flatten_fun_j_152 = fun n_b_0 -> (
        int_j_53 = 0;
        input_j_54 = input;
        binop_j_55 = int_j_53 < input_j_54;
        if_j_75 = binop_j_55 ? (
                bool_j_56 = false;
                fail_b_6 = bool_j_56;
                flatten_fun_j_65 = fun expr_b_5 -> (
                    var_j_57 = expr_b_5;
                    m_match_bool_j_59 = var_j_57 ~ any;
                    m_match_bool_j_62 = var_j_57 ~ int;
                    m_match_cond_j_63 = m_match_bool_j_62 ? (
                            bool_j_64 = true
                        ) : (
                            m_match_cond_j_60 = m_match_bool_j_59 ? (
                                    var_j_61 = fail_b_6
                                ) : (
                                    void_j_58 = {}
                                )
                        ));
                flatten_fun_j_67 = fun bj_null_j_5 -> (
                    input_j_66 = input);
                flatten_fun_j_69 = fun expr_b_7 -> (
                    var_j_68 = expr_b_7);
                record_j_70 = {checker = flatten_fun_j_65, generator = flatten_fun_j_67, wrapper = flatten_fun_j_69};
                proj_j_71 = record_j_70.checker;
                var_j_72 = n_b_0;
                appl_j_73 = proj_j_71 var_j_72
            ) : (
                bool_j_74 = true
            );
        arg_check_b_1 = if_j_75;
        var_j_76 = arg_check_b_1;
        if_j_151 = var_j_76 ? (
                flatten_fun_j_108 = fun expr_b_15 -> (
                    bool_j_77 = false;
                    fail_b_13 = bool_j_77;
                    flatten_fun_j_86 = fun expr_b_12 -> (
                        var_j_78 = expr_b_12;
                        m_match_bool_j_80 = var_j_78 ~ any;
                        m_match_bool_j_83 = var_j_78 ~ bool;
                        m_match_cond_j_84 = m_match_bool_j_83 ? (
                                bool_j_85 = true
                            ) : (
                                m_match_cond_j_81 = m_match_bool_j_80 ? (
                                        var_j_82 = fail_b_13
                                    ) : (
                                        void_j_79 = {}
                                    )
                            ));
                    flatten_fun_j_90 = fun bj_null_j_6 -> (
                        int_j_87 = 0;
                        input_j_88 = input;
                        binop_j_89 = int_j_87 <= input_j_88);
                    flatten_fun_j_92 = fun expr_b_14 -> (
                        var_j_91 = expr_b_14);
                    record_j_93 = {checker = flatten_fun_j_86, generator = flatten_fun_j_90, wrapper = flatten_fun_j_92};
                    proj_j_94 = record_j_93.checker;
                    var_j_95 = expr_b_15;
                    appl_j_96 = proj_j_94 var_j_95;
                    t_check_b_16 = appl_j_96;
                    var_j_97 = t_check_b_16;
                    if_j_107 = var_j_97 ? (
                            bool_j_98 = false;
                            pred_check_b_17 = bool_j_98;
                            flatten_fun_j_100 = fun b_j_7 -> (
                                var_j_99 = b_j_7);
                            var_j_101 = expr_b_15;
                            appl_j_102 = flatten_fun_j_100 var_j_101;
                            if_j_105 = appl_j_102 ? (
                                    bool_j_103 = true
                                ) : (
                                    var_j_104 = pred_check_b_17
                                )
                        ) : (
                            var_j_106 = t_check_b_16
                        ));
                flatten_fun_j_137 = fun bj_null_j_10 -> (
                    bool_j_109 = false;
                    fail_b_9 = bool_j_109;
                    flatten_fun_j_118 = fun expr_b_8 -> (
                        var_j_110 = expr_b_8;
                        m_match_bool_j_112 = var_j_110 ~ any;
                        m_match_bool_j_115 = var_j_110 ~ bool;
                        m_match_cond_j_116 = m_match_bool_j_115 ? (
                                bool_j_117 = true
                            ) : (
                                m_match_cond_j_113 = m_match_bool_j_112 ? (
                                        var_j_114 = fail_b_9
                                    ) : (
                                        void_j_111 = {}
                                    )
                            ));
                    flatten_fun_j_122 = fun bj_null_j_8 -> (
                        int_j_119 = 0;
                        input_j_120 = input;
                        binop_j_121 = int_j_119 <= input_j_120);
                    flatten_fun_j_124 = fun expr_b_10 -> (
                        var_j_123 = expr_b_10);
                    record_j_125 = {checker = flatten_fun_j_118, generator = flatten_fun_j_122, wrapper = flatten_fun_j_124};
                    proj_j_126 = record_j_125.generator;
                    int_j_127 = 0;
                    appl_j_128 = proj_j_126 int_j_127;
                    candidate_b_11 = appl_j_128;
                    flatten_fun_j_130 = fun b_j_9 -> (
                        var_j_129 = b_j_9);
                    var_j_131 = candidate_b_11;
                    appl_j_132 = flatten_fun_j_130 var_j_131;
                    if_j_136 = appl_j_132 ? (
                            var_j_133 = candidate_b_11
                        ) : (
                            bool_j_134 = false;
                            assume_j_135 = assume bool_j_134
                        ));
                flatten_fun_j_139 = fun expr_b_18 -> (
                    var_j_138 = expr_b_18);
                record_j_140 = {checker = flatten_fun_j_108, generator = flatten_fun_j_137, wrapper = flatten_fun_j_139};
                proj_j_141 = record_j_140.wrapper;
                var_j_142 = h;
                var_j_143 = n;
                appl_j_144 = var_j_142 var_j_143;
                appl_j_145 = proj_j_141 appl_j_144
            ) : (
                var_j_146 = arg_check_b_1;
                assert_pred_j_147 = var_j_146;
                assert_res_j_148 = assert_pred_j_147 ? (
                        assert_res_true_j_149 = {}
                    ) : (
                        ab_j_150 = abort
                    )
            ));
    var_j_153 = n;
    appl_j_154 = flatten_fun_j_152 var_j_153);
main = main_j_155;
bool_j_156 = false;
fail_b_3 = bool_j_156;
flatten_fun_j_165 = fun expr_b_2 -> (
    var_j_157 = expr_b_2;
    m_match_bool_j_159 = var_j_157 ~ any;
    m_match_bool_j_162 = var_j_157 ~ int;
    m_match_cond_j_163 = m_match_bool_j_162 ? (
            bool_j_164 = true
        ) : (
            m_match_cond_j_160 = m_match_bool_j_159 ? (
                    var_j_161 = fail_b_3
                ) : (
                    void_j_158 = {}
                )
        ));
flatten_fun_j_167 = fun bj_null -> (
    input_j_166 = input);
flatten_fun_j_169 = fun expr_b_4 -> (
    var_j_168 = expr_b_4);
record_j_170 = {checker = flatten_fun_j_165, generator = flatten_fun_j_167, wrapper = flatten_fun_j_169};
proj_j_171 = record_j_170.generator;
int_j_172 = 0;
appl_j_173 = proj_j_171 int_j_172;
n_b_30 = appl_j_173;
flatten_fun_j_205 = fun expr_b_26 -> (
    bool_j_174 = false;
    fail_b_24 = bool_j_174;
    flatten_fun_j_183 = fun expr_b_23 -> (
        var_j_175 = expr_b_23;
        m_match_bool_j_177 = var_j_175 ~ any;
        m_match_bool_j_180 = var_j_175 ~ bool;
        m_match_cond_j_181 = m_match_bool_j_180 ? (
                bool_j_182 = true
            ) : (
                m_match_cond_j_178 = m_match_bool_j_177 ? (
                        var_j_179 = fail_b_24
                    ) : (
                        void_j_176 = {}
                    )
            ));
    flatten_fun_j_187 = fun bj_null_j_1 -> (
        int_j_184 = 0;
        input_j_185 = input;
        binop_j_186 = int_j_184 <= input_j_185);
    flatten_fun_j_189 = fun expr_b_25 -> (
        var_j_188 = expr_b_25);
    record_j_190 = {checker = flatten_fun_j_183, generator = flatten_fun_j_187, wrapper = flatten_fun_j_189};
    proj_j_191 = record_j_190.checker;
    var_j_192 = expr_b_26;
    appl_j_193 = proj_j_191 var_j_192;
    t_check_b_27 = appl_j_193;
    var_j_194 = t_check_b_27;
    if_j_204 = var_j_194 ? (
            bool_j_195 = false;
            pred_check_b_28 = bool_j_195;
            flatten_fun_j_197 = fun b -> (
                var_j_196 = b);
            var_j_198 = expr_b_26;
            appl_j_199 = flatten_fun_j_197 var_j_198;
            if_j_202 = appl_j_199 ? (
                    bool_j_200 = true
                ) : (
                    var_j_201 = pred_check_b_28
                )
        ) : (
            var_j_203 = t_check_b_27
        ));
flatten_fun_j_234 = fun bj_null_j_4 -> (
    bool_j_206 = false;
    fail_b_20 = bool_j_206;
    flatten_fun_j_215 = fun expr_b_19 -> (
        var_j_207 = expr_b_19;
        m_match_bool_j_209 = var_j_207 ~ any;
        m_match_bool_j_212 = var_j_207 ~ bool;
        m_match_cond_j_213 = m_match_bool_j_212 ? (
                bool_j_214 = true
            ) : (
                m_match_cond_j_210 = m_match_bool_j_209 ? (
                        var_j_211 = fail_b_20
                    ) : (
                        void_j_208 = {}
                    )
            ));
    flatten_fun_j_219 = fun bj_null_j_2 -> (
        int_j_216 = 0;
        input_j_217 = input;
        binop_j_218 = int_j_216 <= input_j_217);
    flatten_fun_j_221 = fun expr_b_21 -> (
        var_j_220 = expr_b_21);
    record_j_222 = {checker = flatten_fun_j_215, generator = flatten_fun_j_219, wrapper = flatten_fun_j_221};
    proj_j_223 = record_j_222.generator;
    int_j_224 = 0;
    appl_j_225 = proj_j_223 int_j_224;
    candidate_b_22 = appl_j_225;
    flatten_fun_j_227 = fun b_j_3 -> (
        var_j_226 = b_j_3);
    var_j_228 = candidate_b_22;
    appl_j_229 = flatten_fun_j_227 var_j_228;
    if_j_233 = appl_j_229 ? (
            var_j_230 = candidate_b_22
        ) : (
            bool_j_231 = false;
            assume_j_232 = assume bool_j_231
        ));
flatten_fun_j_236 = fun expr_b_29 -> (
    var_j_235 = expr_b_29);
record_j_237 = {checker = flatten_fun_j_205, generator = flatten_fun_j_234, wrapper = flatten_fun_j_236};
proj_j_238 = record_j_237.checker;
appl_j_241 = main n_b_30;
appl_j_242 = proj_j_238 appl_j_241;
check_res_b_31 = appl_j_242;
if_j_250 = check_res_b_31 ? (
        var_j_244 = main
    ) : (
        error_var_j_245 = check_res_b_31;
        assert_pred_j_246 = error_var_j_245;
        assert_res_j_247 = assert_pred_j_246 ? (
                assert_res_true_j_248 = {}
            ) : (
                ab_j_249 = abort
            )
    );
i_result = if_j_250