i_first = {};
flatten_fun_j_28 = fun sum_j_0 -> (
    flatten_fun_j_27 = fun x -> (
        flatten_fun_j_26 = fun y -> (
            flatten_fun_j_25 = fun k -> (
                var_j_4 = sum_j_0;
                var_j_5 = sum_j_0;
                appl_j_6 = var_j_4 var_j_5;
                sum = appl_j_6;
                var_j_7 = x;
                int_j_8 = 0;
                binop_j_9 = var_j_7 <= int_j_8;
                if_j_24 = binop_j_9 ? (
                        var_j_10 = k;
                        var_j_11 = y;
                        appl_j_12 = var_j_10 var_j_11
                    ) : (
                        var_j_13 = sum;
                        var_j_14 = x;
                        int_j_15 = 1;
                        binop_j_16 = var_j_14 - int_j_15;
                        appl_j_17 = var_j_13 binop_j_16;
                        var_j_18 = x;
                        var_j_19 = y;
                        binop_j_20 = var_j_18 + var_j_19;
                        appl_j_21 = appl_j_17 binop_j_20;
                        var_j_22 = k;
                        appl_j_23 = appl_j_21 var_j_22
                    )))));
appl_j_31 = flatten_fun_j_28 flatten_fun_j_28;
check_j_39 = fun x_j_1 -> (
    int_j_32 = 100;
    var_j_33 = x_j_1;
    binop_j_34 = int_j_32 <= var_j_33;
    assert_pred_j_35 = binop_j_34;
    assert_res_j_36 = assert_pred_j_35 ? (
            assert_res_true_j_37 = {}
        ) : (
            ab_j_38 = abort
        ));
check = check_j_39;
int_j_41 = 5;
appl_j_42 = appl_j_31 int_j_41;
int_j_43 = 0;
appl_j_44 = appl_j_42 int_j_43;
appl_j_46 = appl_j_44 check;
i_result = appl_j_46