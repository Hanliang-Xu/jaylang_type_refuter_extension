i_first = {};
eq_j_14 = fun i_j_9 -> (
    flatten_fun_j_13 = fun x -> (
        var_j_10 = i_j_9;
        var_j_11 = x;
        binop_j_12 = var_j_10 == var_j_11));
eq = eq_j_14;
one_of_j_77 = fun i -> (
    flatten_fun_j_45 = fun expr_b_13 -> (
        bool_j_15 = false;
        fail_b_11 = bool_j_15;
        flatten_fun_j_24 = fun expr_b_10 -> (
            var_j_16 = expr_b_10;
            m_match_bool_j_18 = var_j_16 ~ any;
            m_match_bool_j_21 = var_j_16 ~ int;
            m_match_cond_j_22 = m_match_bool_j_21 ? (
                    bool_j_23 = true
                ) : (
                    m_match_cond_j_19 = m_match_bool_j_18 ? (
                            var_j_20 = fail_b_11
                        ) : (
                            void_j_17 = {}
                        )
                ));
        flatten_fun_j_26 = fun bj_null_j_6 -> (
            input_j_25 = input);
        flatten_fun_j_28 = fun expr_b_12 -> (
            var_j_27 = expr_b_12);
        record_j_29 = {checker = flatten_fun_j_24, generator = flatten_fun_j_26, wrapper = flatten_fun_j_28};
        proj_j_30 = record_j_29.checker;
        var_j_31 = expr_b_13;
        appl_j_32 = proj_j_30 var_j_31;
        t_check_b_14 = appl_j_32;
        var_j_33 = t_check_b_14;
        if_j_44 = var_j_33 ? (
                bool_j_34 = false;
                pred_check_b_15 = bool_j_34;
                var_j_35 = eq;
                var_j_36 = i;
                appl_j_37 = var_j_35 var_j_36;
                var_j_38 = expr_b_13;
                appl_j_39 = appl_j_37 var_j_38;
                if_j_42 = appl_j_39 ? (
                        bool_j_40 = true
                    ) : (
                        var_j_41 = pred_check_b_15
                    )
            ) : (
                var_j_43 = t_check_b_14
            ));
    flatten_fun_j_73 = fun bj_null_j_8 -> (
        bool_j_46 = false;
        fail_b_7 = bool_j_46;
        flatten_fun_j_55 = fun expr_b_6 -> (
            var_j_47 = expr_b_6;
            m_match_bool_j_49 = var_j_47 ~ any;
            m_match_bool_j_52 = var_j_47 ~ int;
            m_match_cond_j_53 = m_match_bool_j_52 ? (
                    bool_j_54 = true
                ) : (
                    m_match_cond_j_50 = m_match_bool_j_49 ? (
                            var_j_51 = fail_b_7
                        ) : (
                            void_j_48 = {}
                        )
                ));
        flatten_fun_j_57 = fun bj_null_j_7 -> (
            input_j_56 = input);
        flatten_fun_j_59 = fun expr_b_8 -> (
            var_j_58 = expr_b_8);
        record_j_60 = {checker = flatten_fun_j_55, generator = flatten_fun_j_57, wrapper = flatten_fun_j_59};
        proj_j_61 = record_j_60.generator;
        int_j_62 = 0;
        appl_j_63 = proj_j_61 int_j_62;
        candidate_b_9 = appl_j_63;
        var_j_64 = eq;
        var_j_65 = i;
        appl_j_66 = var_j_64 var_j_65;
        var_j_67 = candidate_b_9;
        appl_j_68 = appl_j_66 var_j_67;
        if_j_72 = appl_j_68 ? (
                var_j_69 = candidate_b_9
            ) : (
                bool_j_70 = false;
                assume_j_71 = assume bool_j_70
            ));
    flatten_fun_j_75 = fun expr_b_16 -> (
        var_j_74 = expr_b_16);
    record_j_76 = {checker = flatten_fun_j_45, generator = flatten_fun_j_73, wrapper = flatten_fun_j_75});
one_of = one_of_j_77;
lock_j_105 = fun st_j_5 -> (
    flatten_fun_j_102 = fun st_b_0 -> (
        int_j_78 = 0;
        input_j_79 = input;
        binop_j_80 = int_j_78 < input_j_79;
        if_j_88 = binop_j_80 ? (
                var_j_81 = one_of;
                int_j_82 = 0;
                appl_j_83 = var_j_81 int_j_82;
                proj_j_84 = appl_j_83.checker;
                var_j_85 = st_b_0;
                appl_j_86 = proj_j_84 var_j_85
            ) : (
                bool_j_87 = true
            );
        arg_check_b_1 = if_j_88;
        var_j_89 = arg_check_b_1;
        if_j_101 = var_j_89 ? (
                var_j_90 = one_of;
                int_j_91 = 1;
                appl_j_92 = var_j_90 int_j_91;
                proj_j_93 = appl_j_92.wrapper;
                int_j_94 = 1;
                appl_j_95 = proj_j_93 int_j_94
            ) : (
                var_j_96 = arg_check_b_1;
                assert_pred_j_97 = var_j_96;
                assert_res_j_98 = assert_pred_j_97 ? (
                        assert_res_true_j_99 = {}
                    ) : (
                        ab_j_100 = abort
                    )
            ));
    var_j_103 = st_j_5;
    appl_j_104 = flatten_fun_j_102 var_j_103);
lock = lock_j_105;
int_j_107 = 0;
appl_j_108 = one_of int_j_107;
proj_j_109 = appl_j_108.generator;
int_j_110 = 0;
appl_j_111 = proj_j_109 int_j_110;
st_b_23 = appl_j_111;
int_j_113 = 1;
appl_j_114 = one_of int_j_113;
proj_j_115 = appl_j_114.checker;
appl_j_118 = lock st_b_23;
appl_j_119 = proj_j_115 appl_j_118;
check_res_b_28 = appl_j_119;
if_j_277 = check_res_b_28 ? (
        unlock_j_148 = fun st_j_4 -> (
            flatten_fun_j_145 = fun st_b_2 -> (
                int_j_121 = 0;
                input_j_122 = input;
                binop_j_123 = int_j_121 < input_j_122;
                if_j_131 = binop_j_123 ? (
                        var_j_124 = one_of;
                        int_j_125 = 1;
                        appl_j_126 = var_j_124 int_j_125;
                        proj_j_127 = appl_j_126.checker;
                        var_j_128 = st_b_2;
                        appl_j_129 = proj_j_127 var_j_128
                    ) : (
                        bool_j_130 = true
                    );
                arg_check_b_3 = if_j_131;
                var_j_132 = arg_check_b_3;
                if_j_144 = var_j_132 ? (
                        var_j_133 = one_of;
                        int_j_134 = 0;
                        appl_j_135 = var_j_133 int_j_134;
                        proj_j_136 = appl_j_135.wrapper;
                        int_j_137 = 0;
                        appl_j_138 = proj_j_136 int_j_137
                    ) : (
                        var_j_139 = arg_check_b_3;
                        assert_pred_j_140 = var_j_139;
                        assert_res_j_141 = assert_pred_j_140 ? (
                                assert_res_true_j_142 = {}
                            ) : (
                                ab_j_143 = abort
                            )
                    ));
            var_j_146 = st_j_4;
            appl_j_147 = flatten_fun_j_145 var_j_146);
        unlock = unlock_j_148;
        var_j_149 = one_of;
        int_j_150 = 1;
        appl_j_151 = var_j_149 int_j_150;
        proj_j_152 = appl_j_151.generator;
        int_j_153 = 0;
        appl_j_154 = proj_j_152 int_j_153;
        st_b_24 = appl_j_154;
        var_j_155 = one_of;
        int_j_156 = 0;
        appl_j_157 = var_j_155 int_j_156;
        proj_j_158 = appl_j_157.checker;
        var_j_159 = unlock;
        var_j_160 = st_b_24;
        appl_j_161 = var_j_159 var_j_160;
        appl_j_162 = proj_j_158 appl_j_161;
        check_res_b_27 = appl_j_162;
        var_j_163 = check_res_b_27;
        if_j_271 = var_j_163 ? (
                f_j_173 = fun n_j_3 -> (
                    f_j_172 = fun st_j_2 -> (
                        int_j_164 = 0;
                        var_j_165 = n_j_3;
                        binop_j_166 = int_j_164 < var_j_165;
                        if_j_171 = binop_j_166 ? (
                                var_j_167 = lock;
                                var_j_168 = st_j_2;
                                appl_j_169 = var_j_167 var_j_168
                            ) : (
                                var_j_170 = st_j_2
                            )));
                f = f_j_173;
                g_j_183 = fun n_j_1 -> (
                    g_j_182 = fun st -> (
                        int_j_174 = 0;
                        var_j_175 = n_j_1;
                        binop_j_176 = int_j_174 <= var_j_175;
                        if_j_181 = binop_j_176 ? (
                                var_j_177 = unlock;
                                var_j_178 = st;
                                appl_j_179 = var_j_177 var_j_178
                            ) : (
                                var_j_180 = st
                            )));
                g = g_j_183;
                main_j_231 = fun n -> (
                    flatten_fun_j_228 = fun n_b_4 -> (
                        int_j_184 = 0;
                        input_j_185 = input;
                        binop_j_186 = int_j_184 < input_j_185;
                        if_j_206 = binop_j_186 ? (
                                bool_j_187 = false;
                                fail_b_21 = bool_j_187;
                                flatten_fun_j_196 = fun expr_b_20 -> (
                                    var_j_188 = expr_b_20;
                                    m_match_bool_j_190 = var_j_188 ~ any;
                                    m_match_bool_j_193 = var_j_188 ~ int;
                                    m_match_cond_j_194 = m_match_bool_j_193 ? (
                                            bool_j_195 = true
                                        ) : (
                                            m_match_cond_j_191 = m_match_bool_j_190 ? (
                                                    var_j_192 = fail_b_21
                                                ) : (
                                                    void_j_189 = {}
                                                )
                                        ));
                                flatten_fun_j_198 = fun bj_null_j_0 -> (
                                    input_j_197 = input);
                                flatten_fun_j_200 = fun expr_b_22 -> (
                                    var_j_199 = expr_b_22);
                                record_j_201 = {checker = flatten_fun_j_196, generator = flatten_fun_j_198, wrapper = flatten_fun_j_200};
                                proj_j_202 = record_j_201.checker;
                                var_j_203 = n_b_4;
                                appl_j_204 = proj_j_202 var_j_203
                            ) : (
                                bool_j_205 = true
                            );
                        arg_check_b_5 = if_j_206;
                        var_j_207 = arg_check_b_5;
                        if_j_227 = var_j_207 ? (
                                var_j_208 = one_of;
                                int_j_209 = 0;
                                appl_j_210 = var_j_208 int_j_209;
                                proj_j_211 = appl_j_210.wrapper;
                                var_j_212 = g;
                                var_j_213 = n;
                                appl_j_214 = var_j_212 var_j_213;
                                var_j_215 = f;
                                var_j_216 = n;
                                appl_j_217 = var_j_215 var_j_216;
                                int_j_218 = 0;
                                appl_j_219 = appl_j_217 int_j_218;
                                appl_j_220 = appl_j_214 appl_j_219;
                                appl_j_221 = proj_j_211 appl_j_220
                            ) : (
                                var_j_222 = arg_check_b_5;
                                assert_pred_j_223 = var_j_222;
                                assert_res_j_224 = assert_pred_j_223 ? (
                                        assert_res_true_j_225 = {}
                                    ) : (
                                        ab_j_226 = abort
                                    )
                            ));
                    var_j_229 = n;
                    appl_j_230 = flatten_fun_j_228 var_j_229);
                main = main_j_231;
                bool_j_232 = false;
                fail_b_18 = bool_j_232;
                flatten_fun_j_241 = fun expr_b_17 -> (
                    var_j_233 = expr_b_17;
                    m_match_bool_j_235 = var_j_233 ~ any;
                    m_match_bool_j_238 = var_j_233 ~ int;
                    m_match_cond_j_239 = m_match_bool_j_238 ? (
                            bool_j_240 = true
                        ) : (
                            m_match_cond_j_236 = m_match_bool_j_235 ? (
                                    var_j_237 = fail_b_18
                                ) : (
                                    void_j_234 = {}
                                )
                        ));
                flatten_fun_j_243 = fun bj_null -> (
                    input_j_242 = input);
                flatten_fun_j_245 = fun expr_b_19 -> (
                    var_j_244 = expr_b_19);
                record_j_246 = {checker = flatten_fun_j_241, generator = flatten_fun_j_243, wrapper = flatten_fun_j_245};
                proj_j_247 = record_j_246.generator;
                int_j_248 = 0;
                appl_j_249 = proj_j_247 int_j_248;
                n_b_25 = appl_j_249;
                var_j_250 = one_of;
                int_j_251 = 0;
                appl_j_252 = var_j_250 int_j_251;
                proj_j_253 = appl_j_252.checker;
                var_j_254 = main;
                var_j_255 = n_b_25;
                appl_j_256 = var_j_254 var_j_255;
                appl_j_257 = proj_j_253 appl_j_256;
                check_res_b_26 = appl_j_257;
                var_j_258 = check_res_b_26;
                if_j_265 = var_j_258 ? (
                        var_j_259 = main
                    ) : (
                        error_var_j_260 = check_res_b_26;
                        assert_pred_j_261 = error_var_j_260;
                        assert_res_j_262 = assert_pred_j_261 ? (
                                assert_res_true_j_263 = {}
                            ) : (
                                ab_j_264 = abort
                            )
                    )
            ) : (
                error_var_j_266 = check_res_b_27;
                assert_pred_j_267 = error_var_j_266;
                assert_res_j_268 = assert_pred_j_267 ? (
                        assert_res_true_j_269 = {}
                    ) : (
                        ab_j_270 = abort
                    )
            )
    ) : (
        error_var_j_272 = check_res_b_28;
        assert_pred_j_273 = error_var_j_272;
        assert_res_j_274 = assert_pred_j_273 ? (
                assert_res_true_j_275 = {}
            ) : (
                ab_j_276 = abort
            )
    );
i_result = if_j_277