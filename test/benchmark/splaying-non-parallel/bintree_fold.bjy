(***
  (
    (features (Polymorphic_types Mu_types Parametric_types Variants Records Recursive_functions))
    (speed Fast)
    (typing Exhausted)
    (flags "-s")
  )
*)

let t a = mu t.
  | `Leaf of unit
  | `Branch of
    { item : a
    ; left : t
    ; right : t }

let rec fold_left (type a acc) (f : acc -> a -> acc) (init : acc) (tree : t a) : acc =
  match tree with
  | `Leaf _ -> init
  | `Branch b ->
    fold_left a acc f (f (fold_left a acc f init b.left) b.item) b.right 
  end
