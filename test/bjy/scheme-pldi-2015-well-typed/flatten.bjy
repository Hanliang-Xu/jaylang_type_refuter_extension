(***
  (
    (features (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (reasons (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (speed <Fast or Slow>)
    (typing <Well_typed or Ill_typed>)
  )
*)
(*** (
  (features (Polymorphic_types Variants Recursive_functions Mu_types Match))
) *)
(* flatten the input down to just a list of ints and bools *)

let any_type a = Mu t.
  | `L of list t
  | `A of a

let rec append a b =
  match a with
  | [] -> b
  | hd :: tl -> hd :: append tl b
  end

let rec flatten (type a_) (x : any_type a_) : list a_ =
  match x with
  | `L ls ->
    match ls with
    | [] -> []
    | hd :: tl -> append (flatten a_ hd) (flatten a_ (`L tl))
    end
  | `A a -> [ a ]
  end
