(***
  (
    (features (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (reasons (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (speed <Fast or Slow>)
    (typing <Well_typed or Ill_typed>)
  )
*)
(*** (
  (features (Recursive_functions Refinement_types Dependent_types Match))
) *)
(* type-error is that mk_list should contain x; but it doesn't *)

let rec mem x xs =
  match xs with
  | [] -> false
  | hd :: tl -> hd == x || mem x tl
  end

let ret_type x =
  { l : list int |
    match l with  
    | [] -> true
    | a :: b -> mem x l
    end
  }

let rec mk_list (x <- int) (n : int) : ret_type x = 
  if n < 0
  then []
  else x :: mk_list x (n - 1)
