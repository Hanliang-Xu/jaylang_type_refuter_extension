(***
  (
    (features (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (reasons (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (speed <Fast or Slow>)
    (typing <Well_typed or Ill_typed>)
  )
*)
(*** (
  (features (Recursive_functions Return_type Match))
) *)
(* type-error is base case doesn't return bool *)
(* issues: we don't have polymorphic equals; so this must be int when it used to be any (i.e. 'a) *)

let rec member (x : int) (l : list int) : bool =
  match l with
  | [] -> false
  | hd :: tl ->
    if x == hd
    then true
    else member x tl
  end
