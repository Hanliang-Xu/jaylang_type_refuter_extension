(***
  (
    (features (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (reasons (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (speed <Fast or Slow>)
    (typing <Well_typed or Ill_typed>)
  )
*)
(*** (
  (features (Recursive_functions Higher_order_functions Refinement_types Wrap_required))
) *)
(* This is one well-typed version of `hors` *)

let c x = {}

let b x =
  fun y ->
    x 1

let a (x : int -> unit) (y : int -> unit) (q : int) : unit =
  let _ = x 0 in
  y 0

let rec f n x q =
  if n <= 0
  then x q
  else a x (fun p -> f (n - 1) (fun dummy -> b x dummy) p) q

let s n q =
  f n c q

let main (n : int) : unit =
  s n n
