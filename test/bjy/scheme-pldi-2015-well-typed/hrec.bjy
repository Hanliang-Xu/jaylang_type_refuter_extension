(***
  (
    (features (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (reasons (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (speed <Fast or Slow>)
    (typing <Well_typed or Ill_typed>)
  )
*)
(*** (
  (features (Recursive_functions Higher_order_functions Refinement_types))
) *)
(* error is fixed when `n` param for `main` is non-negative *)

let rec f g x =
  if x <= 0
  then g x
  else f (fun x -> f g x) (g x)

let main (n : { i : int | i >= 0 }) : { i : int | i >= 0 } =
  f (fun x -> x + 1) n
