(***
  (
    (features (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (reasons (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (speed <Fast or Slow>)
    (typing <Well_typed or Ill_typed>)
  )
*)
(*** (
  (features (Polymorphic_types Recursive_functions Higher_order_functions Assertions Match))
) *)
(* error is that input list xs should be nonempty *)

let is_nonempty ls =
  match ls with
  | [] -> false
  | _ -> true
  end

let rec foldl1 (type a_) (f : a_ -> a_ -> a_) (xs : { list a_ | is_nonempty } ) : a_ =
  match xs with
  | z :: zs ->
    match zs with 
    | [] -> z
    | z1 :: tl -> foldl1 a_ f ((f z z1) :: tl)
    end
  end
