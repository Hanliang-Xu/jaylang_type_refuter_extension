(***
  (
    (features (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (reasons (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (speed <Fast or Slow>)
    (typing <Well_typed or Ill_typed>)
  )
*)
(*** (
  (features (Recursive_functions Assertions Match))
) *)
(* error is tries to get hd of list that is made from "negative length" *)

let rec reverse l ac =
  match l with
  | [] -> ac
  | hd :: tl -> reverse tl (hd :: ac)
  end

let rec mk_list n =
  if n < 0
  then []
  else n :: mk_list (n - 1)

let main (len : int) : int =
  let xs = mk_list len in
  if not (len < 0)
  then
    match reverse xs [] with
    | hd :: _ -> hd
    end
  else
    0
