(***
  (
    (features (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (reasons (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (speed <Fast or Slow>)
    (typing <Well_typed or Ill_typed>)
  )
*)
(*** (
  (features (Refinement_types Wrap_required))
) *)
(* error is 0 `n` arg to `main` means `g` tries to unclock and already-unlocked state *)

let eq i =
  fun x ->
    i == x

let one_of i =
  { int | eq i }

let lock (st : one_of 0) : one_of 1 = 1

let unlock (st : one_of 1) : one_of 0 = 0

let f n st =
  if n > 0
  then lock st
  else st

let g n st =
  if n > 0
  then unlock st
  else st

let main (n : int) : one_of 0 =
  g n (f n 0)
