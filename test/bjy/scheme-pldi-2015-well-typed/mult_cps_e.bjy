(***
  (
    (features (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (reasons (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (speed <Fast or Slow>)
    (typing <Well_typed or Ill_typed>)
  )
*)
(*** (
  (features (Recursive_functions Higher_order_functions Assertions))
) *)

let acc z m =
  fun r -> m (z + r)

let rec mult x y k =
  if x <= 0 || y <= 0
  then k 0
  else x + mult x (y - 1) (acc x k)

let check w =
  let _ = assert true in
  w

let main (n : int) : int =
  mult 100 n check
