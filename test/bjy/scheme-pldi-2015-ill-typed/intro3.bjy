(***
  (
    (features (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (reasons (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (speed <Fast or Slow>)
    (typing <Well_typed or Ill_typed>)
  )
*)
(*** (
  (features (Higher_order_functions Refinement_types Dependent_types Wrap_required))
  (reasons (Refinement_types Wrap_required))
  (speed Fast)
  (typing Ill_typed)
) *)

let f x g =
  g (x + 1)

let h (z <- int) (y : { y : int | z > y }) : unit = (* ERROR: should be `z < y` instead of other way around *)
  {}

let main (n : int) : unit =
  if n > 0
  then f n (h n)
  else {}
