(***
  (
    (features (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (reasons (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (speed <Fast or Slow>)
    (typing <Well_typed or Ill_typed>)
  )
*)
(*** (
  (features (Recursive_functions Higher_order_functions Refinement_types Match))
  (reasons (Recursive_functions Refinement_types))
  (speed Fast)
  (typing Ill_typed)
) *)

let rec mk_list n =
  if n <= 0
  then []   
  else (fun m -> m - n) :: mk_list (n - 1) (* ERROR: be `m + n` instead of `m - n` *)

let rec foldr f z xs =
  match xs with
  | [] -> z
  | x :: xss -> f x (foldr f z xss)
  end

let compose f g =
  fun x ->
    f (g x)

let main (n : int) : { int -> int | fun f -> f 0 >= 0 } =
  let xs = mk_list n in
  foldr compose (fun x -> x) xs
