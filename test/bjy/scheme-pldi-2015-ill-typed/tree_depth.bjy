
let t = Mu tt.
  ``Node { left : tt ; right : tt }
  || ``Leaf { leaf : bool }

let max x y =
  if x > y
  then x
  else y

let rec depth (tree : t) : { i : int | i > 0 } =
  match tree with
  | `Leaf leaf -> 0 (* ERROR: should be `1` or change predicate above s.t. returned int is non-negative *)
  | `Node node -> 1 + max (depth node.left) (depth node.right)
  end
