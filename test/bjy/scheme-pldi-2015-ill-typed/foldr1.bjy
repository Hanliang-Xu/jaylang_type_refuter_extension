(***
  (
    (features (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (reasons (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (speed <Fast or Slow>)
    (typing <Well_typed or Ill_typed>)
  )
*)
(*** (
  (features (Polymorphic_types Recursive_functions Higher_order_functions Assertions Match))
  (reasons (Assertions))
  (speed Fast)
  (typing Ill_typed)
) *)
(* error is that xs should be nonempty *)

let rec foldr1 (type a_) (f : a_ -> a_ -> a_) (xs : list a_) : a_ =
  match xs with
  | z :: zs ->
    match zs with
    | [] -> z
    | _ -> f z (foldr1 a_ f zs)
    end
  (* ERROR: xs chould be empty *)
  end
