(***
  (
    (features (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (reasons (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (speed <Fast or Slow>)
    (typing <Well_typed or Ill_typed>)
  )
*)
(*** (
  (features (Recursive_functions Assertions))
  (reasons (Assertions))
  (speed Fast)
  (typing Ill_typed)
) *)
(* error is because we can look at assert as `assert : { bool | fun b -> b } -> 'a` *)

let h x =
  assert x

let g x y =
  assert y

let rec f x y =
  if x
  then f y y (* ERROR: this is f false false => g false false => assert false *)
  else g x y

let main =
  if 0 < 1
  then f (0 < 1) (1 < 0)
  else h (1 < 0)
