(***
  (
    (features (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (reasons (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (speed <Fast or Slow>)
    (typing <Well_typed or Ill_typed>)
  )
*)
(*** (
  (features (Recursive_functions Higher_order_functions Refinement_types Wrap_required))
  (reasons (Refinement_types Higher_order_functions Wrap_required))
  (speed Fast)
  (typing Ill_typed)
) *)

let c x = {}

let b x =
  fun y ->
    x 1

let a (x : int -> unit) (y : int -> unit) (q : { i : int | i == 0 }) : unit =
  let _ = x 0 in
  y 0

let rec f n x q =
  if n <= 0
  then x q
  else a x (fun p -> f (n - 1) (fun ignore -> b x ignore) p) q
  (* ERROR: `p` in this needs to be zero because is `q` in next recursive level; but it is checked against `x : int -> unit`; so is checked with nonzero `p`. *)
  (* i.e. to be well-typed; we need instead `q` can be any int; or `x` has type `{ int | fun i -> i == 0 } -> unit` *)

let s n q =
  f n c q

let main (n : int) : unit =
  s n n
