(***
  (
    (features (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (reasons (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (speed <Fast or Slow>)
    (typing <Well_typed or Ill_typed>)
  )
*)
(*** (
  (features (Recursive_functions Refinement_types Match))
) *)

let rec makelist n = 
  if n == 0 then []
  else n :: (makelist (n-1))

let getHead l = 
  match l with
  | hd :: _ -> hd
  end

let main (n : { a : int | a > 0}) : { a : int | a > 0} =
  let l = makelist n in
  if n > 0 then getHead l
  else 0
    