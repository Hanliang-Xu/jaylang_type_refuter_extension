(***
  (
    (features (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (reasons (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (speed <Fast or Slow>)
    (typing <Well_typed or Ill_typed>)
  )
*)
(*** (
  (features (Variants Mu_types Records))
) *)

let tree_type = Mu t.
  | `Node of { left : t; right : t }
  | `Leaf of { leaf : int }

let x : tree_type = 
  `Node { left = `Leaf { leaf = 0 } ; right = `Leaf { leaf = 0 } }
