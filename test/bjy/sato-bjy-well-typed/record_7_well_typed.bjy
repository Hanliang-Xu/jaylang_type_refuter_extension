(***
  (
    (features (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (reasons (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (speed <Fast or Slow>)
    (typing <Well_typed or Ill_typed>)
  )
*)
(*** (
  (features (Refinement_types Records))
) *)

let notPos n = n <= 0

let record_constraint re = 
  (notPos re.b) &&
  ((re.a + re.b) >= 0)

let isTrue b = b

let test (test_record : { { a : int; b : int } | record_constraint }) : { bool | isTrue } =
  test_record.a >= 0 
