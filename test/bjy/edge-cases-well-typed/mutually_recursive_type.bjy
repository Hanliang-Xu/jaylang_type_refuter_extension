(***
  (
    (features (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (reasons (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (speed <Fast or Slow>)
    (typing <Well_typed or Ill_typed>)
  )
*)
(*** (
  (speed Fast)
  (typing Well_typed)
)*)

(*
  `t` is hard to find with trivial translation.
  We want to be able to type this.
*)

let rec f (x : int) : t {} =
  x

and t _ = int


(*
  A more practical example that tests the same thing is this mutually
  recursive refinement.
*)

let rec g (x : int) : { int | h } =
  x * x + 1

and h (i : int) : bool =
  i > 0
