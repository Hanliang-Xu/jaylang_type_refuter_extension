(***
  (
    (features (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (reasons (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (speed <Fast or Slow>)
    (typing <Well_typed or Ill_typed>)
  )
*)
(*** (
  (features (Recursive_functions Higher_order_functions Subtyping Refinement_types Wrap_required))
) *)

let zero_type : type = { i : int | i == 0 }

(* ignored arg must be 0. Applies 0 to g *)
let appl_zero (g : zero_type -> bool) (_ : zero_type) : bool =
  g 0

let rec f n zero_arg =
  if n <= 0
  then true
  else appl_zero (f (n - 1)) zero_arg

let main (n : int) : bool =
  f n 0