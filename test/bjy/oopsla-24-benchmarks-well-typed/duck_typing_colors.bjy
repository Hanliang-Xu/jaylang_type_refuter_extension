(***
  (
    (features (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (reasons (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (speed <Fast or Slow>)
    (typing <Well_typed or Ill_typed>)
  )
*)
(*** (
  (features (Higher_order_functions OOP_style Refinement_types Dependent_types Records))
) *)

let T = sig
  val t : type
end

let Color : T = struct
  let t = { int | fun i -> i >= 0 && i < 256 }
end

let Point : T = struct
  let t =
    { x : int
    ; y : int
    ; get_deg : unit -> int
    }
end

let Colored_point : T = struct
  let t =
    { x : int
    ; y : int
    ; get_deg : unit -> int
    ; c : Color.t }
end

let obj : Colored_point.t =
  let ob =
    fun self ->
      { x = 10
      ; y = 20
      ; get_deg = 
        fun _ ->
          let s = (self self) in
          let tan = s.y / s.x in
          tan - (tan * tan * tan) / 3 + (tan * tan * tan * tan * tan) / 5 (* approx arctan with taylor expansion *)
      ; c = 255 }
  in
  ob ob

let get_color (p : Colored_point.t) : Color.t =
  p.c

let result = get_color obj
