(***
  (
    (features (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (reasons (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (speed <Fast or Slow>)
    (typing <Well_typed or Ill_typed>)
  )
*)
(*** (
  (features (Polymorphic_types Higher_order_functions Records Wrap_required Match))
) *)
(* Continuation monad *)

let (t : type -> type -> type) = fun a r -> { continuation : (a -> r) -> r }

let bind (type a_ b_ r_) (ar_r : t a_ r_) : (a_ -> t b_ r_) -> t b_ r_ =
  fun a_br_r ->
    { continuation = 
      fun br -> ar_r.continuation (fun a -> (a_br_r a).continuation br)
    }

let int_bind (type b_ r_) (i_br_r : int -> t b_ r_) : t b_ r_ =
  bind int b_ r_ { continuation = fun ir -> ir 0 } i_br_r
      