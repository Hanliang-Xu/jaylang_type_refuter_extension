
(*
  This test is not from OCaml's typing suite. It is from here:
    testsuite/tests/functors/functors.ml
*)

(*
module type S = sig
  val foo : int -> int
end

module O (X : S) = struct
  let cow x = X.foo x
  let sheep x = 1 + cow x
end [@@inline always]

module F (X : S) (Y : S) = struct
  let cow x = Y.foo (X.foo x)
  let sheep x = 1 + cow x
end [@@inline always]

module type S1 = sig
  val bar : int -> int
  val foo : int -> int
end

module type T = sig
  val sheep : int -> int
end

module F1 (X : S) (Y : S) : T = struct
  let cow x = Y.foo (X.foo x)
  let sheep x = 1 + cow x
end [@@inline always]

module F2 : S1 -> S1 -> T = functor (X : S) -> functor (Y : S) -> struct
  let cow x = Y.foo (X.foo x)
  let sheep x = 1 + cow x
end [@@inline always]

module M : sig
  module F (X : S1) (Y : S1) : T
end = struct
  module F (X : S) (Y : S) = struct
    let cow x = Y.foo (X.foo x)
    let sheep x = 1 + cow x
  end [@@inline always]
end
*)

let S = sig
  val foo : int -> int
end

let O (X : S) : sig
  val cow : int -> int
  val sheep : int -> int
end = struct
  let cow x = X.foo x
  let sheep x = 1 + cow x
end

let F (X : S) (Y : S) : sig
  val cow : int -> int
  val sheep : int -> int
end = struct
  let cow x = Y.foo (X.foo x)
  let sheep x = 1 + cow x
end

let S1 = sig
  val bar : int -> int
  val foo : int -> int
end

let T = sig
  val sheep : int -> int
end

let F1 (X : S) (Y : S) : T = struct
  let cow x = Y.foo (X.foo x)
  let sheep x = 1 + cow x
end

let F2 : S1 -> S1 -> T =
  let F2 (X : S) (Y : S) : sig
    val cow : int -> int
    val sheep : int -> int
  end = struct
    let cow x = Y.foo (X.foo x)
    let sheep x = 1 + cow x
  end
  in
  F2

let M : sig
  val F : (X : S1) -> (Y : S1) -> T
end = struct
  let F (X : S) (Y : S) : sig
    val cow : int -> int
    val sheep : int -> int
  end = struct
    let cow x = Y.foo (X.foo x)
    let sheep x = 1 + cow x
  end
end
