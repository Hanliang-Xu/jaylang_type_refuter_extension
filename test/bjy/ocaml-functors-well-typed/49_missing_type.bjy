(***
  (
    (speed Fast)
    (typing Exhausted)
    (flags "")
  )
*)

(*
module G
    (A : sig type 'a t = 'a * 'a end)
    (B : sig
       val f : 'a A.t -> 'a
     end) =
struct end

module R = G(struct end)(struct let f (x,_) = x end)
*)

let G
  (dependent A : sig val t : (a : type) --> singletype { fst : a ; snd : a } end)
  (dependent B : sig val f : (a : type) -> A.t a -> a end)
  : sig end =
  struct end

let R = G(struct let t a = { fst : a ; snd : a } end)(struct let f _ x = x.fst end)
