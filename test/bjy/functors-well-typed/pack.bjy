(***
  (
    (features (Polymorphic_types Dependent_types Modules Parametric_types Deterministic_functions Variants))
    (speed Fast)
    (typing Well_typed)
  )
*)

let S = sig
  val x : type --> type
  val t =
    | `I of x int
    | `B of x bool
  val compare : t -> t -> int
end

(*
  We don't have destructive substitution like we might write in OCaml:
    ... -> S with type 'a x := 'a X.t
  so I just leave it unconstrained. We do have singlet, but it doesn't work
  with higher kinded types like `X.t`.
*)
let Make : (X : sig val t : type --> type val compare : (a : type) -> t a -> t a -> int end) -> S =
  fun X -> struct
    let x = X.t

    let t = 
      | `I of X.t int
      | `B of X.t bool

    let compare a b =
      match a with
      | `I axi ->
        match b with
        | `I bxi -> X.compare int axi bxi
        | `B _ -> 0 - 1 
        end
      | `B axb ->
        match b with
        | `I bxi -> 1
        | `B bxb -> X.compare bool axb bxb
        end
      end
  end
