(***
  (
    (speed Fast)
    (typing Exhausted)
    (flags "")
  )
*)

let MapTwice (dep X : sig
  val t : type --> type
  val map : (a : type) -> (b : type) -> (a -> b) -> t a -> t b
end) : sig
  val map_twice : (a : type) -> (a -> a) -> X.t a -> X.t a
end = struct
  let map_twice a f x =
    X.map a a f (X.map a a f x)
end

(*
  For good measure, I put here the remaining examples from the extension overview section.
*)

let M : sig
  val x : int
  val y : { y : int | y > x }
end = struct
  let x = 0
  let y = 1
end

let F (dep A : sig
  val t : type
  val f : (a : type) -> a -> t
end) : sig 
  val g : int -> A.t 
end = struct
  let g i = A.f int i
end

let Id (dep T : sig val t : type end) : sig
  val s : singletype T.t
end = struct
  let s = T.t
end

let Id2 (dep M : sig val m : type --> type end) : sig
  val n : (a : type) -> singletype (M.m a)
end = struct
  let n = M.m
end