(***
  (
    (features (Polymorphic_types Dependent_types Modules Parametric_types First_class_types Deterministic_functions Higher_order_functions))
    (speed Fast)
    (typing Exhausted)
  )
*)

(*
  Here is how we assert that X.t is the returned t
*)
let F : (X : sig val t : type --> type end) -> sig
  val t : (a : type) -> singlet (X.t a) (* like an eta equivalence, right? *)
end = fun X -> struct
  let t = X.t
end

(*
  Even though singlet checks for equality, let's check one more time
*)
let _ =
  let X = struct let t a = { a : a } end in
  let M = F X in
  let f (type a) (x : X.t a) : M.t a =
    x
  in
  f

(*
  This is saying that Y.t = X.t, and we check that it is still type --> type.
*)
let F : (X : sig val t : type --> type end) -> (Y : sig val t : (a : type) -> singlet (X.t a) end) -> sig
  val t : type --> type
end = fun X Y -> struct
  let t = Y.t
end

(*
  ..
*)
let _ =
  let X = struct let t a = `A of a end in
  let Y = X in
  let M = F X Y in
  let f (type a) (x : X.t a) (y : Y.t a) : { x : M.t a ; y : M.t a } =
    { x = x ; y = y }
  in
  f