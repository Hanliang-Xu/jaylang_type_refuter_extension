
let city = { population : int }
in

let shop = { inventory : int }
in

let sight = { is_open : bool }
in

let node_kind = ``City city || ``Shop shop || ``Sight sight
in

(*
  This one feels tricky to bound; but if we just think of lists
  as variants (so this has a nested recursion); then we know the
  base case is empty list.

  Also; we potentially just can't bound this one because it is
  has no variants in it; so we instead would leave the bounding
  up to the List. Tricky.
*)
let node = 
  let tt =
    fun self ->
      fun n ->
        if n <= 0
        then (* Force the base case *)
          (* cannot make sure that list is of self; so just choose int because empty list is polymorphic *)
          { kind : node_kind ; neighbors : { List int | fun ls -> match ls with [] -> true | _ -> false end } }
        else
          let tt = self self (n - 1) in
          { kind : node_kind ; neighbors : List tt }
  in
  tt tt input
in

let result_type = { result : int }
in

let visitor =
  { visit_city : city -> result_type
   ; visit_shop : shop -> result_type
   ; visit_sight : sight -> result_type }
in

let visit (v : visitor) (start_node : node) : result_type =
  match start_node.kind with
  | `City c -> v.visit_city c
  | `Shop s -> v.visit_shop s
  (* ERROR: missing `Sight case *)
  end
in

visit

