(***
  (
    (speed Fast)
    (typing Ill_typed)
    (flags "")
  )
*)

(*
module M: sig
  module F: functor
      (X:
         functor(A: sig type xa end)(B:sig type xz end) -> sig end
      )
      (Y:
         functor(A: sig type ya end)(B:sig type yb end) -> sig end
      )
      (Z:
         functor(A: sig type za end)(B:sig type zb end) -> sig end
      ) -> sig end
end = struct
  module F
      (X:
         functor (A: sig type xa end)(B:sig type xz end) -> sig end
      )
      (Y:
         functor (A: sig type ya end)(B:sig type ybb end) -> sig end
      )
      (Z:
         functor (A: sig type za end)(B:sig type zbb end) -> sig end
      )
  = struct end
end
*)

let M : sig
  val F : (X : (A : sig val xa : type end) -> (B : sig val xz : type end) -> sig end)
    -> (Y : (A : sig val ya : type end) -> (B : sig val yb : type end) -> sig end)
    -> (Z : (A : sig val za : type end) -> (B : sig val zb : type end) -> sig end)
    -> sig end
end = struct
  (* Note these don't need to be called dependent, but in the spirit of functors, we say they are *)
  let F
    (dependent X : (A : sig val xa : type end) -> (B : sig val xz : type end) -> sig end)
    (dependent Y : (A : sig val ya : type end) -> (B : sig val ybb : type end) -> sig end) (* ERROR: should be `yb`, not `ybb` *)
    (dependent Z : (A : sig val za : type end) -> (B : sig val zbb : type end) -> sig end)
    : sig end
    = struct end
end