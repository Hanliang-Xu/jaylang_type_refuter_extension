(***
  (
    (features (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (reasons (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (speed <Fast or Slow>)
    (typing <Well_typed or Ill_typed>)
  )
*)
(*** (
  (features (Refinement_types Records))
  (reasons (Refinement_types))
  (speed Fast)
  (typing Ill_typed)
) *)

let isPos n = n > 0

let aIsPos re = isPos re.a

let isNeg n = n < 0

let access_record (r : { { a : int; b : bool } | aIsPos }) : { int | isNeg } =
  r.a
