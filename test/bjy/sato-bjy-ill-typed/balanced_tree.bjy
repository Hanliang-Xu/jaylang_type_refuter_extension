
let max x1 x2 = 
  if x1 > x2 then x1 else x2
in

let abs n = 
  if n > 0 then n else (0-1) * n
in

let rec get_height t = 
  match t with
  | `Node node -> max (get_height node.left) (get_height node.right) + 1
  | `Leaf leaf -> 1
  end
in

let rec is_balanced t = 
  match t with
  | `Node node ->
    is_balanced node.left
    and is_balanced node.right
    and abs (get_height node.left - get_height node.right) <= 1
  | `Leaf leaf -> true
  end
in

let tree_type = Mu tt.
  (  ``Node {: left : tt, right : tt :}
  || ``Leaf {: leaf : int :}
  )
in

let (x : {. tree_type | is_balanced }) = 
  `Node
  { left = 
    `Node { left = 
            `Node { left = 
                  `Node { left = `Leaf {leaf = 0}
                        , right = `Leaf {leaf = 0}
                        }
                  , right = `Leaf {leaf = 0}
                  }
          , right = `Leaf {leaf = 0}
          }
  , right = `Leaf { leaf = 0 }
  }
in

x
