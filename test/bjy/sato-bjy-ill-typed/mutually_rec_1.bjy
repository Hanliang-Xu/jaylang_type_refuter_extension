(***
  (
    (features (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (reasons (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (speed <Fast or Slow>)
    (typing <Well_typed or Ill_typed>)
  )
*)
(*** (
  (features (Recursive_functions Return_type))
  (reasons (Recursive_functions Return_type))
  (speed Fast)
  (typing Ill_typed)
) *)

let rec f (x : int) : int = 
  if x == 0
  then 0
  else g (x - 1)

and g (y : int) : int =
  if y < 0
  then false
  else f (y - 1) 

let res = f 1
