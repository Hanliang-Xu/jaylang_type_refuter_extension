(***
  (
    (features (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (reasons (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (speed <Fast or Slow>)
    (typing <Well_typed or Ill_typed>)
  )
*)
(*** (
  (features (Recursive_functions Refinement_types Match))
  (reasons (Refinement_types))
  (speed Fast)
  (typing Ill_typed)
) *)
let rec testFun l = 
  match l with
  | [] -> true
  | hd :: tl -> if (hd > 10) then testFun tl else false
  end

let userinput = input

let v = userinput

let x : { list int | testFun }  =
  [ v ; v ]
