(***
  (features (Recursive_functions Refinement_types Dependent_types Match))
  (reasons (Dependent_types Refinement_types Recursive_functions))
*)


let rec sum x acc = 
  match x with
  | [] -> acc
  | hd :: tl -> sum tl (acc + hd)
  end

let f (x <- list int) : { int | fun a -> (a == (sum x 0))} =
  sum x 1
    