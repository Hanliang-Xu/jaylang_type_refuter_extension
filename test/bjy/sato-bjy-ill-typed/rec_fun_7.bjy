(***
  (
    (features (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (reasons (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (speed <Fast or Slow>)
    (typing <Well_typed or Ill_typed>)
  )
*)
(*** (
  (features (Recursive_functions Higher_order_functions Return_type Match))
  (reasons (Return_type))
  (speed Fast)
  (typing Ill_typed)
) *)

let rec fold (acc : bool) (foldf : bool -> int -> bool) (lst : list int) : int =
  match lst with
  | [] -> acc
  | hd :: tl -> fold (foldf acc hd) foldf tl
  end
