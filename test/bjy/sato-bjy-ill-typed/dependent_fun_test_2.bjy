(*** (
  (features (Recursive_functions Refinement_types Dependent_types Return_type Match))
  (reasons (Recursive_functions Refinement_types Dependent_types Return_type))
  (speed Fast)
  (typing Ill_typed)
) *)

let rec length x acc = 
  match x with
  | [] -> acc
  | hd :: tl -> length tl (acc + 1)
  end

let rec f (x <- list int) : (y : list int) -> (z : list int) -> { list int | (fun a -> (length a 0) == (length x 0) + (length y 0)) } =
  let g l2 =
    let h acc =
      match l2 with
      | [] -> []
      | hd :: tl -> f l2 tl acc
      end
    in
    h
  in
  g
    