(***
  (
    (features (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (reasons (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (speed <Fast or Slow>)
    (typing <Well_typed or Ill_typed>)
  )
*)
(*** (
  (features (Refinement_types))
  (reasons (Refinement_types))
  (speed Fast)
  (typing Ill_typed)
) *)

let f (x : { a : int | a > 0}) : { a : int | a < 0} = 
  x * (0-1)

let g (x : int) : { a : int | a < 0} = 
  if (x > 0) then f x else f 0
    