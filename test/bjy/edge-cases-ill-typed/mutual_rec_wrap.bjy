(***
  (
    (features (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (reasons (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (speed <Fast or Slow>)
    (typing <Well_typed or Ill_typed>)
  )
*)
(*** (
  (speed Fast)
  (typing Ill_typed)
) *)

(*
  These are mutually recursive functions, where there is a usage error
  of one in the type of the other. The error is only caught if the functions
  are wrapped and if they are visible (in their wrapped form) to the types
  of the other functions.
*)


let rec f (x : int) : { i : int | let _ = g i in true } =
  x

and g (b : bool) : int =
  0
