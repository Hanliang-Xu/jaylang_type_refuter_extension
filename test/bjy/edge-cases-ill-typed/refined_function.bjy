(***
  (
    (features (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (reasons (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (speed <Fast or Slow>)
    (typing <Well_typed or Ill_typed>)
  )
*)
(*** (
  (speed Fast)
  (typing Ill_typed)
)*)

let t = { f : (int -> int) | (f 0) == 0 }

(* 
  You might think this should be well-typed, but because functions are
  nondeterministic, the predicate does absolutely nothing, and `f` is
  free to return whatever it wants on any other call.

  Compare this to the well-typed version in the other directory, where
  we write the type as a dependent arrow with a refined codomain.
*)
let g (f : t) : { i : int | i == 0 } =
  f 0
