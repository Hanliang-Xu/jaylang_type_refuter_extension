
letd F (tf : type -> type) : 
  (a : type) ->
    { empty : unit -> tf a # ERROR: all of these `tf a` are different
    ;  add   : a -> tf a -> tf a
    }
    ->
    { of_list : (List a) -> tf a
    }
  =
  fun a r ->
    { of_list =
      fun ls ->
        let rec loop acc ls =
          match ls with
          | [] -> acc
          | hd :: tl -> loop (r.add hd acc) tl
          end
        in
        loop (r.empty {}) ls
    }
