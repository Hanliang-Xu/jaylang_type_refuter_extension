(***
  (
    (features (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (reasons (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (speed <Fast or Slow>)
    (typing <Well_typed or Ill_typed>)
  )
*)
(*** (
  (speed Fast)
  (typing Ill_typed)
) *)

let F (tf <- type -> type) (a <- type) : sig
  val empty : unit -> tf a (* ERROR: all of these `tf a` are different *)
  val add   : a -> tf a -> tf a
end -> sig
  val of_list : list a -> tf a
end = fun r -> struct
  let of_list ls =
    let rec loop acc ls =
      match ls with
      | [] -> acc
      | hd :: tl -> loop (r.add hd acc) tl
      end
    in
    loop (r.empty {}) ls
end
