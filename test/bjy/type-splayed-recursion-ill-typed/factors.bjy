(***
  (
    (features (Refinement_types Dependent_types Recursive_functions Other))
    (reasons (Refinement_types Recursive_functions Other))
    (speed Fast)
    (typing Ill_typed) ; only because type splaying is incomplete
    (flags "-s")
  )
*)


let pos_int = { i : int | i > 0 }

(*
  We can't prove this well-typed because the nonce at each level
  of the recursive `factors` function is different, so the list
  returned fails the stub check.
*)
let factors (n : pos_int) : list int =
  let rec factors (dependent i : pos_int) : list { k : int | k >= i } =
    if i > n then
      []
    else if n % i == 0 then
      i :: factors (i + 1)
    else
      factors (i + 1)
  in
  factors 1