
let set_m = 
  { emptyset = []
  ; add = fun x -> fun s -> x :: s 
  ; remove = 
      let rec f x s equal =
        match s with
        | [] -> []
        | hd :: tl ->
          if equal hd x
          then tl
          else hd # ERROR: should recursively call on tl
        end
      in f
  ; contains = 
      let rec f x s equal =
        match s with
        | [] -> false
        | hd :: tl ->
          if equal x hd
          then true
          else f x tl equal
        end
      in f
  }
in

let set_m_type = 
  fun a_ -> # any type
    let t = List a_ in
    { emptyset : t
    ; add : a_ -> t -> t
    ; remove : a_ -> t -> (a_ -> a_ -> bool) -> t
    ; contains : a_ -> t -> (a_ -> a_ -> bool) -> bool
    }
in

let (check_type : set_m_type (int)) = set_m
in

check_type 