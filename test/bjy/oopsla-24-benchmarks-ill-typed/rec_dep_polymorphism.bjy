(***
  (
    (features (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (reasons (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (speed <Fast or Slow>)
    (typing <Well_typed or Ill_typed>)
  )
*)
(*** (
  (features (Polymorphic_types Recursive_functions Dependent_types Parametric_types))
  (reasons (Polymorphic_types Dependent_types Parametric_types Recursive_functions))
  (speed Fast)
  (typing Ill_typed)
) *)

let t : type -> type -> int -> type =
  fun a b i ->
    if i % 2 == 0
    then b
    else a

(* 'a and 'b alternate by call here; so can't assume 'a stays the same in recursive calls *)
let rec f (type a_ b_) (i <- int) (a : a_) (b : b_) : t a_ b_ i =
  if i == 0
  then b
  else f a_ b_ (i - 1) b a (* ERROR: need to flip a_ and b_ *)

let res = f int bool 2 0 true
