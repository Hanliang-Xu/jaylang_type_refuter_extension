(***
  (
    (features (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (reasons (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (speed <Fast or Slow>)
    (typing <Well_typed or Ill_typed>)
  )
*)
(*** (
  (features (Higher_order_functions Subtyping Records Match))
  (reasons (Higher_order_functions Records))
  (speed Fast)
  (typing Ill_typed)
) *)
(* subtyping of functions on records *)

let t : type = ({ a : int ; b : bool } -> { x : list int }) -> { y : list bool }

let f (a : { a : int  } -> { x : list int }) : { y : list bool } =
  match (a { a = 0 }).x with
  | [] -> { y = [] }
  | hd :: tl -> if hd == 0 then { y = [ false ] } else { y = [ true ] }
  end

let g : t = f (* ERROR: f is supertype of t; not subtype *)
