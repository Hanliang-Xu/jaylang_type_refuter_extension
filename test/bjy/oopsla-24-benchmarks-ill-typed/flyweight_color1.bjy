
let color =
  { t =
    { int | fun i -> i >= 0 and i < 256 }
  }

let common_state =
  { t = 
    { c : color.t } # Say color is the heavy data we need to offload onto a common state
  }

let unique_state = 
  { t =
    { x : int
    ; y : int
    ; get_deg : unit -> int } # all of these fields are unique to an instance of a colored point
  }

let colored_point =
  { t =
    { intrinsic : unique_state.t
     ; flyweight : common_state.t } # all colored points in this program get the same; common color
  }

let get_color p =
  p.flyweight.c

let make_obj (cs : common_state.t) (x : int) (y : int) : colored_point.t =
  let ob =
    fun self ->
      { flyweight = cs
      ; intrinsic =
        { x = x
        ; y = y
        ; get_deg = 
            fun ignore_unit ->
              let s = (self self) in
              if s.x == 0 then 0 else # ERROR: projecting label `x` when first need to project `intrinsic`
              let tan = s.y / s.x in
              tan - (tan * tan * tan) / 3 + (tan * tan * tan * tan * tan) / 5 # approx arctan with taylor expansion
        }
      } 
  in
  ob ob

let dark_color =
  let ob = 
    fun self ->
      { c = 255 }
  in
  ob ob

let result = get_color (make_obj dark_color 10 20)