
let MONAD =
  {: m : type -> type
   ; return : (a : type) -> a -> m a
   ; bind : (a : type) -> (b : type) -> m a -> (a -> m b) -> m b
  :}

let TRANSFORMER =
  {: t : (type -> type) -> type -> type
   ; lift : (m : type -> type) -> (a : type) -> m a -> t m a
  :}

(*
  This is not exactly practical because T doesn't know anything about M and thus is useless.
  I'm trying to make a case for needing higher-kinded type parameters, but it seems they are
  all basically unusable.
    * We would need to pass in the behavior to each function (here `lift` in order for it to
      do anything), which is annoying and better done as a functor in any case I can think of.
    * Or we would need Haskell typeclasses, which obviously we don't have.
*)
let (make : (M : MONAD) -> (T : TRANSFORMER) -> (a : type) -> a -> T.t M.m a) =
  fun M T a x ->
    T.lift M.m a (M.return a x)

