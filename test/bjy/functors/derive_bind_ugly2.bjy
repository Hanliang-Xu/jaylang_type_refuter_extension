(***
  (
    (features (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (reasons (Polymorphic_types Refinement_types Dependent_arrows Modules Mu_types Parametric_types First_class_types Variants Records Recursive_functions Higher_order_functions Subtyping OOP_style Return_error Usage_error Other))
    (speed <Fast or Slow>)
    (typing <Well_typed or Ill_typed>)
  )
*)

(*
  OCaml

    module type BASIC = sig
      type 'a m
      val return : 'a -> 'a m
      val join   : 'a m m -> 'a m
      val map    : 'a m -> ('a -> 'b) -> 'b m
    end


    module Derive_bind (M : BASIC) = struct
      include M
      let bind x f = M.join (M.map x f)
    end
*)

(*
  This doesn't work because M.map only allows `f` to have type `a -> b`.
  Here, we need it to typecheck with type `a -> m b`, which is not the same,
  so we fail the wrap check when calling `M.map x f`.
*)
let Derive_bind (M <- BASIC) : { bind : M.ma -> (M.a -> M.mb) -> M.mb } =
  { bind = fun x f -> M.join (M.map x f)
  }

(*
  Existential types inside module.
*)

let BASIC = sig
  val m : type -> type
  val a : type
  val b : type
  val ma = m a
  val mb = m b
  val mma = m ma
  val map  : ma -> (a -> b) -> mb
  val join : mma -> ma
  val return : a -> ma
end

let Id_example : (a : type) -> (b : type) -> BASIC = fun a b -> struct
  let m a = `Id of a
  let a = a
  let b = b
  let ma = m a
  let mb = m b
  let mma = m (m a)
  let map x f =
    match x with
    | `Id z -> `Id (f z)
    end
  let join x =
    match x with
    | `Id m -> m
    end
  let return x = fun x -> `Id x
end

(*
  This doesn't work because M.map only allows `f` to have type `a -> b`.
  Here, we need it to typecheck with type `a -> m b`, which is not the same,
  so we fail the wrap check when calling `M.map x f`.
*)
let Derive_bind (M <- BASIC) : sig
  val bind : M.ma -> (M.a -> M.mb) -> M.mb
end = struct
  let bind x f = M.join (M.map x f)
end
