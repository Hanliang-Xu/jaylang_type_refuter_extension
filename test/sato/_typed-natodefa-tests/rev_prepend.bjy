let rec length x acc = 
    match x with
    | [] -> acc
    | hd :: tl -> length tl (acc + 1)
    end
in
letd rec rev_prepend (x : List 'a) : ((y : List 'a) -> {. List 'a | (fun a -> (length a 0) == (length x 0) + (length y 0)) }) =
    fun y ->
    let rec loop l acc = 
        match l with
        | [] -> acc
        | hd :: tl -> loop tl (hd :: (hd :: acc))
        end
    in
    loop x y
in
rev_prepend