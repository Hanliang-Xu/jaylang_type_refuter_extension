let sample_functor = fun t -> 
    let f (module : {: a : int :}) = 
    let t = bool in
    { type = { t = t },
    module = 
    { emptyset = 1 }}
    in f
in
let module_type = (fun t -> {: emptyset : t :}) 
in
let inner_t = (sample_module.type).t in
let module_type_check = module_type inner_t in
let (check_type : module_type_check) = sample_module.module in sample_module



let type_sig = (t : {: a : int, b : int :}) -> int in
let f (x : {: a : int :}) : int = x.a in
let (check_type : type_sig) = f in 1  