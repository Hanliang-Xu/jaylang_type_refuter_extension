let rec foldr (f : 'a -> 'b -> 'b) (acc : 'b) (lst : List 'a) : 'b =
  match lst with
  | [] -> acc
  | hd :: tl -> f hd (foldr f acc tl)
  end
in

let max2 (lst : List ({. int | fun x -> x > 0})) : {. int | fun y -> (y > 0 or y == (0-1))} =
  match lst with
  | [] -> (0-1)
  | hd :: tl -> foldr (fun x y -> if x > y then x else y) hd lst
  end
in

let max3 (lst : List ({. int | fun x -> x > 0})) : ({: Just : {. int | fun y -> y > 0 } :} || {: None : bool :}) =
  match lst with
  | hd :: tl -> {Just = foldr (fun x y -> if x > y then x else y) hd tl}
  | [] -> {None = true}
  end
in

let simpleFold (lst : List ({. int | fun x -> x > 0})) : {. int | fun y -> y > 0 } = 
  foldr (fun x y -> y) 1 lst
in

let typeC t = ``C t in

let f (x : 'a) : 'a = x in

let m (x : {. int | fun x -> x > 0}) : ``C ({. int | fun y -> y > 0 }) =
`C (f x)
in

let f2 (b : int) : int = 256 in

let m2 (x : {. int | fun x -> x > 0}) : ``C ({. int | fun y -> y > 0 }) = 
`C (f2 x)

in

let m3 (x : {. int | fun x -> x > 0}) : ``C ({. int | fun y -> y > 0 }) =
  let f2x = f2 x in `C f2x
in

max2
