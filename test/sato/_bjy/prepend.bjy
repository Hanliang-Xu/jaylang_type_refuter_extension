let length x =
    let rec loop l acc =
        match l with
        | [] -> acc
        | hd :: tl -> loop tl (acc + 1)
        end
    in loop x 0
in
letd rec prepend (type a) (x : List a) :
    ((y : List a) ->
    {. List a |
    (fun r -> (length r) ==
    (length x) + (length y)) })
    = fun y -> let rec loop l acc =
    match l with
    | [] -> acc
    | hd :: tl -> loop tl (hd :: (hd :: acc))
    end
    in loop x y
in prepend