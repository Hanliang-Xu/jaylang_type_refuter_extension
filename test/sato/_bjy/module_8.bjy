# remove has abort base case.

let set_m = 
  { emptyset = []
  , add = fun x -> fun s -> x :: s 
  , remove = 
      let rec f x s equal =
        match s with
        | [] -> assert false
        | hd :: tl ->
          if equal hd x then tl
          else hd :: f x tl equal
        end
      in f
  , contains = 
      let rec f x s equal =
        match s with
        | [] -> false
        | hd :: tl ->
          if equal x hd then true else f x tl equal
        end
      in f
  }
in
let set_m_type = 
  let tf tau = List tau in
  {: emptyset : 
   , add : 'a -> (tf 'a) -> (tf 'a)
   , remove : 'a -> (tf 'a) -> ('a -> 'a -> bool) -> (tf 'a)
   , contains : 'a -> (tf 'a) -> ('a -> 'a -> bool) -> bool
  :}
in
let (check_type : set_m_type) = set_m in check_type 