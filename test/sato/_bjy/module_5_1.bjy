# Don't know expected output; the bug is in the implementation of the remove function. Its else branch has the wrong type.

let set_m = 
  { emptyset = []
  , add = fun x -> fun s -> x :: s 
  , remove = 
      let rec f x s equal =
        match s with
        | [] -> assert false
        | hd :: tl ->
          if equal hd x then tl
          else hd
        end
      in f
  , contains = 
      let rec f x s equal =
        match s with
        | [] -> false
        | hd :: tl ->
          if equal x hd then true else f x tl equal
        end
      in f
  }
in
let set_m_type = 
  let t = List 'a in
  {: emptyset : t
   , add : 'a -> t -> t
   , remove : 'a -> t -> (t -> t -> bool) -> t
   , contains : 'a -> t -> (t -> t -> bool) -> bool
  :}
in
let (check_type : set_m_type) = set_m in check_type 