let rec length l = 
  match l with
  | [] -> 0
  | hd :: tl -> 1 + length tl
  end
in

let rec foldl f acc l = 
  match l with
  | [] -> acc
  | hd :: tl -> foldl f (f acc hd) tl
  end
in

let ListN a n = {. List a | fun l -> length l == n} in

letd add (x : 'a) : (xs : List 'a) -> ListN ('a) (1 + length xs) = fun xs ->
x :: xs
in

let rev l =
  let rec rev_acc acc l = 
    match l with
    | [] -> acc
    | hd :: tl -> rev_acc (hd :: acc) tl
    end
  in 
  rev_acc [] l
in

let makeList n = 
  let rec helper n = 
    if n == 0 then [] else n :: helper (n - 1)
  in
  rev (helper n)
in

letd replicate (n : ({. int | fun x -> x > 0})) : 'a -> (ListN ('a) n) = fun x ->
  foldl (fun acc a -> x :: acc) [] (makeList n)
in
replicate
