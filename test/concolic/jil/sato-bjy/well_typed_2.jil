bool_j_1 = false;
fail_b_1 = bool_j_1;
flatten_fun_j_10 = fun expr_b_0 -> (
    var_j_2 = expr_b_0;
    m_match_bool_j_4 = var_j_2 ~ any;
    m_match_bool_j_7 = var_j_2 ~ int;
    m_match_cond_j_8 = m_match_bool_j_7 ? (
            bool_j_9 = true
        ) : (
            m_match_cond_j_5 = m_match_bool_j_4 ? (
                    var_j_6 = fail_b_1
                ) : (
                    void_j_3 = {}
                )
        ));
flatten_fun_j_12 = fun bj_null -> (
    input_j_11 = input);
flatten_fun_j_14 = fun expr_b_2 -> (
    var_j_13 = expr_b_2);
record_j_15 = {checker = flatten_fun_j_10, generator = flatten_fun_j_12, wrapper = flatten_fun_j_14};
proj_j_16 = record_j_15.wrapper;
int_j_17 = 5;
m_i_46 = proj_j_16 ~ fun;
appl_j_18 = m_i_46 ? (
        c_appl_i_47 = proj_j_16 int_j_17
    ) : (
        ab_i_48 = abort
    );
x_b_6 = appl_j_18;
x = x_b_6;
bool_j_20 = false;
fail_b_4 = bool_j_20;
flatten_fun_j_29 = fun expr_b_3 -> (
    var_j_21 = expr_b_3;
    m_match_bool_j_23 = var_j_21 ~ any;
    m_match_bool_j_26 = var_j_21 ~ int;
    m_match_cond_j_27 = m_match_bool_j_26 ? (
            bool_j_28 = true
        ) : (
            m_match_cond_j_24 = m_match_bool_j_23 ? (
                    var_j_25 = fail_b_4
                ) : (
                    void_j_22 = {}
                )
        ));
flatten_fun_j_31 = fun bj_null_j_0 -> (
    input_j_30 = input);
flatten_fun_j_33 = fun expr_b_5 -> (
    var_j_32 = expr_b_5);
record_j_34 = {checker = flatten_fun_j_29, generator = flatten_fun_j_31, wrapper = flatten_fun_j_33};
proj_j_35 = record_j_34.checker;
appl_j_37 = proj_j_35 x_b_6;
check_res_b_7 = appl_j_37;
if_j_45 = check_res_b_7 ? (
        var_j_39 = x
    ) : (
        error_var_j_40 = check_res_b_7;
        assert_pred_j_41 = error_var_j_40;
        assert_res_j_42 = assert_pred_j_41 ? (
                assert_res_true_j_43 = {}
            ) : (
                ab_j_44 = abort
            )
    );
i_result = if_j_45