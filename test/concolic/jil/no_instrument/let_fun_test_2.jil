i_first = {};
id_j_4 = fun x -> (
    int_j_1 = 0;
    var_j_2 = x;
    binop_j_3 = int_j_1 < var_j_2);
id = id_j_4;
bool_j_5 = false;
fail_b_1 = bool_j_5;
flatten_fun_j_14 = fun expr_b_0 -> (
    var_j_6 = expr_b_0;
    m_match_bool_j_8 = var_j_6 ~ any;
    m_match_bool_j_11 = var_j_6 ~ int;
    m_match_cond_j_12 = m_match_bool_j_11 ? (
            bool_j_13 = true
        ) : (
            m_match_cond_j_9 = m_match_bool_j_8 ? (
                    var_j_10 = fail_b_1
                ) : (
                    void_j_7 = {}
                )
        ));
flatten_fun_j_16 = fun bj_null -> (
    input_j_15 = input);
record_j_17 = {checker = flatten_fun_j_14, generator = flatten_fun_j_16};
proj_j_18 = record_j_17.generator;
int_j_19 = 0;
appl_j_20 = proj_j_18 int_j_19;
x_b_6 = appl_j_20;
bool_j_21 = false;
fail_b_4 = bool_j_21;
flatten_fun_j_30 = fun expr_b_3 -> (
    var_j_22 = expr_b_3;
    m_match_bool_j_24 = var_j_22 ~ any;
    m_match_bool_j_27 = var_j_22 ~ int;
    m_match_cond_j_28 = m_match_bool_j_27 ? (
            bool_j_29 = true
        ) : (
            m_match_cond_j_25 = m_match_bool_j_24 ? (
                    var_j_26 = fail_b_4
                ) : (
                    void_j_23 = {}
                )
        ));
flatten_fun_j_32 = fun bj_null_j_0 -> (
    input_j_31 = input);
record_j_33 = {checker = flatten_fun_j_30, generator = flatten_fun_j_32};
proj_j_34 = record_j_33.checker;
appl_j_37 = id x_b_6;
appl_j_38 = proj_j_34 appl_j_37;
check_res_b_7 = appl_j_38;
if_j_46 = check_res_b_7 ? (
        var_j_40 = id
    ) : (
        error_var_j_41 = check_res_b_7;
        assert_pred_j_42 = error_var_j_41;
        assert_res_j_43 = assert_pred_j_42 ? (
                assert_res_true_j_44 = {}
            ) : (
                ab_j_45 = abort
            )
    );
i_result = if_j_46