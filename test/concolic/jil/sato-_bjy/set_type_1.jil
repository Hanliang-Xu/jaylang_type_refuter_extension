i_first = {};
isPos_j_24 = fun n_j_20 -> (
    int_j_21 = 0;
    var_j_22 = n_j_20;
    m_bl_i_495 = int_j_21 ~ int;
    m_br_i_496 = var_j_22 ~ int;
    m_b_i_497 = m_bl_i_495 and m_br_i_496;
    binop_j_23 = m_b_i_497 ? (
            c_binop_i_498 = int_j_21 < var_j_22
        ) : (
            ab_i_499 = abort
        ));
isPos = isPos_j_24;
isNeg_j_28 = fun n -> (
    var_j_25 = n;
    int_j_26 = 0;
    m_bl_i_500 = var_j_25 ~ int;
    m_br_i_501 = int_j_26 ~ int;
    m_b_i_502 = m_bl_i_500 and m_br_i_501;
    binop_j_27 = m_b_i_502 ? (
            c_binop_i_503 = var_j_25 < int_j_26
        ) : (
            ab_i_504 = abort
        ));
isNeg = isNeg_j_28;
f_j_170 = fun x_j_19 -> (
    flatten_fun_j_167 = fun x_b_0 -> (
        int_j_29 = 0;
        input_j_30 = input;
        m_bl_i_505 = int_j_29 ~ int;
        m_br_i_506 = input_j_30 ~ int;
        m_b_i_507 = m_bl_i_505 and m_br_i_506;
        binop_j_31 = m_b_i_507 ? (
                c_binop_i_508 = int_j_29 < input_j_30
            ) : (
                ab_i_509 = abort
            );
        if_j_94 = binop_j_31 ? (
                flatten_fun_j_60 = fun expr_b_22 -> (
                    bool_j_32 = false;
                    fail_b_20 = bool_j_32;
                    flatten_fun_j_41 = fun expr_b_19 -> (
                        var_j_33 = expr_b_19;
                        m_match_bool_j_35 = var_j_33 ~ any;
                        m_match_bool_j_38 = var_j_33 ~ int;
                        m_match_cond_j_39 = m_match_bool_j_38 ? (
                                bool_j_40 = true
                            ) : (
                                m_match_cond_j_36 = m_match_bool_j_35 ? (
                                        var_j_37 = fail_b_20
                                    ) : (
                                        void_j_34 = {}
                                    )
                            ));
                    flatten_fun_j_43 = fun bj_null_j_13 -> (
                        input_j_42 = input);
                    flatten_fun_j_45 = fun expr_b_21 -> (
                        var_j_44 = expr_b_21);
                    record_j_46 = {checker = flatten_fun_j_41, generator = flatten_fun_j_43, wrapper = flatten_fun_j_45};
                    proj_j_47 = record_j_46.checker;
                    var_j_48 = expr_b_22;
                    appl_j_49 = proj_j_47 var_j_48;
                    t_check_b_23 = appl_j_49;
                    var_j_50 = t_check_b_23;
                    if_j_59 = var_j_50 ? (
                            bool_j_51 = false;
                            pred_check_b_24 = bool_j_51;
                            var_j_52 = isPos;
                            var_j_53 = expr_b_22;
                            appl_j_54 = var_j_52 var_j_53;
                            if_j_57 = appl_j_54 ? (
                                    bool_j_55 = true
                                ) : (
                                    var_j_56 = pred_check_b_24
                                )
                        ) : (
                            var_j_58 = t_check_b_23
                        ));
                flatten_fun_j_86 = fun bj_null_j_15 -> (
                    bool_j_61 = false;
                    fail_b_16 = bool_j_61;
                    flatten_fun_j_70 = fun expr_b_15 -> (
                        var_j_62 = expr_b_15;
                        m_match_bool_j_64 = var_j_62 ~ any;
                        m_match_bool_j_67 = var_j_62 ~ int;
                        m_match_cond_j_68 = m_match_bool_j_67 ? (
                                bool_j_69 = true
                            ) : (
                                m_match_cond_j_65 = m_match_bool_j_64 ? (
                                        var_j_66 = fail_b_16
                                    ) : (
                                        void_j_63 = {}
                                    )
                            ));
                    flatten_fun_j_72 = fun bj_null_j_14 -> (
                        input_j_71 = input);
                    flatten_fun_j_74 = fun expr_b_17 -> (
                        var_j_73 = expr_b_17);
                    record_j_75 = {checker = flatten_fun_j_70, generator = flatten_fun_j_72, wrapper = flatten_fun_j_74};
                    proj_j_76 = record_j_75.generator;
                    int_j_77 = 0;
                    appl_j_78 = proj_j_76 int_j_77;
                    candidate_b_18 = appl_j_78;
                    var_j_79 = isPos;
                    var_j_80 = candidate_b_18;
                    appl_j_81 = var_j_79 var_j_80;
                    if_j_85 = appl_j_81 ? (
                            var_j_82 = candidate_b_18
                        ) : (
                            bool_j_83 = false;
                            assume_j_84 = assume bool_j_83
                        ));
                flatten_fun_j_88 = fun expr_b_25 -> (
                    var_j_87 = expr_b_25);
                record_j_89 = {checker = flatten_fun_j_60, generator = flatten_fun_j_86, wrapper = flatten_fun_j_88};
                proj_j_90 = record_j_89.checker;
                var_j_91 = x_b_0;
                m_i_510 = proj_j_90 ~ fun;
                appl_j_92 = m_i_510 ? (
                        c_appl_i_511 = proj_j_90 var_j_91
                    ) : (
                        ab_i_512 = abort
                    )
            ) : (
                bool_j_93 = true
            );
        arg_check_b_1 = if_j_94;
        var_j_95 = arg_check_b_1;
        if_j_166 = var_j_95 ? (
                flatten_fun_j_124 = fun expr_b_33 -> (
                    bool_j_96 = false;
                    fail_b_31 = bool_j_96;
                    flatten_fun_j_105 = fun expr_b_30 -> (
                        var_j_97 = expr_b_30;
                        m_match_bool_j_99 = var_j_97 ~ any;
                        m_match_bool_j_102 = var_j_97 ~ int;
                        m_match_cond_j_103 = m_match_bool_j_102 ? (
                                bool_j_104 = true
                            ) : (
                                m_match_cond_j_100 = m_match_bool_j_99 ? (
                                        var_j_101 = fail_b_31
                                    ) : (
                                        void_j_98 = {}
                                    )
                            ));
                    flatten_fun_j_107 = fun bj_null_j_16 -> (
                        input_j_106 = input);
                    flatten_fun_j_109 = fun expr_b_32 -> (
                        var_j_108 = expr_b_32);
                    record_j_110 = {checker = flatten_fun_j_105, generator = flatten_fun_j_107, wrapper = flatten_fun_j_109};
                    proj_j_111 = record_j_110.checker;
                    var_j_112 = expr_b_33;
                    appl_j_113 = proj_j_111 var_j_112;
                    t_check_b_34 = appl_j_113;
                    var_j_114 = t_check_b_34;
                    if_j_123 = var_j_114 ? (
                            bool_j_115 = false;
                            pred_check_b_35 = bool_j_115;
                            var_j_116 = isNeg;
                            var_j_117 = expr_b_33;
                            appl_j_118 = var_j_116 var_j_117;
                            if_j_121 = appl_j_118 ? (
                                    bool_j_119 = true
                                ) : (
                                    var_j_120 = pred_check_b_35
                                )
                        ) : (
                            var_j_122 = t_check_b_34
                        ));
                flatten_fun_j_150 = fun bj_null_j_18 -> (
                    bool_j_125 = false;
                    fail_b_27 = bool_j_125;
                    flatten_fun_j_134 = fun expr_b_26 -> (
                        var_j_126 = expr_b_26;
                        m_match_bool_j_128 = var_j_126 ~ any;
                        m_match_bool_j_131 = var_j_126 ~ int;
                        m_match_cond_j_132 = m_match_bool_j_131 ? (
                                bool_j_133 = true
                            ) : (
                                m_match_cond_j_129 = m_match_bool_j_128 ? (
                                        var_j_130 = fail_b_27
                                    ) : (
                                        void_j_127 = {}
                                    )
                            ));
                    flatten_fun_j_136 = fun bj_null_j_17 -> (
                        input_j_135 = input);
                    flatten_fun_j_138 = fun expr_b_28 -> (
                        var_j_137 = expr_b_28);
                    record_j_139 = {checker = flatten_fun_j_134, generator = flatten_fun_j_136, wrapper = flatten_fun_j_138};
                    proj_j_140 = record_j_139.generator;
                    int_j_141 = 0;
                    appl_j_142 = proj_j_140 int_j_141;
                    candidate_b_29 = appl_j_142;
                    var_j_143 = isNeg;
                    var_j_144 = candidate_b_29;
                    appl_j_145 = var_j_143 var_j_144;
                    if_j_149 = appl_j_145 ? (
                            var_j_146 = candidate_b_29
                        ) : (
                            bool_j_147 = false;
                            assume_j_148 = assume bool_j_147
                        ));
                flatten_fun_j_152 = fun expr_b_36 -> (
                    var_j_151 = expr_b_36);
                record_j_153 = {checker = flatten_fun_j_124, generator = flatten_fun_j_150, wrapper = flatten_fun_j_152};
                proj_j_154 = record_j_153.wrapper;
                int_j_155 = 0;
                int_j_156 = 1;
                m_bl_i_513 = int_j_155 ~ int;
                m_br_i_514 = int_j_156 ~ int;
                m_b_i_515 = m_bl_i_513 and m_br_i_514;
                binop_j_157 = m_b_i_515 ? (
                        c_binop_i_516 = int_j_155 - int_j_156
                    ) : (
                        ab_i_517 = abort
                    );
                var_j_158 = x_j_19;
                m_bl_i_518 = binop_j_157 ~ int;
                m_br_i_519 = var_j_158 ~ int;
                m_b_i_520 = m_bl_i_518 and m_br_i_519;
                binop_j_159 = m_b_i_520 ? (
                        c_binop_i_521 = binop_j_157 * var_j_158
                    ) : (
                        ab_i_522 = abort
                    );
                m_i_523 = proj_j_154 ~ fun;
                appl_j_160 = m_i_523 ? (
                        c_appl_i_524 = proj_j_154 binop_j_159
                    ) : (
                        ab_i_525 = abort
                    )
            ) : (
                var_j_161 = arg_check_b_1;
                assert_pred_j_162 = var_j_161;
                assert_res_j_163 = assert_pred_j_162 ? (
                        assert_res_true_j_164 = {}
                    ) : (
                        ab_j_165 = abort
                    )
            ));
    var_j_168 = x_j_19;
    appl_j_169 = flatten_fun_j_167 var_j_168);
f = f_j_170;
flatten_fun_j_199 = fun expr_b_11 -> (
    bool_j_171 = false;
    fail_b_9 = bool_j_171;
    flatten_fun_j_180 = fun expr_b_8 -> (
        var_j_172 = expr_b_8;
        m_match_bool_j_174 = var_j_172 ~ any;
        m_match_bool_j_177 = var_j_172 ~ int;
        m_match_cond_j_178 = m_match_bool_j_177 ? (
                bool_j_179 = true
            ) : (
                m_match_cond_j_175 = m_match_bool_j_174 ? (
                        var_j_176 = fail_b_9
                    ) : (
                        void_j_173 = {}
                    )
            ));
    flatten_fun_j_182 = fun bj_null -> (
        input_j_181 = input);
    flatten_fun_j_184 = fun expr_b_10 -> (
        var_j_183 = expr_b_10);
    record_j_185 = {checker = flatten_fun_j_180, generator = flatten_fun_j_182, wrapper = flatten_fun_j_184};
    proj_j_186 = record_j_185.checker;
    var_j_187 = expr_b_11;
    appl_j_188 = proj_j_186 var_j_187;
    t_check_b_12 = appl_j_188;
    var_j_189 = t_check_b_12;
    if_j_198 = var_j_189 ? (
            bool_j_190 = false;
            pred_check_b_13 = bool_j_190;
            var_j_191 = isPos;
            var_j_192 = expr_b_11;
            appl_j_193 = var_j_191 var_j_192;
            if_j_196 = appl_j_193 ? (
                    bool_j_194 = true
                ) : (
                    var_j_195 = pred_check_b_13
                )
        ) : (
            var_j_197 = t_check_b_12
        ));
flatten_fun_j_225 = fun bj_null_j_1 -> (
    bool_j_200 = false;
    fail_b_5 = bool_j_200;
    flatten_fun_j_209 = fun expr_b_4 -> (
        var_j_201 = expr_b_4;
        m_match_bool_j_203 = var_j_201 ~ any;
        m_match_bool_j_206 = var_j_201 ~ int;
        m_match_cond_j_207 = m_match_bool_j_206 ? (
                bool_j_208 = true
            ) : (
                m_match_cond_j_204 = m_match_bool_j_203 ? (
                        var_j_205 = fail_b_5
                    ) : (
                        void_j_202 = {}
                    )
            ));
    flatten_fun_j_211 = fun bj_null_j_0 -> (
        input_j_210 = input);
    flatten_fun_j_213 = fun expr_b_6 -> (
        var_j_212 = expr_b_6);
    record_j_214 = {checker = flatten_fun_j_209, generator = flatten_fun_j_211, wrapper = flatten_fun_j_213};
    proj_j_215 = record_j_214.generator;
    int_j_216 = 0;
    appl_j_217 = proj_j_215 int_j_216;
    candidate_b_7 = appl_j_217;
    var_j_218 = isPos;
    var_j_219 = candidate_b_7;
    appl_j_220 = var_j_218 var_j_219;
    if_j_224 = appl_j_220 ? (
            var_j_221 = candidate_b_7
        ) : (
            bool_j_222 = false;
            assume_j_223 = assume bool_j_222
        ));
flatten_fun_j_227 = fun expr_b_14 -> (
    var_j_226 = expr_b_14);
record_j_228 = {checker = flatten_fun_j_199, generator = flatten_fun_j_225, wrapper = flatten_fun_j_227};
proj_j_229 = record_j_228.generator;
int_j_230 = 0;
appl_j_231 = proj_j_229 int_j_230;
x_b_76 = appl_j_231;
flatten_fun_j_260 = fun expr_b_44 -> (
    bool_j_232 = false;
    fail_b_42 = bool_j_232;
    flatten_fun_j_241 = fun expr_b_41 -> (
        var_j_233 = expr_b_41;
        m_match_bool_j_235 = var_j_233 ~ any;
        m_match_bool_j_238 = var_j_233 ~ int;
        m_match_cond_j_239 = m_match_bool_j_238 ? (
                bool_j_240 = true
            ) : (
                m_match_cond_j_236 = m_match_bool_j_235 ? (
                        var_j_237 = fail_b_42
                    ) : (
                        void_j_234 = {}
                    )
            ));
    flatten_fun_j_243 = fun bj_null_j_2 -> (
        input_j_242 = input);
    flatten_fun_j_245 = fun expr_b_43 -> (
        var_j_244 = expr_b_43);
    record_j_246 = {checker = flatten_fun_j_241, generator = flatten_fun_j_243, wrapper = flatten_fun_j_245};
    proj_j_247 = record_j_246.checker;
    var_j_248 = expr_b_44;
    appl_j_249 = proj_j_247 var_j_248;
    t_check_b_45 = appl_j_249;
    var_j_250 = t_check_b_45;
    if_j_259 = var_j_250 ? (
            bool_j_251 = false;
            pred_check_b_46 = bool_j_251;
            var_j_252 = isNeg;
            var_j_253 = expr_b_44;
            appl_j_254 = var_j_252 var_j_253;
            if_j_257 = appl_j_254 ? (
                    bool_j_255 = true
                ) : (
                    var_j_256 = pred_check_b_46
                )
        ) : (
            var_j_258 = t_check_b_45
        ));
flatten_fun_j_286 = fun bj_null_j_4 -> (
    bool_j_261 = false;
    fail_b_38 = bool_j_261;
    flatten_fun_j_270 = fun expr_b_37 -> (
        var_j_262 = expr_b_37;
        m_match_bool_j_264 = var_j_262 ~ any;
        m_match_bool_j_267 = var_j_262 ~ int;
        m_match_cond_j_268 = m_match_bool_j_267 ? (
                bool_j_269 = true
            ) : (
                m_match_cond_j_265 = m_match_bool_j_264 ? (
                        var_j_266 = fail_b_38
                    ) : (
                        void_j_263 = {}
                    )
            ));
    flatten_fun_j_272 = fun bj_null_j_3 -> (
        input_j_271 = input);
    flatten_fun_j_274 = fun expr_b_39 -> (
        var_j_273 = expr_b_39);
    record_j_275 = {checker = flatten_fun_j_270, generator = flatten_fun_j_272, wrapper = flatten_fun_j_274};
    proj_j_276 = record_j_275.generator;
    int_j_277 = 0;
    appl_j_278 = proj_j_276 int_j_277;
    candidate_b_40 = appl_j_278;
    var_j_279 = isNeg;
    var_j_280 = candidate_b_40;
    appl_j_281 = var_j_279 var_j_280;
    if_j_285 = appl_j_281 ? (
            var_j_282 = candidate_b_40
        ) : (
            bool_j_283 = false;
            assume_j_284 = assume bool_j_283
        ));
flatten_fun_j_288 = fun expr_b_47 -> (
    var_j_287 = expr_b_47);
record_j_289 = {checker = flatten_fun_j_260, generator = flatten_fun_j_286, wrapper = flatten_fun_j_288};
proj_j_290 = record_j_289.checker;
appl_j_293 = f x_b_76;
appl_j_294 = proj_j_290 appl_j_293;
check_res_b_79 = appl_j_294;
if_j_494 = check_res_b_79 ? (
        g_j_399 = fun x -> (
            flatten_fun_j_396 = fun x_b_2 -> (
                int_j_296 = 0;
                input_j_297 = input;
                m_bl_i_526 = int_j_296 ~ int;
                m_br_i_527 = input_j_297 ~ int;
                m_b_i_528 = m_bl_i_526 and m_br_i_527;
                binop_j_298 = m_b_i_528 ? (
                        c_binop_i_529 = int_j_296 < input_j_297
                    ) : (
                        ab_i_530 = abort
                    );
                if_j_318 = binop_j_298 ? (
                        bool_j_299 = false;
                        fail_b_52 = bool_j_299;
                        flatten_fun_j_308 = fun expr_b_51 -> (
                            var_j_300 = expr_b_51;
                            m_match_bool_j_302 = var_j_300 ~ any;
                            m_match_bool_j_305 = var_j_300 ~ int;
                            m_match_cond_j_306 = m_match_bool_j_305 ? (
                                    bool_j_307 = true
                                ) : (
                                    m_match_cond_j_303 = m_match_bool_j_302 ? (
                                            var_j_304 = fail_b_52
                                        ) : (
                                            void_j_301 = {}
                                        )
                                ));
                        flatten_fun_j_310 = fun bj_null_j_9 -> (
                            input_j_309 = input);
                        flatten_fun_j_312 = fun expr_b_53 -> (
                            var_j_311 = expr_b_53);
                        record_j_313 = {checker = flatten_fun_j_308, generator = flatten_fun_j_310, wrapper = flatten_fun_j_312};
                        proj_j_314 = record_j_313.checker;
                        var_j_315 = x_b_2;
                        m_i_531 = proj_j_314 ~ fun;
                        appl_j_316 = m_i_531 ? (
                                c_appl_i_532 = proj_j_314 var_j_315
                            ) : (
                                ab_i_533 = abort
                            )
                    ) : (
                        bool_j_317 = true
                    );
                arg_check_b_3 = if_j_318;
                var_j_319 = arg_check_b_3;
                if_j_395 = var_j_319 ? (
                        flatten_fun_j_348 = fun expr_b_61 -> (
                            bool_j_320 = false;
                            fail_b_59 = bool_j_320;
                            flatten_fun_j_329 = fun expr_b_58 -> (
                                var_j_321 = expr_b_58;
                                m_match_bool_j_323 = var_j_321 ~ any;
                                m_match_bool_j_326 = var_j_321 ~ int;
                                m_match_cond_j_327 = m_match_bool_j_326 ? (
                                        bool_j_328 = true
                                    ) : (
                                        m_match_cond_j_324 = m_match_bool_j_323 ? (
                                                var_j_325 = fail_b_59
                                            ) : (
                                                void_j_322 = {}
                                            )
                                    ));
                            flatten_fun_j_331 = fun bj_null_j_10 -> (
                                input_j_330 = input);
                            flatten_fun_j_333 = fun expr_b_60 -> (
                                var_j_332 = expr_b_60);
                            record_j_334 = {checker = flatten_fun_j_329, generator = flatten_fun_j_331, wrapper = flatten_fun_j_333};
                            proj_j_335 = record_j_334.checker;
                            var_j_336 = expr_b_61;
                            appl_j_337 = proj_j_335 var_j_336;
                            t_check_b_62 = appl_j_337;
                            var_j_338 = t_check_b_62;
                            if_j_347 = var_j_338 ? (
                                    bool_j_339 = false;
                                    pred_check_b_63 = bool_j_339;
                                    var_j_340 = isNeg;
                                    var_j_341 = expr_b_61;
                                    appl_j_342 = var_j_340 var_j_341;
                                    if_j_345 = appl_j_342 ? (
                                            bool_j_343 = true
                                        ) : (
                                            var_j_344 = pred_check_b_63
                                        )
                                ) : (
                                    var_j_346 = t_check_b_62
                                ));
                        flatten_fun_j_374 = fun bj_null_j_12 -> (
                            bool_j_349 = false;
                            fail_b_55 = bool_j_349;
                            flatten_fun_j_358 = fun expr_b_54 -> (
                                var_j_350 = expr_b_54;
                                m_match_bool_j_352 = var_j_350 ~ any;
                                m_match_bool_j_355 = var_j_350 ~ int;
                                m_match_cond_j_356 = m_match_bool_j_355 ? (
                                        bool_j_357 = true
                                    ) : (
                                        m_match_cond_j_353 = m_match_bool_j_352 ? (
                                                var_j_354 = fail_b_55
                                            ) : (
                                                void_j_351 = {}
                                            )
                                    ));
                            flatten_fun_j_360 = fun bj_null_j_11 -> (
                                input_j_359 = input);
                            flatten_fun_j_362 = fun expr_b_56 -> (
                                var_j_361 = expr_b_56);
                            record_j_363 = {checker = flatten_fun_j_358, generator = flatten_fun_j_360, wrapper = flatten_fun_j_362};
                            proj_j_364 = record_j_363.generator;
                            int_j_365 = 0;
                            appl_j_366 = proj_j_364 int_j_365;
                            candidate_b_57 = appl_j_366;
                            var_j_367 = isNeg;
                            var_j_368 = candidate_b_57;
                            appl_j_369 = var_j_367 var_j_368;
                            if_j_373 = appl_j_369 ? (
                                    var_j_370 = candidate_b_57
                                ) : (
                                    bool_j_371 = false;
                                    assume_j_372 = assume bool_j_371
                                ));
                        flatten_fun_j_376 = fun expr_b_64 -> (
                            var_j_375 = expr_b_64);
                        record_j_377 = {checker = flatten_fun_j_348, generator = flatten_fun_j_374, wrapper = flatten_fun_j_376};
                        proj_j_378 = record_j_377.wrapper;
                        int_j_379 = 0;
                        var_j_380 = x;
                        m_bl_i_534 = int_j_379 ~ int;
                        m_br_i_535 = var_j_380 ~ int;
                        m_b_i_536 = m_bl_i_534 and m_br_i_535;
                        binop_j_381 = m_b_i_536 ? (
                                c_binop_i_537 = int_j_379 < var_j_380
                            ) : (
                                ab_i_538 = abort
                            );
                        m_i_539 = binop_j_381 ~ bool;
                        if_j_388 = m_i_539 ? (
                                c_cond_i_546 = binop_j_381 ? (
                                        var_j_382 = f;
                                        var_j_383 = x;
                                        m_i_540 = var_j_382 ~ fun;
                                        appl_j_384 = m_i_540 ? (
                                                c_appl_i_541 = var_j_382 var_j_383
                                            ) : (
                                                ab_i_542 = abort
                                            )
                                    ) : (
                                        var_j_385 = f;
                                        int_j_386 = 8;
                                        m_i_543 = var_j_385 ~ fun;
                                        appl_j_387 = m_i_543 ? (
                                                c_appl_i_544 = var_j_385 int_j_386
                                            ) : (
                                                ab_i_545 = abort
                                            )
                                    )
                            ) : (
                                ab_i_547 = abort
                            );
                        m_i_548 = proj_j_378 ~ fun;
                        appl_j_389 = m_i_548 ? (
                                c_appl_i_549 = proj_j_378 if_j_388
                            ) : (
                                ab_i_550 = abort
                            )
                    ) : (
                        var_j_390 = arg_check_b_3;
                        assert_pred_j_391 = var_j_390;
                        assert_res_j_392 = assert_pred_j_391 ? (
                                assert_res_true_j_393 = {}
                            ) : (
                                ab_j_394 = abort
                            )
                    ));
            var_j_397 = x;
            appl_j_398 = flatten_fun_j_396 var_j_397);
        g = g_j_399;
        bool_j_400 = false;
        fail_b_49 = bool_j_400;
        flatten_fun_j_409 = fun expr_b_48 -> (
            var_j_401 = expr_b_48;
            m_match_bool_j_403 = var_j_401 ~ any;
            m_match_bool_j_406 = var_j_401 ~ int;
            m_match_cond_j_407 = m_match_bool_j_406 ? (
                    bool_j_408 = true
                ) : (
                    m_match_cond_j_404 = m_match_bool_j_403 ? (
                            var_j_405 = fail_b_49
                        ) : (
                            void_j_402 = {}
                        )
                ));
        flatten_fun_j_411 = fun bj_null_j_5 -> (
            input_j_410 = input);
        flatten_fun_j_413 = fun expr_b_50 -> (
            var_j_412 = expr_b_50);
        record_j_414 = {checker = flatten_fun_j_409, generator = flatten_fun_j_411, wrapper = flatten_fun_j_413};
        proj_j_415 = record_j_414.generator;
        int_j_416 = 0;
        appl_j_417 = proj_j_415 int_j_416;
        x_b_77 = appl_j_417;
        flatten_fun_j_446 = fun expr_b_72 -> (
            bool_j_418 = false;
            fail_b_70 = bool_j_418;
            flatten_fun_j_427 = fun expr_b_69 -> (
                var_j_419 = expr_b_69;
                m_match_bool_j_421 = var_j_419 ~ any;
                m_match_bool_j_424 = var_j_419 ~ int;
                m_match_cond_j_425 = m_match_bool_j_424 ? (
                        bool_j_426 = true
                    ) : (
                        m_match_cond_j_422 = m_match_bool_j_421 ? (
                                var_j_423 = fail_b_70
                            ) : (
                                void_j_420 = {}
                            )
                    ));
            flatten_fun_j_429 = fun bj_null_j_6 -> (
                input_j_428 = input);
            flatten_fun_j_431 = fun expr_b_71 -> (
                var_j_430 = expr_b_71);
            record_j_432 = {checker = flatten_fun_j_427, generator = flatten_fun_j_429, wrapper = flatten_fun_j_431};
            proj_j_433 = record_j_432.checker;
            var_j_434 = expr_b_72;
            appl_j_435 = proj_j_433 var_j_434;
            t_check_b_73 = appl_j_435;
            var_j_436 = t_check_b_73;
            if_j_445 = var_j_436 ? (
                    bool_j_437 = false;
                    pred_check_b_74 = bool_j_437;
                    var_j_438 = isNeg;
                    var_j_439 = expr_b_72;
                    appl_j_440 = var_j_438 var_j_439;
                    if_j_443 = appl_j_440 ? (
                            bool_j_441 = true
                        ) : (
                            var_j_442 = pred_check_b_74
                        )
                ) : (
                    var_j_444 = t_check_b_73
                ));
        flatten_fun_j_472 = fun bj_null_j_8 -> (
            bool_j_447 = false;
            fail_b_66 = bool_j_447;
            flatten_fun_j_456 = fun expr_b_65 -> (
                var_j_448 = expr_b_65;
                m_match_bool_j_450 = var_j_448 ~ any;
                m_match_bool_j_453 = var_j_448 ~ int;
                m_match_cond_j_454 = m_match_bool_j_453 ? (
                        bool_j_455 = true
                    ) : (
                        m_match_cond_j_451 = m_match_bool_j_450 ? (
                                var_j_452 = fail_b_66
                            ) : (
                                void_j_449 = {}
                            )
                    ));
            flatten_fun_j_458 = fun bj_null_j_7 -> (
                input_j_457 = input);
            flatten_fun_j_460 = fun expr_b_67 -> (
                var_j_459 = expr_b_67);
            record_j_461 = {checker = flatten_fun_j_456, generator = flatten_fun_j_458, wrapper = flatten_fun_j_460};
            proj_j_462 = record_j_461.generator;
            int_j_463 = 0;
            appl_j_464 = proj_j_462 int_j_463;
            candidate_b_68 = appl_j_464;
            var_j_465 = isNeg;
            var_j_466 = candidate_b_68;
            appl_j_467 = var_j_465 var_j_466;
            if_j_471 = appl_j_467 ? (
                    var_j_468 = candidate_b_68
                ) : (
                    bool_j_469 = false;
                    assume_j_470 = assume bool_j_469
                ));
        flatten_fun_j_474 = fun expr_b_75 -> (
            var_j_473 = expr_b_75);
        record_j_475 = {checker = flatten_fun_j_446, generator = flatten_fun_j_472, wrapper = flatten_fun_j_474};
        proj_j_476 = record_j_475.checker;
        var_j_477 = g;
        var_j_478 = x_b_77;
        appl_j_479 = var_j_477 var_j_478;
        appl_j_480 = proj_j_476 appl_j_479;
        check_res_b_78 = appl_j_480;
        var_j_481 = check_res_b_78;
        if_j_488 = var_j_481 ? (
                var_j_482 = g
            ) : (
                error_var_j_483 = check_res_b_78;
                assert_pred_j_484 = error_var_j_483;
                assert_res_j_485 = assert_pred_j_484 ? (
                        assert_res_true_j_486 = {}
                    ) : (
                        ab_j_487 = abort
                    )
            )
    ) : (
        error_var_j_489 = check_res_b_79;
        assert_pred_j_490 = error_var_j_489;
        assert_res_j_491 = assert_pred_j_490 ? (
                assert_res_true_j_492 = {}
            ) : (
                ab_j_493 = abort
            )
    );
i_result = if_j_494