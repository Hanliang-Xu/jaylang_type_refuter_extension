
let max x1 x2 = 
  if x1 > x2 then x1 else x2
in

let abs n = 
  if n > 0 then n else (0-1) * n
in

let rec get_height t = 
  match t with
  | `Node node ->
    match node with
    | { left = l , right = r , _ } ->
      max (get_height l) (get_height r) + 1
    end
  | `Leaf leaf -> 1
  end
in

let rec is_balanced t = 
  match t with
  | `Node node ->
    match node with
    | {left = l, right = r, _} ->
      is_balanced l
      and is_balanced r
      and abs (get_height l - get_height r) <= 1
    end
  | `Leaf leaf -> true
  end
in

let tree_type = Mu tt.
  (  ``Node {: left : tt, right : tt :}
  || ``Leaf {: leaf : int :}
  )
in

let (x : {. tree_type | is_balanced }) = 
  `Node
  { left = 
    `Node { left = 
            `Node { left = 
                  `Node { left = `Leaf {leaf = 0}
                        , right = `Leaf {leaf = 0}
                        }
                  , right = `Leaf {leaf = 0}
                  }
          , right =
            `Node { left = 
                  `Node { left = `Leaf {leaf = 0}
                        , right = `Leaf {leaf = 0}
                        }
                  , right = `Leaf {leaf = 0}
                  }
          }
  , right =
    `Node { left = 
            `Node { left = 
                  `Node { left = `Leaf {leaf = 0}
                        , right = `Leaf {leaf = 0}
                        }
                  , right = `Leaf {leaf = 0}
                  }
          , right =
            `Node { left = 
                  `Node { left = `Leaf {leaf = 0}
                        , right = `Leaf {leaf = 0}
                        }
                  , right = `Leaf {leaf = 0}
                  }
          }
  }
in

x
