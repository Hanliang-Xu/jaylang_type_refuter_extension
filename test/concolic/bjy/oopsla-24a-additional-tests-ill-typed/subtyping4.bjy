# subtype of intersection of functions
# This is simpler version of subtyping2.bjy

let t = (int -> int) && (bool -> bool)
in

# this is a subtype of t, so this typechecks
let (f : t) =
  fun x ->
    match x with
    | bool -> true
    | int -> x
    | _ -> 1 :: 2 :: []
    end
in

let g (h : t) : t =
  fun x -> h 0 # ERROR: this means g is any -> int, which is not a subtype of t
in

let x = g f # error is in body of g, not in this application
in

x