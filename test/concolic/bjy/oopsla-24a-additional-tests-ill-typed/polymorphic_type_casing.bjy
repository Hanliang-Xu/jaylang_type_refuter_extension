
let t = (int -> int) && (bool -> bool)
in

let (f : t) = 
  let g (type a_) (x : a_) : a_ =
    match x with
    | int -> x + 1 # ERROR: type casing on polymorphic type
    | bool -> not x
    | _ -> x
    end
  in
  g # Also error here -- no good type to put here 
in

f
