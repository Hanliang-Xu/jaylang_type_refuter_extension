# Here is part of an ngram program implementation that contains a type error I made along the way to implementing the full program.
# This has been trimmed down to remove any code that had no intersection with the erroring code.

let pos_int = {. int | fun i -> i > 0 }
in

# Parametric map
let map a b = a -> b
in

# Parametric bag
let bag a = List a
in

let rec len ls = 
  match ls with
  | [] -> 0
  | hd :: tl -> 1 + len tl
  end
in

let ngram n a = {. List a | fun ls -> len ls == n and n > 0 }
in

let distribution n a = map (ngram (n - 1) a) (bag a)
in

let rec take n =
#letd rec take (n : pos_int) : (List 'a) -> {. List 'a | fun ls -> len ls <= n } =
  fun l ->
    match l with
    | [] -> []
    | hd :: tl ->
      if n == 1
      then [ hd ]
      else hd :: take (n - 1) tl
    end
in

#letd make_ngrams (n : pos_int) : (List 'a) -> List (ngram n ('a)) =
let make_ngrams n =
  fun ls ->
    let rec loop l =
      match l with
      | [] -> []
      | hd :: tl ->
        if len l < n then [] else
        take n l :: loop tl
      end
    in
    loop ls
in

#let rec compare_list (compare : 'a -> 'a -> int) (l1 : List 'a) (l2 : List 'a) : int =
let rec compare_list compare l1 l2 =
  match l1 with
  | [] ->
    match l2 with
    | [] -> 0
    | _ -> 0 - 1
    end
  | hd :: tl ->
    match l2 with 
    | [] -> 1
    | hd2 :: tl2 ->
      let c = compare hd hd2 in
      if c == 0
      then compare_list compare tl tl2
      else c
    end
  end
in

let tuple a b = {: fst : a , snd : b :}
in

letd bag_map_of_list (ls : List (tuple ('a) ('b))) : ('a -> 'a -> int) -> map ('a) (bag ('b)) =
#let bag_map_of_list ls =
  fun compare ->
    fun a ->
      let rec loop l =
        match l with
        | [] -> []
        | hd :: tl ->
          if compare hd.fst a == 0
          then hd.snd :: loop tl
          else loop tl
        end
      in
      loop ls
in

#let rec last_exn (ls : {. List 'a | fun l -> len l > 0 }) : 'a = 
let rec last_exn ls = 
  match ls with
  | [] -> assert false
  | hd :: tl ->
    match tl with
    | [] -> hd
    | _ -> last_exn tl
    end
  end
in

letd make_dist (n : pos_int) : (List 'a) -> ('a -> 'a -> int) -> distribution n ('a) =
  fun l ->
    fun compare ->
      let ngrams = make_ngrams n l in
      let rec make_tup_list ls =
        match ls with
        | [] -> []
        | ngram :: tl ->
          #{ fst = last_exn ngram , snd = take (n - 1) ngram } :: make_tup_list ls # ERROR: fst and snd are switched here. fst here is 'a, but we use compare_list below
          { snd = last_exn ngram , fst = take (n - 1) ngram } :: make_tup_list ls
        end
      in
      bag_map_of_list (make_tup_list ngrams) (compare_list compare)
in

make_ngrams

