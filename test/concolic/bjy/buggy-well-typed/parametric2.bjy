# Continuation monad

let a = 'a in let b = 'b in let r = 'r in

let ta = {: continuation : (a -> r) -> r :} 
in

let tb = {: continuation : (b -> r) -> r :}
in

let bind (ar_r : ta) : (a -> tb) -> tb =
  fun a_br_r ->
    { continuation = 
      fun br ->
        match ar_r with
        | { continuation = ar_r } ->
          ar_r (
            fun a ->
              match a_br_r a with
              | { continuation = br_r } ->
                br_r br 
              end
          )
        end
    }
in

# TODO: figure out why this is not well-typed
let f = bind { continuation = fun ir -> ir 0 }
in

bind
      