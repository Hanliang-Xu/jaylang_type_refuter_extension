# flatten the input down to just a list of ints and bools

(*
  The well-typed version doesn't work here because we need a different gen
  and check, but wrapping uses the type to check that we *want* to use to gen
*)
let any_type a =
  Mu tt.
    let n = input in
    if n == 123456789
    then ``L (List tt)
    else ``A a
in

let rec append a b =
  match a with
  | [] -> b
  | hd :: tl -> hd :: append tl b
  end
in

let rec flatten (type a_) (x : any_type a_) : List a_ =
  match x with
  | `L ls ->
    match ls with
    | [] -> []
    | hd :: tl -> append (flatten a_ hd) tl # ERROR: should have `(flatten a_ (`L tl))` instead of `tl`
    end
  | `A a -> [ a ]
  end
  in

flatten
