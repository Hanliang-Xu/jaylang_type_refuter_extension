# Resolved the error in this by making a concrete version for any of the expected types

let rec append a b =
  match a with
  | [] -> b
  | hd :: tl -> hd :: append tl b
  end
in

let plus =
  fun left ->
    fun right ->
      match left with
      | int -> left + right
      | bool -> left and right
      | hd :: tl -> append left right
      | _ -> left
      end
in

let nonempty_list a =
  {. List a | fun ls ->
    match ls with
    | [] -> false
    | hd :: tl -> true
    end
  }
in

let rec reduce_plus_list (type a_) (ls : nonempty_list (List a_)) : List a_ =
  match ls with
  | hd :: tl ->
    match tl with
    | [] -> hd
    | _ -> plus hd (reduce_plus_list a_ tl)
    end
  end
in

let rec reduce_plus_int (ls : nonempty_list (int)) : int =
  match ls with
  | hd :: tl ->
    match tl with
    | [] -> hd
    | _ -> plus hd (reduce_plus_int tl)
    end
  end
in

let rec reduce_plus_bool (ls : nonempty_list (bool)) : bool =
  match ls with
  | hd :: tl ->
    match tl with
    | [] -> hd
    | _ -> plus hd (reduce_plus_bool tl)
    end
  end
in

reduce_plus_list
