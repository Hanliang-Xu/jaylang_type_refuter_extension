
let t = ((``Int int) -> int) && ((``Bool bool) -> bool)
in

let (f : t) = 
  let g (type a_) (x : a_) : a_ =
    match x with
    | `Int x -> x + 1 # ERROR: type casing on polymorphic type
    | `Bool x -> not x
    | _ -> x
    end
  in
  g # Also error here -- no good type to put here 
in

f
