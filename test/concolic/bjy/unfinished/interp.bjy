
let ident =
  { t = ``Id int
  , eq =
      fun a b -> 
        let x = match a with | `Id i -> i end in
        let y = match b with | `Id i -> i end in
        x == y
  }
in

let pair =
  { t = fun a -> fun b -> {: left : a , right : b :}
  }
in

let triple =
  { t = fun a -> fun b -> fun c -> {: first : a , second : b , third : c :}
  }
in

let expr =
  { t_gen =
      Mu tt.
        let n = input in
        if n == 123456789
        then 
          (  ``Function (pair.t ident.t tt)
          || ``If_then_else (triple.t tt tt tt)
          || ``Plus (pair.t tt tt)
          || ``Minus (pair.t tt tt)
          || ``Equal (pair.t tt tt)
          || ``Appl (pair.t tt tt)
          )
        else
          ( ``Int int || ``Var ident.t )
  , t_check =
      Mu tt.
        ( ``Int int
        || ``Var ident.t
        || ``Function (pair.t ident.t tt)
        || ``If_then_else (triple.t tt tt tt)
        || ``Plus (pair.t tt tt)
        || ``Minus (pair.t tt tt)
        || ``Equal (pair.t tt tt)
        || ``Appl (pair.t tt tt)
        )
  }
in

let value =
  let t expr_t =
    ( ``Int int
    || ``Function (pair.t ident.t expr_t)
    )
  in
  { t_gen = t expr.t_gen
  , t_check = t expr.t_check
  }
in

let rec mem ls a eq =
  match ls with
  | [] -> false
  | hd :: tl ->
      if eq a hd
      then true
      else mem tl a eq
  end
in

let is_closed e =
  let rec is_closed_rec idents e =
    match e with
    | `Var id -> mem idents id ident.eq
    | `Int i -> true
    | `Function p -> is_closed_rec (p.left :: idents) p.right
    | `If_then_else trip ->
      is_closed_rec idents trip.first
      and is_closed_rec idents trip.second
      and is_closed_rec idents trip.third
    | _ ->
      let p =
        match e with
        | `Plus p -> p
        | `Minus p -> p
        | `Equal p -> p
        | `Appl p -> p
        end
      in
        is_closed_rec idents p.left
        and is_closed_rec idents p.right
    end
  in
  is_closed_rec [] e
in

#let subst (e : expr.t) (id : ident.t) (v : value.t) : expr.t =
let subst e id v =
  let rec sub e =
    let sub_pair p =
      { left = sub p.left
      , right = sub p.right }
    in
    match e with
    | `Var var_id ->
        if ident.eq var_id id
        then v
        else e
    | `Int i -> e
    | `Function p ->
        if ident.eq p.left id
        then e
        else `Function { left = p.left , right = sub p.right }
    | `Plus p -> `Plus (sub_pair p)
    | `Minus p -> `Minus (sub_pair p)
    | `Equal p -> `Equal (sub_pair p)
    | `Appl p -> `Appl (sub_pair p)
    | `If_then_else trip -> `If_then_else { first = sub trip.first , second = sub trip.second , third = sub trip.third }
    end
  in
  sub e
in

(*
  This is to say that the input program is ill-typed.
  We catch this at runtime and just diverge safely. If
  our system was extremely performant, we might choose
  to run a type-checker as a refinement. However, we are
  not yet close to being able to do that.
*)
let ill_typed x =
  assume false
in

# It takes a while to find this error. I'm still unsure if there's a natural reason why other than "it's a hard problem"
let rec eval (e : {. expr.t_gen | is_closed }) : value.t_check =
  let op_ints p op = 
    match eval p.left with 
    | `Int i1 ->
      match eval p.right with
      | `Int i2 -> `Int (op i1 i2)
      | _ -> ill_typed 00
      end
    | _ -> ill_typed 00
    end
  in
  match e with
  | `Int i -> e
  | `Function p -> e
  | `Plus p -> op_ints p (fun a -> fun b -> a + b)
  | `Minus p -> op_ints p (fun a -> fun b -> a - b)
  | `Equal p -> op_ints p (fun a -> fun b -> if a == b then 0 else 1)
  | `Appl p ->
    match eval p.left with
    | `Function p2 -> eval (subst p2.right p2.left (eval p.right)) # ERROR idea : don't eval p.right (isn't caught--is it actually an error?)
    | _ -> ill_typed 00
    end
  | `If_then_else trip ->
    match eval trip.first with
    | `Int i ->
      if i == 0
      then eval trip.second
      else eval trip.third # I had a bug here where I had trip.trip instead of trip.third. That's a (natural) error
    | _ -> ill_typed 00 # ERROR: forgot about ill-typed case
    end
  end
in

eval
